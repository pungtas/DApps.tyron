(* v1.5.0
xpoints.tyron: xPoints DApp <> Raise Your Voice
Self-Sovereign Identity Protocol
Copyright (C) Tyron Mapu Community Interest Company and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

import BoolUtils IntUtils

library XPoints
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg
  
  let zero = Uint128 0
  let zeroByStr20 = 0x0000000000000000000000000000000000000000

  let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
  
contract XPoints(
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field dns: Map String ByStr20 end end
  )
  field version: String = "xpoints-1.5.0"
  field ranking: Map ByStr32 Uint128 = Emp ByStr32 Uint128
  field motions: Map ByStr32 String = Emp ByStr32 String
  field nonce: Uint128 = zero
  field tx_number: Uint128 = zero

procedure Timestamp()
  current_block <- &BLOCKNUMBER; latest_tx_number <- tx_number;
  new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor; tx_number := new_tx_number end

transition RaiseYourVoice(
  action: String,
  id: Option ByStr32,   (* to add xPoints to an existing motion *)
  motion: Option String,   (* to create a new motion *)
  amount: Uint128
  )
  current_init <-& init.dApp; donateDApp = "donate";
  get_addr <-& current_init.dns[donateDApp]; addr = option_bystr20_value get_addr;
  msg = let m = { _tag: "XPoints"; _recipient: addr; _amount: zero;
    amount: amount } in one_msg m ; send msg;
  is_new = let new = "new" in builtin eq action new; match is_new with
    | True =>
      match motion with
      | None => e = { _exception : "xPoints-NewMotionIsNull" }; throw e
      | Some motion_ =>
        current_nonce <- nonce;
        new_nonce = let incrementor = Uint128 1 in builtin add current_nonce incrementor; nonce := new_nonce;
        new_id = let input = let nonce_str = builtin to_string new_nonce in builtin concat nonce_str motion_ in builtin sha256hash input;
        motions[new_id] := motion_;
        ranking[new_id] := amount end
    | False =>
      is_add = let add = "add" in builtin eq action add; match is_add with
        | True =>
          match id with
          | None => e = { _exception : "xPoints-AddMotionIsNull" }; throw e
          | Some id_ =>
            get_points <- ranking[id_]; points = option_uint128_value get_points;
            new_balance = builtin add points amount; ranking[id_] := new_balance end
        | False => e = { _exception : "xPoints-InvalidAction" }; throw e end end;
  Timestamp end