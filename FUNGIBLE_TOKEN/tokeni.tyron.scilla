(* v2.1.0
tokeni.tyron: fungible token <> Implementation smart contract
Tyron Self-Sovereign Identity Protocol
Copyright (C) Tyron Pungtas and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

import IntUtils

library TokenI
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  let two_msgs =
    fun( msg1: Message ) => fun( msg2: Message ) =>
    let msgs_tmp = one_msg msg2 in Cons{ Message } msg1 msgs_tmp

  let three_msgs =
    fun( msg1: Message ) => fun( msg2: Message ) => fun( msg3: Message ) =>
    let msgs_tmp = two_msgs msg2 msg3 in Cons{ Message } msg1 msgs_tmp

  let four_msgs =
    fun( msg1: Message ) => fun( msg2: Message ) => fun( msg3: Message ) => fun( msg4: Message ) =>
    let msgs_tmp = three_msgs msg2 msg3 msg4 in Cons{ Message } msg1 msgs_tmp

  type Error =
    | CodeNotProxy
    | CodeWrongCaller
    | CodeNotPauser
    | CodeNotLister
    | CodeIsPaused
    | CodeNotPaused
    | CodeIsBlocked
    | CodeNotBlocked
    | CodeSameAddress
    | CodeIsNull
    | CodeIsInsufficient

  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeNotProxy               => Int32 -1
    | CodeWrongCaller            => Int32 -2
    | CodeNotPauser              => Int32 -3
    | CodeNotLister              => Int32 -4
    | CodeIsPaused               => Int32 -5
    | CodeNotPaused              => Int32 -6
    | CodeIsBlocked              => Int32 -7
    | CodeNotBlocked             => Int32 -8
    | CodeSameAddress            => Int32 -9
    | CodeIsNull                 => Int32 -10
    | CodeIsInsufficient         => Int32 -11
    end in { _exception: "Error"; code: result }

  let zero = Uint128 0
  let true = True
  let false = False
  let zeroByStr20 = 0x0000000000000000000000000000000000000000

  let option_value =
    tfun 'A => fun( default: 'A ) => fun( opt_val: Option 'A ) => match opt_val with
    | Some v => v
    | None => default end

  let option_uint128_value =
    let f = @option_value Uint128 in f zero
   
  let option2_uint128_value =
    fun( input: Option( Option Uint128 )) => match input with
    | Some (Some a) => a
    | _ => zero end

  let option_uint128 =
    fun( input: Uint128 ) =>
    let is_zero = builtin eq input zero in match is_zero with
    | True => None{ Uint128 }
    | False => Some{ Uint128 } input end

  let better_subtract =
    fun( a: Uint128 ) => fun( b: Uint128 ) =>
    let a_ge_b = uint128_ge a b in match a_ge_b with
    | True => builtin sub a b
    | False => zero end
  
  type Account =
    | Account of BNum Uint128 Uint128 Uint128

contract TokenI(
  init_controller: ByStr20,
  proxy: ByStr20 with contract 
    field balances: Map ByStr20 Uint128,
    field allowances: Map ByStr20 ( Map ByStr20 Uint128 ) end
  )
  field controller: ByStr20 = init_controller
  field paused: Bool = False
  field fund: ByStr20 = init_controller
  field pauser: ByStr20 = init_controller
  field lister: ByStr20 = init_controller
  field blocked: Map ByStr20 Bool = Emp ByStr20 Bool
  field accounts: Map ByStr20 Account = Emp ByStr20 Account
  field lockup_period: Uint128 = Uint128 1466791

procedure ThrowError( err: Error )
  e = make_error err; throw e end

procedure ThrowIfNotProxy()
  verified = builtin eq proxy _sender; match verified with
  | True => | False => err= CodeNotProxy; ThrowError err end end

procedure VerifyController()
  current_controller <- controller;
  verified = builtin eq _origin current_controller; match verified with
  | True => | False => err = CodeWrongCaller; ThrowError err end end

procedure IsPauser()
  current_pauser <- pauser;
  is_pauser = builtin eq _origin current_pauser; match is_pauser with
  | True  => | False => err = CodeNotPauser; ThrowError err end end

procedure IsPaused()
  is_paused <- paused; match is_paused with
  | True => | False => err = CodeNotPaused; ThrowError err end end

procedure IsNotPaused()
  is_paused <- paused; match is_paused with
  | False => | True => err = CodeIsPaused; ThrowError err end end

procedure IsLister()
  current_lister <- lister;
  is_lister = builtin eq current_lister _origin; match is_lister with
  | True  => | False => err = CodeNotLister; ThrowError err end end

procedure IsBlocked( addr: ByStr20 )
  is_blocked <- exists blocked[addr]; match is_blocked with
  | True => | False => err = CodeNotBlocked; ThrowError err end end

procedure IsNotBlocked( addr: ByStr20 )
  is_blocked <- exists blocked[addr]; match is_blocked with
  | False => | True => err = CodeIsBlocked; ThrowError err end end

procedure IsNotNull( addr: ByStr20 )
  is_null = builtin eq zeroByStr20 addr; match is_null with
  | False => | True => err = CodeIsNull; ThrowError err end end

procedure ThowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
  | False => | True => err = CodeSameAddress; ThrowError err end end

procedure IsSufficient(
  value: Uint128,
  amount: Uint128
  )
  is_sufficient = uint128_ge value amount; match is_sufficient with
  | True => | False => err = CodeIsInsufficient; ThrowError err end end

transition UpdateAdmin( addr: ByStr20 )
  IsNotPaused; VerifyController; IsNotNull addr;
  current_controller <- controller; ThowIfSameAddr current_controller addr;
  controller := addr;
  e = { _eventname: "AdminUpdated";
    new_addr: addr }; event e end

transition UpdatePauser( new_pauser: ByStr20 )
  IsNotPaused; VerifyController; IsNotNull new_pauser;
  current_pauser <- pauser;
  ThowIfSameAddr current_pauser new_pauser; pauser := new_pauser;
  e = { _eventname: "PauserUpdated";
    pauser_updated: new_pauser }; event e end

transition Pause()
  ThrowIfNotProxy; IsPauser;
  IsNotPaused; paused := true;
  e = { _eventname: "SmartContractPaused";
    pauser: _origin }; event e end

transition Unpause()
  ThrowIfNotProxy; IsPauser;
  IsPaused; paused := false;
  e = { _eventname: "SmartContractUnpaused";
    pauser: _origin }; event e end

transition UpdateLister( new_lister: ByStr20 )
  IsNotPaused; VerifyController; IsNotNull new_lister;
  current_lister <- lister;
  ThowIfSameAddr current_lister new_lister; lister:= new_lister;
  e = { _eventname: "ListerUpdated";
    lister_updated: new_lister }; event e end

transition Block( addr: ByStr20 )
  IsNotPaused; IsLister;
  IsNotNull addr; IsNotBlocked addr; blocked[addr] := true;
  e = { _eventname: "AddressBlocked";
    address: addr;
    lister: _origin }; event e end

transition Unblock( addr: ByStr20 )
  IsNotPaused; IsLister;
  IsNotNull addr; IsBlocked addr; delete blocked[addr];
  e = { _eventname: "AddressUnblocked";
    address: addr;
    lister: _origin }; event e end

transition UpdateFund( addr: ByStr20 )
  IsNotPaused; VerifyController; IsNotNull addr;
  current_fund <- fund; ThowIfSameAddr current_fund addr;
  fund := addr;
  e = { _eventname: "FundAddressUpdated";
    new_addr: addr }; event e end

transition UpdateLockup( new: Uint128 )
  IsNotPaused; VerifyController; lockup_period := new end
  
transition AddAcount(
  investor: ByStr20,
  amount: Uint128,
  schedule: Uint128
  )
  IsNotPaused; VerifyController; current_fund <- fund; block <- &BLOCKNUMBER;
  IsNotBlocked current_fund; IsNotNull investor; IsNotBlocked investor; ThowIfSameAddr current_fund investor;
  get_fund_bal <-& proxy.balances[current_fund]; fund_bal = option_uint128_value get_fund_bal;
  new_fund_bal = builtin sub fund_bal amount;
  get_investor_bal <-& proxy.balances[investor]; investor_bal = option_uint128_value get_investor_bal;
  new_investor_bal = builtin add investor_bal amount;
  lockup <- lockup_period;
  portion = builtin div amount schedule;
  vest = builtin div lockup schedule; next = builtin badd block vest;
  account = Account next vest amount portion; accounts[investor] := account;
  msg = let m = { _tag: "TransferCallBack"; _recipient: proxy; _amount: zero;
    originator: current_fund;
    beneficiary: investor;
    new_originator_bal: new_fund_bal;
    new_beneficiary_bal: new_investor_bal } in one_msg m; send msg end

procedure IsVested(
  investor: ByStr20,
  bal: Uint128,
  transfer: Uint128
  )
  get_account <- accounts[investor];
  match get_account with
  | None => | Some account =>
      match account with
      | Account next vest amount portion =>
          new = builtin sub bal transfer;
          block <- &BLOCKNUMBER; vested = builtin blt next block;
          match vested with
          | False => IsSufficient new amount
          | True => 
              new_ = builtin sub amount portion;
              is_zero = builtin eq zero new_;
              match is_zero with
              | True => delete accounts[investor]
              | False =>
                  IsSufficient new_ amount;
                  next_ = builtin badd next vest;
                  account = Account next_ vest new_ portion; accounts[investor] := account end end end end end

transition Transfer(
  originator: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsNotBlocked originator; IsNotNull beneficiary; IsNotBlocked beneficiary; ThowIfSameAddr originator beneficiary;
  get_originator_bal <-& proxy.balances[originator]; originator_bal = option_uint128_value get_originator_bal;
  IsSufficient originator_bal amount; IsVested originator originator_bal amount;
  new_originator_bal = builtin sub originator_bal amount;
  get_beneficiary_bal <-& proxy.balances[beneficiary]; beneficiary_bal = option_uint128_value get_beneficiary_bal;
  new_beneficiary_bal = builtin add beneficiary_bal amount;
  e = { _eventname: "TransferSuccess";
    originator: originator;
    beneficiary: beneficiary;
    amount: amount }; event e;
  msg_to_proxy = { _tag: "TransferCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    beneficiary: beneficiary;
    new_originator_bal: new_originator_bal;
    new_beneficiary_bal: new_beneficiary_bal
  };
  msg_to_originator = { _tag: "TransferSuccessCallBack"; _recipient: originator; _amount: zero;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptTransfer"; _recipient: beneficiary; _amount: zero;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  }; msgs = three_msgs msg_to_proxy msg_to_originator msg_to_beneficiary; send msgs end

transition IncreaseAllowance(
  originator: ByStr20,
  spender: ByStr20,
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsNotBlocked originator; IsNotBlocked spender; ThowIfSameAddr originator spender;
  get_allowance <-& proxy.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  new_allowance = builtin add allowance amount;
  e = { _eventname: "IncreasedAllowance";
    originator: originator;
    spender: spender;
    new_allowance : new_allowance }; event e;
  msg = let m = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    new_allowance: new_allowance
  } in one_msg m; send msg end

transition DecreaseAllowance(
  originator: ByStr20,
  spender: ByStr20,
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsNotBlocked originator; IsNotBlocked spender; ThowIfSameAddr originator spender;
  get_allowance <-& proxy.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  new_allowance = better_subtract allowance amount;
  e = { _eventname: "DecreasedAllowance";
    originator: originator;
    spender: spender;
    new_allowance: new_allowance }; event e;
  msg = let m = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    new_allowance: new_allowance
  } in one_msg m; send msg end

transition TransferFrom(
  originator: ByStr20,
  spender: ByStr20,
  beneficiary: ByStr20, 
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsNotBlocked originator; IsNotBlocked spender; IsNotBlocked beneficiary; IsNotNull beneficiary; ThowIfSameAddr originator beneficiary;
  get_originator_bal <-& proxy.balances[originator]; originator_bal = option_uint128_value get_originator_bal;
  IsSufficient originator_bal amount; IsVested originator originator_bal amount;
  get_allowance <-& proxy.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  IsSufficient allowance amount;
  get_beneficiary_bal <-& proxy.balances[beneficiary]; beneficiary_bal = option_uint128_value get_beneficiary_bal;
  new_originator_bal = builtin sub originator_bal amount; new_allowance = builtin sub allowance amount; new_beneficiary_bal = builtin add beneficiary_bal amount;
  e = { _eventname: "TransferFromSuccess";
    originator: originator;
    spender: spender;
    beneficiary: beneficiary;
    amount: amount }; event e;
  msg_to_proxy_balances = { _tag: "TransferCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    beneficiary: beneficiary;
    new_originator_bal: new_originator_bal;
    new_beneficiary_bal: new_beneficiary_bal
  };
  msg_to_proxy_allowance = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    new_allowance: new_allowance
  };
  msg_to_spender = { _tag: "TransferFromSuccessCallBack"; _recipient: spender; _amount: zero;
    initiator: spender;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptTransferFrom"; _recipient: beneficiary; _amount: zero;
    initiator: spender;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  }; msgs = four_msgs msg_to_proxy_balances msg_to_proxy_allowance msg_to_spender msg_to_beneficiary; send msgs end