(* v0.3.0
PSTi.tyron: profit-sharing token Zilliqa reference contract (ZRC) - Implementation smart contract.
Self-Sovereign Identity Protocol.
Copyright (C) Tyron Pungtas and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

import BoolUtils IntUtils ListUtils PairUtils

library PSTi

  type Account =
    | Account of Uint128 Uint128 Bool
    
  let one_msg = fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  let two_msgs = fun( msg1: Message ) => fun( msg2: Message ) =>
    let msgs_tmp = one_msg msg2 in Cons{ Message } msg1 msgs_tmp

  let three_msgs = fun( msg1: Message ) => fun( msg2: Message ) => fun( msg3: Message ) =>
    let msgs_tmp = two_msgs msg2 msg3 in Cons{ Message } msg1 msgs_tmp

  let four_msgs = fun( msg1: Message ) => fun( msg2: Message ) => fun( msg3: Message ) => fun( msg4: Message ) =>
    let msgs_tmp = three_msgs msg2 msg3 msg4 in Cons{ Message } msg1 msgs_tmp

  type Error =
    | CodeNotProxy
    | CodeNotAdmin
    | CodeNotPauser
    | CodeNotLister
    | CodeNotMainMinter
    | CodeNotMinter
    | CodeIsPaused
    | CodeNotPaused
    | CodeIsBlocked
    | CodeNotBlocked
    | CodeSameAddress
    | CodeIsNull
    | CodeInsufficientFunds
    | CodeInsufficientAllowance

  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeNotProxy               => Int32 -1
    | CodeNotAdmin               => Int32 -2
    | CodeNotPauser              => Int32 -3
    | CodeNotLister              => Int32 -4
    | CodeNotMainMinter          => Int32 -5
    | CodeNotMinter              => Int32 -6
    | CodeIsPaused               => Int32 -7
    | CodeNotPaused              => Int32 -8
    | CodeIsBlocked              => Int32 -9
    | CodeNotBlocked             => Int32 -10
    | CodeSameAddress            => Int32 -11
    | CodeIsNull                 => Int32 -12
    | CodeInsufficientFunds      => Int32 -13
    | CodeInsufficientAllowance  => Int32 -14
    end in { _exception: "Error"; code: result }

  let zero = Uint128 0
  let one  = Uint128 1
  let hundred = Uint128 100
  let none_uint128 = None{ Uint128 }
  let yes = True
  let no = False
  let null_address = 0x0000000000000000000000000000000000000000

  let option_value = tfun 'A => fun( default: 'A ) => fun( opt_val: Option 'A ) =>
    match opt_val with
    | Some v => v
    | None => default end
    
  let option_account = let f = @option_value Account in let noAccount = Account zero zero no in f noAccount

  let account_balance = fun( getAccount: Option Account ) =>
    let account = option_account getAccount
    in match account with
    | Account balance share vote => balance end
    
  let option_uint128_value = let f = @option_value Uint128 in f zero
   
  let option2_uint128_value = fun( input: Option( Option Uint128 )) =>
    match input with
    | Some (Some a) => a
    | _ => zero end

  let option_uint128 = fun( input: Uint128 ) =>
    let is_zero = builtin eq input zero in
    match is_zero with
    | True => None{ Uint128 }
    | False => Some{ Uint128 } input end

  let better_subtract = fun( a: Uint128 ) => fun( b: Uint128 ) =>
    let a_ge_b = uint128_ge a b in
    match a_ge_b with
    | True => builtin sub a b
    | False => zero end

contract PSTi(
  initAdmin: ByStr20,
  proxyAddr: ByStr20 with contract 
    field total_supply: Uint128,
    field accounts: Map ByStr20 Account,
    field allowances: Map ByStr20 ( Map ByStr20 Uint128 )
    end,
  zilswapAddr: ByStr20
  )
  field admin: ByStr20 = initAdmin
  field pauser: ByStr20 = initAdmin
  field main_minter: ByStr20 = initAdmin
  field paused: Bool = False
  field lister: ByStr20 = initAdmin
  field blocked: Map ByStr20 Uint128 = Emp ByStr20 Uint128
  field minter_allowances: Map ByStr20 ( Option Uint128 ) = Emp ByStr20 ( Option Uint128 )
  field zilswap: ByStr20 = zilswapAddr
  field deadline_block: BNum = BNum 0

procedure ThrowError( err: Error )
  e = make_error err; throw e end

procedure ThrowIfNotProxy()
  verified = builtin eq proxyAddr _sender;
  match verified with
  | True =>
  | False => err= CodeNotProxy; ThrowError err end end

procedure isAdmin()
  current_admin <- admin;
  is_admin = builtin eq current_admin _origin;
  match is_admin with
  | True =>
  | False => err = CodeNotAdmin; ThrowError err end end

procedure isPauser()
  current_pauser <- pauser;
  is_pauser = builtin eq current_pauser _origin;
  match is_pauser with
  | True  =>
  | False => err = CodeNotPauser; ThrowError err end end

procedure isPaused()
  is_paused <- paused;
  match is_paused with
  | True =>
  | False => err = CodeNotPaused; ThrowError err end end

procedure isNotPaused()
  is_paused <- paused;
  match is_paused with
  | True => err = CodeIsPaused; ThrowError err
  | False => end end

procedure isLister()
  current_lister <- lister;
  is_lister = builtin eq current_lister _origin;
  match is_lister with
  | True  =>
  | False => err = CodeNotLister; ThrowError err end end

procedure isBlocked( addr: ByStr20 )
  is_blocked <- exists blocked[addr];
  match is_blocked with
  | True =>
  | False => err = CodeNotBlocked; ThrowError err end end

procedure isNotBlocked( addr: ByStr20 )
  is_blocked <- exists blocked[addr];
  match is_blocked with
  | True => err = CodeIsBlocked; ThrowError err
  | False => end end

procedure isNotNull( addr: ByStr20 )
  is_null = builtin eq null_address addr;
  match is_null with
  | True => err = CodeIsNull; ThrowError err
  | False => end end

procedure isMainMinter()
  current_main_minter <- main_minter;
  is_main_minter = builtin eq current_main_minter _origin;
  match is_main_minter with
  | True  =>
  | False => err = CodeNotMainMinter; ThrowError err end end

procedure isMinter()
  is_minter <- minter_allowances[_origin];
  match is_minter with
  | Some( Some allowance )  =>
  | _ => err = CodeNotMinter; ThrowError err end end

procedure ThowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b;
  match is_self with
  | True => err = CodeSameAddress; ThrowError err
  | False => end end

procedure isSufficientFunds(
  funds: Uint128,
  amount: Uint128
  )
  sufficient_funds = uint128_ge funds amount;
  match sufficient_funds with
  | True =>
  | False => err = CodeInsufficientFunds; ThrowError err end end

procedure isSufficientAllowance(
  allowance: Uint128,
  amount: Uint128
  )
  sufficient_allowance = uint128_ge allowance amount;
  match sufficient_allowance with
  | True =>
  | False => err = CodeInsufficientAllowance; ThrowError err end end

transition UpdateAdmin( newAdmin: ByStr20 )
  isAdmin; isNotPaused; isNotNull newAdmin;
  current_admin <- admin;
  ThowIfSameAddr current_admin newAdmin; admin := newAdmin;
  e = { _eventname: "AdminUpdated";
    admin_updated: newAdmin
  }; event e end

transition UpdatePauser( newPauser: ByStr20 )
  isAdmin; isNotPaused; isNotNull newPauser;
  current_pauser <- pauser;
  ThowIfSameAddr current_pauser newPauser; pauser := newPauser;
  e = { _eventname: "PauserUpdated";
    pauser_updated: newPauser
  }; event e end

transition Pause()
  ThrowIfNotProxy; isPauser;
  isNotPaused; paused := yes;
  e = { _eventname: "SmartContractPaused";
    pauser: _origin
  }; event e end

transition Unpause()
  ThrowIfNotProxy; isPauser;
  isPaused; paused := no;
  e = { _eventname: "SmartContractUnpaused";
    pauser: _origin
  }; event e end

transition UpdateLister( newLister: ByStr20 )
  isAdmin; isNotPaused; isNotNull newLister;
  current_lister <- lister;
  ThowIfSameAddr current_lister newLister; lister:= newLister;
  e = { _eventname: "ListerUpdated";
    lister_updated: newLister
  }; event e end

transition Block( addr: ByStr20 )
  ThrowIfNotProxy; isLister;
  isNotPaused; isNotNull addr; isNotBlocked addr; blocked[addr] := one;
  e = { _eventname: "AddressBlocked";
    address: addr;
    lister: _origin
  }; event e end

transition Unblock( addr: ByStr20 )
  ThrowIfNotProxy; isLister;
  isNotPaused; isNotNull addr; isBlocked addr; delete blocked[addr];
  e = { _eventname: "AddressUnblocked";
    address: addr;
    lister: _origin
  }; event e end

transition UpdateMainMinter( newMainMinter: ByStr20 )
  isAdmin; isNotPaused; isNotNull newMainMinter;
  current_main_minter <- main_minter;
  ThowIfSameAddr current_main_minter newMainMinter; main_minter := newMainMinter;
  e = { _eventname: "MainMinterUpdated";
    main_minter_updated: newMainMinter
  }; event e end

transition IncreaseMinterAllowance(
  minter: ByStr20,
  amount: Uint128
  )
  ThrowIfNotProxy; isNotPaused; isMainMinter; isNotNull minter;
  get_minter_allowance <- minter_allowances[minter]; minter_allowance = option2_uint128_value get_minter_allowance;
  new_minter_allowance = builtin add minter_allowance amount; new_option_minter_allowance = option_uint128 new_minter_allowance;
  minter_allowances[minter] := new_option_minter_allowance;
  e = { _eventname: "MinterAllowanceIncreased";
    minter: minter;
    allowance_updated: new_minter_allowance;
    main_minter: _origin
  }; event e end

transition DecreaseMinterAllowance(
  minter: ByStr20,
  amount: Uint128
  )
  ThrowIfNotProxy; isNotPaused; isMainMinter; isNotNull minter;
  get_minter_allowance <- minter_allowances[minter]; minter_allowance = option2_uint128_value get_minter_allowance;
  new_minter_allowance = better_subtract minter_allowance amount; new_option_minter_allowance = option_uint128 new_minter_allowance;
  minter_allowances[minter] := new_option_minter_allowance;
  e = { _eventname: "MinterAllowanceDecreased";
    minter: minter;
    allowance_updated: new_option_minter_allowance;
    main_minter: _origin
  }; event e end

transition Mint(
  originator: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  ThrowIfNotProxy; isNotPaused; isMinter;
  isNotBlocked _origin; isNotBlocked originator; isNotBlocked beneficiary; isNotNull beneficiary;
  get_minter_allowance <- minter_allowances[originator]; minter_allowance = option2_uint128_value get_minter_allowance; isSufficientAllowance minter_allowance amount;
  get_account <-& proxyAddr.accounts[beneficiary]; bal = account_balance get_account;
  new_bal = builtin add bal amount;
  new_minter_allowance = better_subtract minter_allowance amount; new_option_minter_allowance = option_uint128 new_minter_allowance;
  minter_allowances[originator] := new_option_minter_allowance;
  current_supply <-& proxyAddr.total_supply;
  new_supply = builtin add current_supply amount;
  e = { _eventname: "Minted";
    minter: originator;
    amount: amount;
    beneficiary: beneficiary
  }; event e;
  msg_to_proxy = { _tag: "MintCallBack"; _recipient: _sender; _amount: zero;
    beneficiary: beneficiary;
    newBeneficiaryBal: new_bal;
    newSupply: new_supply
  };
  msg_to_minter = { _tag: "MintSuccessCallBack"; _recipient: _origin; _amount: zero;
    minter: originator;
    beneficiary: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptMint";
    _recipient: beneficiary;
    _amount: zero;
    minter: originator;
    amount: amount
  }; msgs = three_msgs msg_to_proxy msg_to_minter msg_to_beneficiary; send msgs end

transition Burn(
  originator: ByStr20,
  amount: Uint128
  )
  ThrowIfNotProxy; isNotPaused; isMinter;
  isNotBlocked _origin; isNotBlocked originator;
  get_account <-& proxyAddr.accounts[originator]; bal = account_balance get_account;
  isSufficientFunds bal amount;
  new_bal = builtin sub bal amount;
  current_supply <-& proxyAddr.total_supply;
  new_supply = builtin sub current_supply amount;
  e = { _eventname: "Burnt";
    burner: originator;
    amount: amount
  }; event e;
  msg_to_proxy = { _tag: "BurnCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    newBalance: new_bal;
    newSupply: new_supply
  };
  msg_to_minter = { _tag: "BurnSuccessCallBack"; _recipient: _origin; _amount: zero;
    minter: originator;
    amount: amount
  }; msgs = two_msgs msg_to_proxy msg_to_minter; send msgs end

transition LawEnforcementWipingBurn( addr: ByStr20 )
  ThrowIfNotProxy; isLister;
  isNotPaused; isBlocked addr; isNotBlocked _origin;
  get_account <-& proxyAddr.accounts[addr]; bal = account_balance get_account;
  current_supply <-& proxyAddr.total_supply;
  new_supply = builtin sub current_supply bal;
  e = { _eventname: "LawEnforcementWipingBurnt";
    lister: _origin;
    address: addr;
    amount: bal
  }; event e;
  msg_to_proxy = { _tag: "LawEnforcementWipingBurnCallBack"; _recipient: _sender; _amount: zero;
    addr: addr;
    newSupply : new_supply
  };
  msg_to_lister = { _tag: "LawEnforcementWipingBurnSuccessCallBack"; _recipient: _origin; _amount: zero;
    addr: addr;
    amount: bal
  }; msgs = two_msgs msg_to_proxy msg_to_lister; send msgs end

transition Transfer(
  originator: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  ThrowIfNotProxy;
  isNotPaused; isNotBlocked originator; isNotNull beneficiary; isNotBlocked beneficiary; ThowIfSameAddr originator beneficiary;
  get_originator_account <-& proxyAddr.accounts[originator]; originator_bal = account_balance get_originator_account;
  isSufficientFunds originator_bal amount;
  new_originator_bal = builtin sub originator_bal amount;
  get_beneficiary_account <-& proxyAddr.accounts[beneficiary]; beneficiary_bal = account_balance get_beneficiary_account;
  new_beneficiary_bal = builtin add beneficiary_bal amount;
  e = { _eventname: "TransferSuccess";
    originator: originator;
    beneficiary: beneficiary;
    amount: amount
  }; event e;
  msg_to_proxy = { _tag: "TransferCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    beneficiary: beneficiary;
    newOriginatorBal: new_originator_bal;
    newBeneficiaryBal: new_beneficiary_bal
  };
  msg_to_originator = { _tag: "TransferSuccessCallBack"; _recipient: originator; _amount: zero;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = {
    _tag: "RecipientAcceptTransfer";
    _recipient: beneficiary;
    _amount: zero;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  }; msgs = three_msgs msg_to_proxy msg_to_originator msg_to_beneficiary; send msgs end

transition IncreaseAllowance(
  originator: ByStr20,
  spender: ByStr20,
  amount: Uint128
  )
  ThrowIfNotProxy; isNotPaused; 
  isNotBlocked originator; isNotBlocked spender; ThowIfSameAddr originator spender;
  get_allowance <-& proxyAddr.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  new_allowance = builtin add allowance amount;
  e = { _eventname: "IncreasedAllowance";
    originator: originator;
    spender: spender;
    newAllowance : new_allowance
  }; event e;
  msg = let m = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    newAllowance: new_allowance
  } in one_msg m; send msg end

transition DecreaseAllowance(
  originator: ByStr20,
  spender: ByStr20,
  amount: Uint128
  )
  ThrowIfNotProxy; isNotPaused;
  isNotBlocked originator; isNotBlocked spender; ThowIfSameAddr originator spender;
  get_allowance <-& proxyAddr.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  new_allowance = better_subtract allowance amount;
  e = { _eventname: "DecreasedAllowance";
    originator: originator;
    spender: spender;
    newAllowance: new_allowance
  }; event e;
  msg = let m = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    newAllowance: new_allowance
  } in one_msg m; send msg end

transition TransferFrom(
  originator: ByStr20,
  spender: ByStr20,
  beneficiary: ByStr20, 
  amount: Uint128
  )
  ThrowIfNotProxy; isNotPaused; 
  isNotBlocked originator; isNotBlocked spender; isNotBlocked beneficiary; isNotNull beneficiary; ThowIfSameAddr originator beneficiary;
  get_originator_account <-& proxyAddr.accounts[originator]; originator_bal = account_balance get_originator_account;
  isSufficientFunds originator_bal amount;
  get_allowance <-& proxyAddr.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  isSufficientAllowance allowance amount;
  new_originator_bal = builtin sub originator_bal amount;
  new_allowance = builtin sub allowance amount;
  get_beneficiary_account <-& proxyAddr.accounts[beneficiary]; beneficiary_bal = account_balance get_beneficiary_account;
  new_beneficiary_bal = builtin add beneficiary_bal amount;
  e = { _eventname: "TransferFromSuccess";
    originator: originator;
    spender: spender;
    beneficiary: beneficiary;
    amount: amount
  }; event e;
  msg_to_proxy_balances = { _tag: "TransferFromCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    beneficiary: beneficiary;
    newOriginatorBal: new_originator_bal;
    newBeneficiaryBal: new_beneficiary_bal
  };
  msg_to_proxy_allowance = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    newAllowance: new_allowance
  };
  msg_to_spender = { _tag: "TransferFromSuccessCallBack"; _recipient: spender; _amount: zero;
    initiator: spender;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptTransferFrom"; _recipient: beneficiary; _amount: zero;
    initiator: spender;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  }; msgs = four_msgs msg_to_proxy_balances msg_to_proxy_allowance msg_to_spender msg_to_beneficiary; send msgs end

transition UpdateZilswap( newAddr: ByStr20 )
  isAdmin; zilswap := newAddr end

procedure UpdateDeadline( blockDeadline: Uint128 )
  current_block <- &BLOCKNUMBER;
  deadline = builtin badd current_block blockDeadline;
  deadline_block := deadline end

transition SwapZILForPSTAndDistribute(
  pstAmount: Uint128,
  originator: ByStr20,
  beneficiary: Option( List ByStr20 ),
  blockDeadline: Uint128
  )
  ThrowIfNotProxy;
  UpdateDeadline blockDeadline;
  deadline <- deadline_block; zilswap_addr <- zilswap; accept;
  msg = let m = { _tag: "SwapExactZILForTokens"; _recipient: zilswap_addr; _amount: _amount;
    token_address: proxyAddr;
    min_token_amount: pstAmount;
    deadline_block: deadline;
    recipient_address: originator
  } in one_msg m; send msg;
  msg = let m = { _tag: "SwapZILForPSTAndDistributeCallBack"; _recipient: proxyAddr; _amount: zero;
    originator: originator;
    beneficiary: beneficiary
  } in one_msg m; send msg end