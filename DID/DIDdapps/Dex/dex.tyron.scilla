(* v0.6.1
dex.tyron: DID Dex xWallet domain <> NFT Username DNS
Tyron Self-Sovereign Identity Protocol
Copyright (C) Tyron Pungtas and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

library Dex
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  type Error =
    | CodeWrongStatus
    | CodeWrongCaller
    | CodeWrongSignature
    | CodeNotValid
 
  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeWrongStatus            => Int32 -1
    | CodeWrongCaller            => Int32 -2
    | CodeWrongSignature         => Int32 -3
    | CodeNotValid               => Int32 -4
    end in { _exception: "Error"; code: result }
  
  let zero = Uint128 0
  let zeroByStr20 = 0x0000000000000000000000000000000000000000
  let zeroByStr33 = 0x000000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr64 = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  
  let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
  let option_bystr33_value = let f = @option_value ByStr33 in f zeroByStr33
  let option_bystr64_value = let f = @option_value ByStr64 in f zeroByStr64
  
  let domain = "dex"
  
  type Beneficiary =
    | NFTUsername of String
    | Recipient of ByStr20
  
  type Order =
    | Transfer of String (Option ByStr64) String Beneficiary Uint128 (Option Uint128)
    | Dex of String (Option ByStr64) String String Uint128 Uint128 Uint128 (Option Uint128)
  
  let zilswap = "zilswap"
  let true = True
  let false = False

contract DIDDex(
  init_controller: ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33,
    field deadline: Uint128,
    field xinit: ByStr20 with contract
      field implementation: ByStr20 with contract
        field services: Map String ByStr20 end,
      field dns: Map String ByStr20 end end
  )
  field didxwallet: ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33,
    field deadline: Uint128,
    field xinit: ByStr20 with contract
      field implementation: ByStr20 with contract
        field services: Map String ByStr20 end,
      field dns: Map String ByStr20 end end
    = init_controller
  
  (* A monotonically increasing number representing the amount of transactions that have taken place *)
  field tx_number: Uint128 = zero
  field services: Map String ByStr20 = Emp String ByStr20
  field paused: Bool = false

procedure SupportTyron( tyron: Option Uint128 )
  match tyron with
  | None => | Some donation =>
      xwallet <- didxwallet; init <-& xwallet.xinit;
      init_ = "init"; get_addr <-& init.dns[init_]; addr = option_bystr20_value get_addr;
      accept; msg = let m = { _tag: "AddFunds"; _recipient: addr; _amount: donation } in one_msg m; send msg end end
  
procedure ThrowError( err: Error )
  e = make_error err; throw e end

(* Verify Schnorr signature - signed data must correspond with a controller DID key *)
procedure VerifySignature(
  id: String,
  signedData: ByStr,
  signature: Option ByStr64,
  tyron: Option Uint128
  )
  xwallet <- didxwallet; get_did_key <-& xwallet.verification_methods[id];
  is_right_signature = let did_key = option_bystr33_value get_did_key in let sig = option_bystr64_value signature in
    builtin schnorr_verify did_key signedData sig;
    match is_right_signature with
    | True => SupportTyron tyron
    | False => err = CodeWrongSignature; ThrowError err end end

procedure VerifyDelegation( order: Order )
  latest_tx_number <- tx_number;
  match order with
  | Transfer txID signature id beneficiary amount tyron =>
      h3 = match beneficiary with
      | NFTUsername username => builtin sha256hash username
      | Recipient addr => builtin sha256hash addr end;
      signed_data = let h0 = builtin sha256hash txID in
        let h1 = builtin sha256hash latest_tx_number in let h2 = builtin sha256hash id in
        let h4 = builtin sha256hash amount in
        let donation = option_uint128_value tyron in let h5 = builtin sha256hash donation in
        let h0_1 = builtin concat h0 h1 in let h0_2 = builtin concat h0_1 h2 in
        let h0__3 = builtin concat h0_2 h3 in let h0__4 = builtin concat h0__3 h4 in
        let h0__5 = builtin concat h0__4 h5 in
        builtin to_bystr h0__5;
        VerifySignature domain signed_data signature tyron
  | Dex txID signature addrID toAddrID amount minAmount1 minAmount2 tyron =>
      signed_data = let h0 = builtin sha256hash txID in
        let h1 = builtin sha256hash latest_tx_number in let h2 = builtin sha256hash addrID in
        let h3 = builtin sha256hash toAddrID in let h4 = builtin sha256hash amount in
        let h5 = builtin sha256hash minAmount1 in let h6 = builtin sha256hash minAmount2 in
        let donation = option_uint128_value tyron in let h7 = builtin sha256hash donation in
        let h0_1 = builtin concat h0 h1 in let h0_2 = builtin concat h0_1 h2 in
        let h0__3 = builtin concat h0_2 h3 in let h0__4 = builtin concat h0__3 h4 in
        let h0__5 = builtin concat h0__4 h5 in let h0__6 = builtin concat h0__5 h6 in
        let h0__7 = builtin concat h0__6 h7 in
        builtin to_bystr h0__7;
        VerifySignature domain signed_data signature tyron end end

procedure Timestamp()
  latest_tx_number <- tx_number; new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor;
  tx_number := new_tx_number end

procedure IsNotPaused()
  is_paused <- paused; match is_paused with
  | False => | True => err = CodeWrongStatus; ThrowError err end end
  
procedure IsPaused()
  is_paused <- paused; match is_paused with
  | True => | False => err = CodeWrongStatus; ThrowError err end end
  
procedure VerifyController()
  xwallet <- didxwallet; controller <-& xwallet.controller;
  verified = builtin eq _sender controller; match verified with
  | True => | False => err = CodeWrongCaller; ThrowError err end end

transition UpdateController(
  addr: ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33,
    field deadline: Uint128,
    field xinit: ByStr20 with contract
      field implementation: ByStr20 with contract
        field services: Map String ByStr20 end,
      field dns: Map String ByStr20 end end
  )
  IsNotPaused; VerifyController;
  didxwallet := addr; Timestamp end
  
transition Pause()
  VerifyController;
  IsNotPaused; paused := true;
  e = { _eventname: "SmartContractPaused";
    pauser: _origin }; event e end

transition Unpause()
  VerifyController;
  IsPaused; paused := false;
  e = { _eventname: "SmartContractUnpaused";
    pauser: _origin }; event e end

(* Receive $ZIL native funds *)
transition AddFunds()
  IsNotPaused; accept; Timestamp end

(* Send $ZIL to any recipient that implements the tag, e.g. "AddFunds", "", etc. *)
transition SendFunds(
  signature: Option ByStr64,
  tag: String,
  beneficiary: Beneficiary,
  tyron: Option Uint128
  )
  IsNotPaused; txID = "SendFunds";
  order = Transfer txID signature tag beneficiary _amount tyron; VerifyDelegation order;
  match beneficiary with
  | NFTUsername username =>
      xwallet <- didxwallet; init <-& xwallet.xinit;
      get_addr <-& init.dns[username]; addr = option_bystr20_value get_addr;
      accept; msg = let m = { _tag: tag; _recipient: addr; _amount: _amount } in one_msg m; send msg
  | Recipient addr =>
      accept; msg = let m = { _tag: tag; _recipient: addr; _amount: _amount } in one_msg m; send msg end; Timestamp end

procedure FetchServiceAddr( id: String )
  xwallet <- didxwallet; init <-& xwallet.xinit; init_did <-& init.implementation;
  get_service <-& init_did.services[id]; addr = option_bystr20_value get_service; services[id] := addr end
  
transition Transfer(
  signature: Option ByStr64,
  addrID: String,
  beneficiary: Beneficiary,
  amount: Uint128,
  tyron: Option Uint128
  ) 
  IsNotPaused; txID = "Transfer";
  order = Transfer txID signature addrID beneficiary amount tyron; VerifyDelegation order;
  FetchServiceAddr addrID; get_token_addr <- services[addrID]; token_addr = option_bystr20_value get_token_addr;
  match beneficiary with
  | NFTUsername username =>
      xwallet <- didxwallet; init <-& xwallet.xinit;
      get_addr <-& init.dns[username]; addr = option_bystr20_value get_addr;
      accept; msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
        to: addr;
        amount: amount } in one_msg m ; send msg
  | Recipient addr =>
      accept; msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
        to: addr;
        amount: amount } in one_msg m ; send msg end; Timestamp end

transition RecipientAcceptTransfer( sender: ByStr20, recipient: ByStr20, amount: Uint128 ) IsNotPaused end

transition RecipientAcceptTransferFrom( initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128 ) IsNotPaused end

transition TransferSuccessCallBack( sender: ByStr20, recipient: ByStr20, amount : Uint128 ) IsNotPaused end

transition TransferFromSuccessCallBack( initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128 ) IsNotPaused end

procedure IncreaseAllowance(
  addrID: String,
  amount: Uint128
  )
  FetchServiceAddr addrID; get_addr <- services[addrID]; addr = option_bystr20_value get_addr;
  FetchServiceAddr zilswap; get_zilswap <- services[zilswap]; zilswap_addr = option_bystr20_value get_zilswap;
  msg = let m = { _tag: "IncreaseAllowance"; _recipient: addr; _amount: zero;
    spender: zilswap_addr;
    amount: amount } in one_msg m ; send msg end

transition AddLiquidity(
  signature: Option ByStr64,
  addrID: String,
  amount: Uint128,
  tyron: Option Uint128
  )
  IsNotPaused; txID = "AddLiquidity";
  order = Dex txID signature addrID addrID amount amount amount tyron; VerifyDelegation order;
  IncreaseAllowance addrID amount;
  get_zilswap <- services[zilswap]; zilswap_addr = option_bystr20_value get_zilswap;
  get_addr <- services[addrID]; addr = option_bystr20_value get_addr;
  xwallet <- didxwallet; current_block <- &BLOCKNUMBER;
  deadline <-& xwallet.deadline; this_deadline = builtin badd current_block deadline;
  accept; msg = let m = { _tag: "AddLiquidity"; _recipient: zilswap_addr; _amount: _amount;
    token_address: addr;
    min_contribution_amount: amount;
    max_token_amount: amount;
    deadline_block: this_deadline } in one_msg m ; send msg end

transition RemoveLiquidity(
  signature: Option ByStr64,
  addrID: String,
  amount: Uint128,
  minZilAmount: Uint128,
  minTokenAmount: Uint128,
  tyron: Option Uint128
  )
  IsNotPaused; txID = "RemoveLiquidity";
  order = Dex txID signature addrID addrID amount minZilAmount minTokenAmount tyron; VerifyDelegation order; 
  xwallet <- didxwallet; current_block <- &BLOCKNUMBER;
  FetchServiceAddr zilswap; get_zilswap <- services[zilswap]; zilswap_addr = option_bystr20_value get_zilswap;
  FetchServiceAddr addrID; get_addr <- services[addrID]; addr = option_bystr20_value get_addr;
  deadline <-& xwallet.deadline; this_deadline = builtin badd current_block deadline;
  accept; msg = let m = { _tag: "RemoveLiquidity"; _recipient: zilswap_addr; _amount: zero;
    token_address: addr;
    contribution_amount: amount;
    min_zil_amount: minZilAmount;
    min_token_amount: minTokenAmount;
    deadline_block: this_deadline } in one_msg m ; send msg end

transition SwapExactZILForTokens(
  signature: Option ByStr64,
  addrID: String,
  amount: Uint128,
  minTokenAmount: Uint128,
  tyron: Option Uint128
  )
  IsNotPaused; txID = "SwapExactZILForTokens";
  order = Dex txID signature addrID addrID amount minTokenAmount minTokenAmount tyron; VerifyDelegation order;
  FetchServiceAddr zilswap; get_zilswap <- services[zilswap]; zilswap_addr = option_bystr20_value get_zilswap;
  FetchServiceAddr addrID; get_addr <- services[addrID]; addr = option_bystr20_value get_addr;
  xwallet <- didxwallet; current_block <- &BLOCKNUMBER;
  deadline <-& xwallet.deadline; this_deadline = builtin badd current_block deadline;
  accept; msg = let m = { _tag: "SwapExactZILForTokens"; _recipient: zilswap_addr; _amount: amount;
    token_address: addr;
    min_token_amount: minTokenAmount;
    deadline_block: this_deadline;
    recipient_address: _this_address } in one_msg m; send msg end

transition SwapExactTokensForZIL(
  signature: Option ByStr64,
  addrID: String,
  amount: Uint128,
  minZilAmount: Uint128,
  tyron: Option Uint128
  )
  IsNotPaused; txID = "SwapExactTokensForZIL";
  order = Dex txID signature addrID addrID amount minZilAmount minZilAmount tyron; VerifyDelegation order;
  IncreaseAllowance addrID amount;
  get_zilswap <- services[zilswap]; zilswap_addr = option_bystr20_value get_zilswap;
  get_addr <- services[addrID]; addr = option_bystr20_value get_addr;
  xwallet <- didxwallet; current_block <- &BLOCKNUMBER;
  deadline <-& xwallet.deadline; this_deadline = builtin badd current_block deadline;
  accept; msg = let m = { _tag: "SwapExactTokensForZIL"; _recipient: zilswap_addr; _amount: zero;
    token_address: addr;
    token_amount: amount;
    min_zil_amount: minZilAmount;
    deadline_block: this_deadline;
    recipient_address: _this_address } in one_msg m ; send msg end
    
transition SwapExactTokensForTokens(
  signature: Option ByStr64,
  addrID: String,
  toAddrID: String,
  amount: Uint128,
  minTokenAmount: Uint128,
  tyron: Option Uint128
  )
  IsNotPaused; txID = "SwapExactTokensForTokens";
  order = Dex txID signature addrID toAddrID amount minTokenAmount minTokenAmount tyron; VerifyDelegation order;
  IncreaseAllowance addrID amount;
  get_zilswap <- services[zilswap]; zilswap_addr = option_bystr20_value get_zilswap;
  get_addr <- services[addrID]; addr = option_bystr20_value get_addr;
  FetchServiceAddr toAddrID; get_toAddr <- services[toAddrID]; toAddr = option_bystr20_value get_toAddr;
  xwallet <- didxwallet; current_block <- &BLOCKNUMBER;
  deadline <-& xwallet.deadline; this_deadline = builtin badd current_block deadline;
  accept; msg = let m = {
    _tag: "SwapExactTokensForTokens"; _recipient: zilswap_addr; _amount: zero;
    token0_address: addr;
    token1_address: toAddr;
    token0_amount: amount;
    min_token1_amount: minTokenAmount;
    deadline_block: this_deadline;
    recipient_address: _this_address } in one_msg m ; send msg end