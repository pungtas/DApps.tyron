(* v2.0.0
did.tyron: W3C decentralized identifier smart contract
Tyron Self-Sovereign Identity Protocol
Copyright (C) Tyron Pungtas and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

import PairUtils BoolUtils

library DID

  type DIDstatus =
    | Deployed
    | Created
    | Updated
    | Recovered
    | Deactivated
    | Locked

  type Operation =
    | Recovery
    | Update
  
  type Action =
    | Add
    | Remove

  type TransferProtocol =
    | Https
    | Git

  type Endpoint =
    | Address of ByStr20
    | Uri of String TransferProtocol String   (* type, transfer protocol & uri *)

  type Document =
    | VerificationMethod of Action String ByStr33  (* string: key purpose OR service ID *)
    | Service of Action String Endpoint
  
  type Recoverer =
    | First
    | Second

  let didRecovery = Recovery
  let didUpdate = Update
  let update = "update"
  let recovery = "recovery"
  let didsr = "socialrecovery"
  let actionAdd = "add"
  let actionRemove = "remove"
  let empty_methods = Emp String ByStr33
  let empty_services = Emp String ByStr20
  let empty_services_ = Emp String Endpoint
  
  let one_msg = fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  type Error =
    | CodeWrongStatus
    | CodeNotAdmin
    | CodeWrongCaller
    | CodeWrongSignature
    | CodeUndefinedKey
    | CodeSameKey
    | CodeSameId
    | CodeNotValid
    | CodeDidLocked
 
  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeWrongStatus            => Int32 -1
    | CodeNotAdmin               => Int32 -2
    | CodeWrongCaller            => Int32 -3
    | CodeWrongSignature         => Int32 -4
    | CodeUndefinedKey           => Int32 -5
    | CodeSameKey                => Int32 -6
    | CodeSameId                 => Int32 -8
    | CodeNotValid               => Int32 -9
    | CodeDidLocked              => Int32 -10
    end in { _exception: "Error"; code: result }
  
  let zero = Uint128 0
  let zeroByStr20 = 0x0000000000000000000000000000000000000000
  let zeroByStr33 = 0x000000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr64 = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  let zero_bystr = builtin to_bystr zeroByStr20

  let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
  let option_bystr33_value = let f = @option_value ByStr33 in f zeroByStr33
  let option_bystr64_value = let f = @option_value ByStr64 in f zeroByStr64
  
contract DID( init_admin: ByStr20 )
  field admin_: ByStr20 = init_admin
  field did_: String = ""    (* the W3C decentralized identifier *)
  field did_status_: DIDstatus = Deployed
  
  (* Verification methods @key: key purpose @value: public key of type "SchnorrSecp256k1VerificationKey2019" *)
  field verification_methods_: Map String ByStr33 = empty_methods
  
  (* Services @key: ID @value: endpoint *)
  field services_: Map String ByStr20 = empty_services
  field services__: Map String Endpoint = empty_services_
  
  field document_hash: ByStr = zero_bystr
  
  field social_recovery_: Option( Pair ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end )
    = None{( Pair ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end )}
  
  (* The block number when the DID Create operation occurred *)
  field did_created_: BNum = BNum 0
  
  (* The block number when the last DID CRUD operation occurred *)  
  field ledger_time_: BNum = BNum 0
  
  (* A monotonically increasing number representing the amount of DID CRUD transactions that have taken place *)
  field crud_tx_number_: Uint128 = zero

procedure ThrowError( err: Error )
  e = make_error err; throw e end

procedure IsOperational()
  did_status <- did_status_;
  match did_status with
  | Deactivated => err = CodeWrongStatus; ThrowError err
  | Locked => err = CodeDidLocked; ThrowError err
  | _ => end end

procedure VerifyAdmin()
  current_admin <- admin_;
  verified = builtin eq current_admin _sender;
  match verified with
  | True =>
  | False => err= CodeNotAdmin; ThrowError err end end

transition UpdateAdmin( addr: ByStr20 )
  IsOperational; VerifyAdmin; admin_ := addr end

transition EnableSocialRecovery(
  addr1: ByStr20 with contract field verification_methods_: Map String ByStr33 end,
  addr2: ByStr20 with contract field verification_methods_: Map String ByStr33 end
  )
  IsOperational; VerifyAdmin;
  recoverers = let sr = Pair{ ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end } addr1 addr2 in
    Some{( Pair ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end )} sr;
  social_recovery_ := recoverers end

transition UpdateSocialRecoverer(
  recoverer: Recoverer,
  addr: ByStr20 with contract field verification_methods_: Map String ByStr33 end
  )
  IsOperational; VerifyAdmin;
  social_recovery <- social_recovery_;
  match social_recovery with
  | Some recoverers =>
      match recoverer with
      | First =>
          sr2addr = let snd_element = @snd ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end in snd_element recoverers;
          updated_sr = let sr = Pair{ ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end } addr sr2addr in
            Some{( Pair ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end )} sr;
          social_recovery_ := updated_sr
      | Second =>
          sr1addr = let fst_element = @fst ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end in fst_element recoverers;
          updated_sr = let sr = Pair{ ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end } sr1addr addr in
            Some{( Pair ByStr20 with contract field verification_methods_: Map String ByStr33 end ByStr20 with contract field verification_methods_: Map String ByStr33 end )} sr;
          social_recovery_ := updated_sr end
  | None => err = CodeNotValid; ThrowError err end end
  
transition Lock()
  IsOperational; VerifyAdmin;
  social_recovery <- social_recovery_;
  match social_recovery with
  | Some recoverers =>
  | None => err = CodeNotValid; ThrowError err end;
  locked = Locked; did_status_ := locked end
  
transition SocialRecovery( 
  addr: ByStr20 with contract field verification_methods_: Map String ByStr33 end,
  signature1: ByStr64,
  signature2: ByStr64
  )
  did_status <- did_status_;
  match did_status with
  | Deactivated => err = CodeWrongStatus; ThrowError err
  | _ => end;
  signed_data = builtin to_bystr addr;
  social_recovery <- social_recovery_;
  match social_recovery with
  | Some recoverers =>
      recoverer1addr = let fst_element = @fst
        ByStr20 with contract field verification_methods_: Map String ByStr33 end
        ByStr20 with contract field verification_methods_: Map String ByStr33 end
      in fst_element recoverers;
      recoverer2addr = let snd_element = @snd
        ByStr20 with contract field verification_methods_: Map String ByStr33 end
        ByStr20 with contract field verification_methods_: Map String ByStr33 end
      in snd_element recoverers;
      is_recoverer = let is_recoverer1 = builtin eq recoverer1addr _sender in let is_recoverer2 = builtin eq recoverer2addr _sender in orb is_recoverer1 is_recoverer2;
      match is_recoverer with
      | True =>
      | False => err = CodeWrongCaller; ThrowError err end;
      get_recoverer1key <-& recoverer1addr.verification_methods_[didsr]; did_sr1key = option_bystr33_value get_recoverer1key;
      is_right_signature1 = builtin schnorr_verify did_sr1key signed_data signature1;
      match is_right_signature1 with
      | True =>
          get_recoverer2key <-& recoverer2addr.verification_methods_[didsr]; did_sr2key = option_bystr33_value get_recoverer2key;
          is_right_signature2 = builtin schnorr_verify did_sr2key signed_data signature2;
          match is_right_signature2 with
          | True =>
          | False => err = CodeWrongSignature; ThrowError err end
      | False => err = CodeWrongSignature; ThrowError err end
  | None => err = CodeWrongStatus; ThrowError err end;
  admin_ := addr end

(* Verify Schnorr signature - signed data must correspond with a DID Key *)
procedure VerifySignature(
  id: String,
  signedData: ByStr,
  signature: ByStr64
  )
  get_did_key <- verification_methods_[id];
  is_right_signature = let did_key = option_bystr33_value get_did_key in builtin schnorr_verify did_key signedData signature;
  match is_right_signature with
    | True =>
    | False => err = CodeWrongSignature; ThrowError err end end

procedure ThrowIfNoKey( optKey: Option ByStr33 )
  match optKey with
  | Some key =>
  | None => err = CodeUndefinedKey; ThrowError err end end

procedure ThrowIfSameKey(
  key: ByStr33,
  sndKey: ByStr33
  )
  is_same_key = builtin eq key sndKey;
  match is_same_key with
  | True => err= CodeSameKey; ThrowError err
  | False => end end

procedure VerifyDIDkeys(
  operation: Operation,
  didRecovery: ByStr33,
  didUpdate: ByStr33
  )
  get_update_key <- verification_methods_[update]; new_update = option_bystr33_value get_update_key;
  match operation with
  | Recovery =>
      get_recovery_key <- verification_methods_[recovery]; new_recovery = option_bystr33_value get_recovery_key;
      ThrowIfSameKey new_recovery new_update;
      ThrowIfSameKey new_recovery didRecovery; ThrowIfSameKey new_recovery didUpdate; ThrowIfSameKey new_update didRecovery; ThrowIfSameKey new_update didUpdate
  | Update => ThrowIfSameKey new_update didUpdate; ThrowIfSameKey new_update didRecovery end end

procedure Timestamp()
  current_block <- &BLOCKNUMBER; ledger_time_ := current_block;
  latest_tx_number <- crud_tx_number_;
  new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor; crud_tx_number_ := new_tx_number end

procedure SaveDocument( document: Document )
  match document with
  | VerificationMethod action purpose key =>
      match action with
      | Add => verification_methods_[purpose] := key
      | Remove => err = CodeNotValid; ThrowError err end
  | Service action id endpoint =>
      match action with
      | Add =>
          match endpoint with
          | Address addr => services_[id] := addr
          | Uri eType protocol uri => services__[id] := endpoint end
      | Remove => err = CodeNotValid; ThrowError err end end end

transition DidCreate(
  document: List Document,
  signature: Option ByStr64
  )
  did_status <- did_status_;
  match did_status with
  | Deployed =>
    VerifyAdmin;
    new_did = let did_prefix = "did:tyron:zil:main:" in let did_suffix = builtin to_string _this_address in
      builtin concat did_prefix did_suffix; did_ := new_did;
    forall document SaveDocument;
    get_recovery_key <- verification_methods_[recovery]; ThrowIfNoKey get_recovery_key; did_recovery = option_bystr33_value get_recovery_key;
    get_update_key <- verification_methods_[update]; ThrowIfNoKey get_update_key; did_update = option_bystr33_value get_update_key;
    ThrowIfSameKey did_recovery did_update;
    new_status = Created; did_status_ := new_status;
    current_block <- &BLOCKNUMBER; did_created_ := current_block; Timestamp
  | _ => err = CodeWrongStatus; ThrowError err end end

procedure UpdateDocument( document: Document )
  match document with
  | VerificationMethod action purpose key =>
      key_exists <- exists verification_methods_[purpose];
      match action with
      | Add =>
          match key_exists with
          | True =>
              is_update = builtin eq purpose update;
              match is_update with
              | True => verification_methods_[update] := key
              | False => err = CodeSameId; ThrowError err end
          | False => verification_methods_[purpose] := key end
      | Remove =>
          match key_exists with
          | True => delete verification_methods_[purpose]
          | False => err = CodeNotValid; ThrowError err end end
  | Service action id endpoint =>
      is_service_ <- exists services_[id];
      is_service__ <- exists services__[id];
      service_exists = orb is_service_ is_service__;
      match action with
      | Add =>
          match service_exists with
          | True => err = CodeSameId; ThrowError err
          | False => 
              match endpoint with
              | Address addr => services_[id] := addr
              | Uri eType protocol uri => services__[id] := endpoint end end
      | Remove =>
          match service_exists with
          | True => delete services_[id]; delete services__[id]
          | False => err = CodeNotValid; ThrowError err end end end end

procedure ValidateDocument(
  operation: Operation,
  document: List Document
  )
  match operation with
  | Recovery => 
      verification_methods_ := empty_methods; services_ := empty_services; services__ := empty_services_;
      forall document SaveDocument
  | Update => forall document UpdateDocument end end

procedure HashDocument( document: Document )
  doc_hash <- document_hash;
  match document with
  | VerificationMethod action purpose key =>
      match action with
      | Add =>
          hash = let h1 = builtin sha256hash actionAdd in
            let h2 = builtin sha256hash purpose in
            let h3 = builtin sha256hash key in
            let h1_2 = builtin concat h1 h2 in
            builtin concat h1_2 h3;
          doc_hash_ = let hash_ = builtin to_bystr hash in builtin concat doc_hash hash_;
          document_hash := doc_hash_
      | Remove =>
          hash = let h1 = builtin sha256hash actionRemove in
            let h2 = builtin sha256hash purpose in
            builtin concat h1 h2;
          doc_hash_ = let hash_ = builtin to_bystr hash in builtin concat doc_hash hash_;
          document_hash := doc_hash_ end
  | Service action id endpoint =>
      match action with
      | Add =>
          match endpoint with
          | Uri eType transfer uri =>
              hash = let h1 = builtin sha256hash actionAdd in
                let h2 = builtin sha256hash id in
                let h3 = builtin sha256hash uri in
                let h1_2 = builtin concat h1 h2 in
                builtin concat h1_2 h3;
              doc_hash_ = let hash_ = builtin to_bystr hash in builtin concat doc_hash hash_;
              document_hash := doc_hash_
          | Address addr =>
              hash = let h1 = builtin sha256hash actionAdd in
                let h2 = builtin sha256hash id in
                let h3 = builtin sha256hash addr in
                let h1_2 = builtin concat h1 h2 in
                builtin concat h1_2 h3;
              doc_hash_ = let hash_ = builtin to_bystr hash in builtin concat doc_hash hash_;
              document_hash := doc_hash_ end
      | Remove =>
          hash = let h1 = builtin sha256hash actionRemove in
            let h2 = builtin sha256hash id in
            builtin concat h1 h2;
          doc_hash_ = let hash_ = builtin to_bystr hash in builtin concat doc_hash hash_;
          document_hash := doc_hash_ end end end

procedure VerifyDocument(
  operation: Operation,
  document: List Document,
  signature: Option ByStr64
  )
  document_hash := zero_bystr;
  forall document HashDocument;
  doc_hash <- document_hash;
  sig = option_bystr64_value signature;
  id = match operation with
  | Recovery => recovery
  | Update => update end;
  VerifySignature id doc_hash sig;
  ValidateDocument operation document end

transition DidRecover(
  document: List Document,
  signature: Option ByStr64
  )
  did_status <- did_status_;
  match did_status with
  | Created => | Recovered => | Updated =>
  | _ => err = CodeWrongStatus; ThrowError err end;
  VerifyAdmin;
  get_recovery_key <- verification_methods_[recovery]; did_recovery = option_bystr33_value get_recovery_key;
  get_update_key <- verification_methods_[update]; did_update = option_bystr33_value get_update_key;
  VerifyDocument didRecovery document signature;
  VerifyDIDkeys didRecovery did_recovery did_update;
  new_status = Recovered; did_status_ := new_status; Timestamp end

transition DidUpdate(
  document: List Document,
  signature: Option ByStr64
  )
  did_status <- did_status_;
  match did_status with
  | Created => | Recovered => | Updated =>
  | _ => err = CodeWrongStatus; ThrowError err end;
  VerifyAdmin;
  get_recovery_key <- verification_methods_[recovery]; did_recovery = option_bystr33_value get_recovery_key;
  get_update_key <- verification_methods_[update]; did_update = option_bystr33_value get_update_key;
  VerifyDocument didUpdate document signature;
  VerifyDIDkeys didUpdate did_recovery did_update;
  new_status = Updated; did_status_ := new_status; Timestamp end

transition DidDeactivate(
  document: List Document,
  signature: Option ByStr64
  ) 
  did_status <- did_status_;
  match did_status with
  | Created => | Recovered => | Updated =>
  | _ => err = CodeWrongStatus; ThrowError err end;
  VerifyAdmin;
  VerifyDocument didRecovery document signature;
  verification_methods_ := empty_methods; services_ := empty_services; services__ := empty_services_;
  new_status = Deactivated; did_status_ := new_status; Timestamp end