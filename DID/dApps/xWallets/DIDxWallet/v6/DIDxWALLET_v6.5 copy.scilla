(* v6.5
DIDxWALLET: W3C Decentralized Identifier Smart Contract Wallet
Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2023. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0
import PairUtils BoolUtils ListUtils IntUtils

library DIDxWALLET
  type DidStatus =
    | Created
    | Recovered
    | Updated
    | Deactivated
    | Locked

  type Action =
    | Add
    | Remove

  type TransferProtocol =
    | Https
    | Git
  
  type BlockchainType =
    | Zilliqa of ByStr20
    | Other of String

  type Endpoint =
    | Address of BlockchainType
    | Uri of String TransferProtocol String   (* type, transfer protocol & uri *)
 
  type Document =
    | VerificationMethod of Action String ByStr33 String (* add/remove, key purpose, public key & encrypted private key *)
    | Service of Action String Endpoint (* add/remove, service ID & service *) 
  
  let did = "did"
  let update = "update"
  let recovery = "socialrecovery"
  let actionAdd = "add"
  let actionRemove = "remove"
  let free = "free"
  let zil = "zil"
  let empty_string = ""
  let empty_methods = Emp String ByStr33
  let empty_map = Emp String String
  let empty_services = Emp String ByStr20
  let empty_services_ = Emp String Endpoint
  let empty_domains = Emp String ByStr20
  let empty_guardians = Emp ByStr32 Bool

  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg
  
  let zero = Uint128 0
  let zeroByStr20 = 0x0000000000000000000000000000000000000000
  let zeroByStr32 = 0x0000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr33 = 0x000000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr64 = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr = builtin to_bystr zeroByStr20
  let zero_ = Uint32 0
  let one = Uint32 1
  let two = Uint32 2
  let three = Uint32 3

  let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
  let option_bystr33_value = let f = @option_value ByStr33 in f zeroByStr33
  let option_bystr64_value = let f = @option_value ByStr64 in f zeroByStr64

  type Beneficiary =
    | NftUsername of String String (* NFT Domain Name & Subdomain *)
    | Recipient of ByStr20

contract DIDxWALLET(
  init_controller: ByStr20,
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20,
      field verification_methods: Map String ByStr33,
      field services: Map String ByStr20,
      field did_domain_dns: Map String ByStr20 end end end,
  did_methods: Map String ByStr33,
  did_dkms: Map String String
  )
    with
    (* init_controller must not be the zero address *)
    let is_controller_invalid = builtin eq init_controller zeroByStr20 in
    negb is_controller_invalid
  =>
  field did: String = let did_prefix = "did:tyron:zil:main:" in let did_suffix = builtin to_string _this_address in
    builtin concat did_prefix did_suffix   (* the tyronZIL W3C Decentralized Identifier *)
  field controller: ByStr20 = init_controller
  field pending_controller: ByStr20 = zeroByStr20
  field did_status: DidStatus = Created
  field version: String = "DIDxWALLET_6.5.0" (* @xalkan *)
  
  (* Verification methods @key: key purpose @value: public DID key *)
  field verification_methods: Map String ByStr33 = did_methods
  field dkms: Map String String = did_dkms
  
  (* Services @key: ID @value: endpoint *)
  field services: Map String ByStr20 = empty_services
  field services_: Map String Endpoint = empty_services_
  
  field did_hash: ByStr = zeroByStr
  
  (* The block number when the last transaction occurred @todo add to all txn *)
  field ledger_time: BNum = BNum 0
  
  (* A monotonically increasing number representing the amount of transactions that have taken place *)
  field tx_number: Uint128 = zero
  
  field social_guardians: Map ByStr32 Bool = empty_guardians
  (* The amount of guardians *)
  field gcounter: Uint32 = zero_
  field signed_addr: ByStr = zeroByStr
  
  field did_domain_dns: Map String ByStr20 = let emp = Emp String ByStr20 in
    builtin put emp did _this_address
  field nft_dns: Map String String = Emp String String
  field nft_username: String = empty_string
  field deadline: Uint128 = zero
  field batch_beneficiary: ByStr20 = zeroByStr20

procedure SupportTyron( tyron: Option Uint128 )
  match tyron with
  | None => | Some donation =>
    current_init <-& init.dApp;
    donateDomain = "donate"; get_addr <-& current_init.dns[donateDomain]; addr = option_bystr20_value get_addr;
    accept; msg = let m = { _tag: "AddFunds"; _recipient: addr; _amount: donation } in one_msg m; send msg end end

procedure IsOperational()
  current_status <- did_status; match current_status with
    | Deactivated => e = { _exception: "DIDxWALLET-WrongStatus" }; throw e
    | Locked => e = { _exception: "DIDxWALLET-DidLocked" }; throw e
    | _ => end end

procedure VerifyController( tyron: Option Uint128 )
  current_controller <- controller;
  verified = builtin eq _origin current_controller; match verified with
    | True => SupportTyron tyron
    | False => e = { _exception: "DIDxWALLET-WrongCaller" }; throw e end end

procedure Timestamp()
  current_block <- &BLOCKNUMBER; ledger_time := current_block;
  latest_tx_number <- tx_number; new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor;
  tx_number := new_tx_number end

procedure ThrowIfNullAddr( addr: ByStr20 )
  is_null = builtin eq addr zeroByStr20; match is_null with
    | False => | True => e = { _exception: "DIDxWALLET-NullAddress" }; throw e end end

procedure ThrowIfNullString( input: String )
  is_null = builtin eq input empty_string; match is_null with
    | False => | True => e = { _exception: "DIDxWALLET-NullString" }; throw e end end

procedure ThrowIfNullHash( input: ByStr32 )
  is_null = builtin eq input zeroByStr32; match is_null with
    | False => | True => e = { _exception: "DIDxWALLET-NullHash" }; throw e end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  ThrowIfNullAddr a;
  is_self = builtin eq a b; match is_self with
    | False => | True => e = { _exception: "DIDxWALLET-SameAddress" }; throw e end end

procedure ThrowIfSameDomain(
  a: String,
  b: String
  )
  is_same = builtin eq a b; match is_same with
    | False => | True => e = { _exception: "DIDxWALLET-SameUsername" }; throw e end end

transition UpdateController(
  addr: ByStr20,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  current_controller <- controller; ThrowIfSameAddr addr current_controller;
  pending_controller := addr;
  Timestamp end

transition AcceptPendingController()
  IsOperational; current_pending <- pending_controller;
  verified = builtin eq _origin current_pending; match verified with
    | True => | False => e = { _exception: "DIDxWALLET-WrongCaller" }; throw e end;
  controller := current_pending; pending_controller := zeroByStr20;
  Timestamp end

(* Verify Schnorr signature - signed data must correspond with a DID key *)
procedure VerifySignature(
  id: String,
  signedData: ByStr,
  signature: ByStr64
  )
  get_did_key <- verification_methods[id]; did_key = option_bystr33_value get_did_key;
  is_right_signature = builtin schnorr_verify did_key signedData signature; match is_right_signature with
    | True => | False => e = { _exception: "DIDxWALLET-WrongSignature" }; throw e end end

procedure SaveGuardians( id: ByStr32 )
  repeated <- exists social_guardians[id]; match repeated with
    | True => e = { _exception: "DIDxWALLET-SameGuardianId" }; throw e
    | False =>
      current_init <-& init.dApp; domain = builtin to_string id;
      get_did <-& current_init.did_dns[domain]; match get_did with
        | Some did_ => | None => e = { _exception: "DIDxWALLET-DidIsNull" }; throw e end;
      counter <- gcounter; add_ = builtin add counter one; gcounter := add_;
      true = True; social_guardians[id] := true end end

transition AddGuardians(
  guardians: List ByStr32,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron; current_counter <- gcounter;
  is_set = uint32_ge current_counter three; match is_set with
    | True => (* enable individual addition *)
    | False => 
      length = let list_length = @list_length ByStr32 in list_length guardians;
      is_ok = uint32_ge length three; match is_ok with
        | True => | False => e = { _exception: "DIDxWALLET-InsufficientAmount" }; throw e end end;
  forall guardians SaveGuardians; counter <- gcounter;
  is_ok = uint32_ge counter three; match is_ok with
    | True => | False => e = { _exception: "DIDxWALLET-InsufficientAmountOfGuardians" }; throw e end;
  Timestamp end

procedure RemoveGuardian( id: ByStr32 )
  is_guardian <- exists social_guardians[id]; match is_guardian with
    | True =>
        counter <- gcounter; sub_ = builtin sub counter one; gcounter := sub_;
        delete social_guardians[id]
    | False => e = { _exception: "DIDxWALLET-RemoveNoGuardian" }; throw e end end

transition RemoveGuardians(
  guardians: List ByStr32,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  forall guardians RemoveGuardian;
  counter <- gcounter;
  is_ok = uint32_ge counter three; match is_ok with
    | True => | False => e = { _exception: "DIDxWALLET-InsufficientAmountOfGuardians" }; throw e end;
  Timestamp end

transition Lock(
  sig: ByStr64,
  tyron: Option Uint128
  )
  IsOperational; counter <- gcounter;
  is_ok = uint32_ge counter three; match is_ok with
    | True => | False => e = { _exception: "DIDxWALLET-InsufficientAmountOfGuardians" }; throw e end;
  this_did <- did; hash = let h = builtin sha256hash this_did in builtin to_bystr h;
  get_didkey <- verification_methods[recovery]; did_key = option_bystr33_value get_didkey;
  is_right_signature = builtin schnorr_verify did_key hash sig; match is_right_signature with
    | False => e = { _exception: "DIDxWALLET-WrongSignature" }; throw e
    | True => SupportTyron tyron; locked = Locked; did_status := locked end;
  Timestamp end

procedure VerifySocialRecovery( proof: Pair ByStr32 ByStr64 )
  guardian_id = let fst_element = @fst ByStr32 ByStr64 in fst_element proof;
  guardian_sig = let snd_element = @snd ByStr32 ByStr64 in snd_element proof;
  is_valid <- exists social_guardians[guardian_id]; match is_valid with
    | False => e = { _exception: "DIDxWALLET-WrongCaller" }; throw e
    | True =>
      current_init <-& init.dApp; domain = builtin to_string guardian_id;
      get_did <-& current_init.did_dns[domain]; match get_did with
        | None => e = { _exception: "DIDxWALLET-DidIsNull" }; throw e
        | Some did_ =>
          get_did_key <-& did_.verification_methods[recovery]; did_key = option_bystr33_value get_did_key; signed_data <- signed_addr;
          is_right_signature = builtin schnorr_verify did_key signed_data guardian_sig; match is_right_signature with
            | False => | True => counter <- gcounter; add_ = builtin add counter one; gcounter := add_ end end end end

(* To reset the Zilliqa or/and Arweave external wallets *)
transition DidSocialRecovery( 
  addr: ByStr20,
  signatures: List( Pair ByStr32 ByStr64 ),
  tyron: Option Uint128
  )
  ThrowIfNullAddr addr;
  current_status <- did_status; match current_status with
    | Deactivated => e = { _exception: "DIDxWALLET-WrongStatus" }; throw e | _ => end;
  signed_data = builtin to_bystr addr; signed_addr := signed_data;
  sig = let list_length = @list_length( Pair ByStr32 ByStr64 ) in list_length signatures;
  counter <- gcounter; is_three = builtin eq counter three;
  min = match is_three with
    | True => three
    | False => let div_ = builtin div counter two in builtin add div_ one end;
  is_ok = uint32_ge sig min; match is_ok with
    | False => e = { _exception: "DIDxWALLET-InsufficientAmountOfSignatures" }; throw e
    | True =>
      gcounter := zero_; forall signatures VerifySocialRecovery;
      sig_counter <- gcounter; is_ok_ = uint32_ge sig_counter min; match is_ok_ with
        | False => e = { _exception: "DIDxWALLET-InsufficientAmountOfCorrectSignatures" }; throw e
        | True => SupportTyron tyron; controller := addr; gcounter := counter end end;
  new_status = Recovered; did_status := new_status;
  Timestamp end

procedure ThrowIfNoKey( optKey: Option ByStr33 )
  match optKey with
  | Some key => | None => e = { _exception: "DIDxWALLET-UndefinedKey" }; throw e end end

procedure HashDocument( document: Document )
  doc_hash <- did_hash;
  element_hash = match document with
  | VerificationMethod action purpose key encrypted =>
    match action with
    | Add =>
      let h1 = builtin sha256hash actionAdd in
      let h2 = builtin sha256hash purpose in
      let h3 = builtin sha256hash key in
      let h4 = builtin sha256hash encrypted in
      let h1_2 = builtin concat h1 h2 in
      let h1_3 = builtin concat h1_2 h3 in
      let hash = builtin concat h1_3 h4 in
      builtin to_bystr hash
    | Remove =>
      let h1 = builtin sha256hash actionRemove in
      let h2 = builtin sha256hash purpose in
      let hash = builtin concat h1 h2 in
      builtin to_bystr hash end
  | Service action id endpoint =>
      match action with
      | Add =>
        let h1 = builtin sha256hash actionAdd in
        let h2 = builtin sha256hash id in
        match endpoint with
        | Uri eType transfer uri =>
          let h3 = builtin sha256hash uri in
          let h1_2 = builtin concat h1 h2 in
          let hash = builtin concat h1_2 h3 in
          builtin to_bystr hash
        | Address address =>
          match address with
          | Zilliqa addr =>
            let h3 = builtin sha256hash addr in
            let h1_2 = builtin concat h1 h2 in
            let hash = builtin concat h1_2 h3 in
            builtin to_bystr hash
          | Other addr =>
            let h3 = builtin sha256hash addr in
            let h1_2 = builtin concat h1 h2 in
            let hash = builtin concat h1_2 h3 in
            builtin to_bystr hash end end
      | Remove =>
        let h1 = builtin sha256hash actionRemove in
        let h2 = builtin sha256hash id in
        let hash = builtin concat h1 h2 in
        builtin to_bystr hash end end;
  new_doc_hash = builtin concat doc_hash element_hash;
  did_hash := new_doc_hash end

procedure UpdateDocument( document: Document )
  match document with
  | VerificationMethod action purpose key encrypted =>
    match action with
    | Add =>
      verification_methods[purpose] := key;
      dkms[purpose] := encrypted
    | Remove =>
      key_exists <- exists verification_methods[purpose];
      match key_exists with
      | True =>
        delete verification_methods[purpose];
        delete dkms[purpose]
      | False => e = { _exception: "DIDxWALLET-RemoveNoKey" }; throw e end end
  | Service action id endpoint =>
    match action with
    | Add =>
      match endpoint with
      | Address address =>
        match address with
        | Zilliqa addr => services[id] := addr
        | Other adrr => services_[id] := endpoint end
      | Uri eType protocol uri => services_[id] := endpoint end
    | Remove =>
      is_service <- exists services[id];
      is_service_ <- exists services_[id];
      service_exists = orb is_service is_service_;
      match service_exists with
      | True => delete services[id]; delete services_[id]
      | False => e = { _exception: "DIDxWALLET-RemoveNoService" }; throw e end end end end

procedure VerifyDocument(
  document: List Document,
  signature: Option ByStr64,
  tyron: Option Uint128
  )
  SupportTyron tyron; current_controller <- controller;
  verified = builtin eq _origin current_controller; match verified with
    | True => forall document UpdateDocument
    | False =>
        get_update_key <- verification_methods[update]; update_key = option_bystr33_value get_update_key;
        forall document HashDocument; doc_hash <- did_hash;
        sig = option_bystr64_value signature; VerifySignature update doc_hash sig; did_hash := zeroByStr;
        forall document UpdateDocument;
        get_new_update_key <- verification_methods[update]; new_update = option_bystr33_value get_new_update_key;
        is_same_key = builtin eq update_key new_update; match is_same_key with
        | False => | True => e = { _exception: "DIDxWALLET-SameUpdateKey" }; throw e end end end

transition DidUpdate(
  document: List Document,
  signature: Option ByStr64,
  tyron: Option Uint128
  )
  current_status <- did_status; match current_status with
    | Created => VerifyDocument document signature tyron
    | Updated => VerifyDocument document signature tyron
    | Recovered => VerifyController tyron; forall document UpdateDocument
    | _ => e = { _exception: "DIDxWALLET-WrongStatus" }; throw e end;
  new_status = Updated; did_status := new_status;
  Timestamp end

transition DidDeactivate(
  document: List Document,
  signature: Option ByStr64,
  tyron: Option Uint128
  ) 
  IsOperational; VerifyDocument document signature tyron;
  did := empty_string; controller := zeroByStr20; social_guardians := empty_guardians;
  verification_methods := empty_methods; dkms := empty_map;
  services := empty_services; services_ := empty_services_;
  did_domain_dns := empty_domains; nft_dns := empty_map;
  new_status = Deactivated; did_status := new_status;
  Timestamp end

transition Dns(
  addr: ByStr20,
  domain: String,
  didKey: ByStr33,
  encrypted: String,
  nftID: String,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron; ThrowIfSameAddr addr _this_address;
  verification_methods[domain] := didKey; dkms[domain] := encrypted; did_domain_dns[domain] := addr; 
  nft_dns[domain] := nftID;
  new_status = Updated; did_status := new_status;
  Timestamp end

transition UpdateNftDns(
  domain: String,
  nftID: String,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  nft_dns[domain] := nftID;
  new_status = Updated; did_status := new_status;
  Timestamp end

(* xWALLET backbone 476-924 *)

(* -> Fungible tokens backbone 476-623 <- *)

procedure FetchServiceAddr( id: String )
  current_init <-& init.dApp;
  initId = "init"; get_did <-& current_init.did_dns[initId]; match get_did with
    | None => e = { _exception: "DIDxWALLET-NullInit" }; throw e
    | Some did_ =>
      get_service <-& did_.services[id]; addr = option_bystr20_value get_service;
      services[id] := addr end end

procedure IncreaseAllowance(
  addr: ByStr20,
  spender: ByStr20,
  amount: Uint128
  )
  ThrowIfNullAddr addr;
  msg = let m = { _tag: "IncreaseAllowance"; _recipient: addr; _amount: zero;
    spender: spender;
    amount: amount } in one_msg m ; send msg end

procedure DecreaseAllowance(
  addr: ByStr20,
  spender: ByStr20,
  amount: Uint128
  )
  ThrowIfNullAddr addr;
  msg = let m = { _tag: "DecreaseAllowance"; _recipient: addr; _amount: zero;
    spender: spender;
    amount: amount } in one_msg m ; send msg end

(* Receive $ZIL native funds *)
transition AddFunds()
  IsOperational; accept; Timestamp end

(* Send $ZIL to any recipient that implements the tag, e.g. "AddFunds", "", etc. *)
transition SendFunds(
  tag: String,
  beneficiary: Beneficiary,
  amount: Uint128,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  match beneficiary with
  | NftUsername username_ domain_ =>
    current_init <-& init.dApp;
    is_ssi = builtin eq domain_ empty_string; match is_ssi with
      | True =>
        get_addr <-& current_init.dns[username_]; addr = option_bystr20_value get_addr; ThrowIfSameAddr addr _this_address;
        msg = let m = { _tag: tag; _recipient: addr; _amount: amount } in one_msg m; send msg
      | False =>
        get_did <-& current_init.did_dns[username_]; match get_did with
          | None => e = { _exception: "DIDxWALLET-DidIsNull" }; throw e
          | Some did_ =>
            is_did = builtin eq domain_ did; match is_did with
              | True => msg = let m = { _tag: tag; _recipient: did_; _amount: amount } in one_msg m; send msg
              | False =>
                get_domain_addr <-& did_.did_domain_dns[domain_]; domain_addr = option_bystr20_value get_domain_addr;
                msg = let m = { _tag: tag; _recipient: domain_addr; _amount: amount } in one_msg m; send msg end end end
  | Recipient addr_ =>
    ThrowIfSameAddr addr_ _this_address;
    msg = let m = { _tag: tag; _recipient: addr_; _amount: amount } in one_msg m; send msg end;
  Timestamp end

transition Transfer(
  addrName: String,
  beneficiary: Beneficiary,
  amount: Uint128,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron; FetchServiceAddr addrName;
  get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr;
  match beneficiary with
  | NftUsername username_ domain_ =>
    current_init <-& init.dApp;
    is_ssi = builtin eq domain_ empty_string; match is_ssi with
      | True =>
        get_addr <-& current_init.dns[username_]; addr = option_bystr20_value get_addr; ThrowIfSameAddr addr _this_address;
        msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
          to: addr;
          amount: amount } in one_msg m ; send msg
      | False =>
        get_did <-& current_init.did_dns[username_]; match get_did with
          | None => e = { _exception: "DIDxWALLET-DidIsNull" }; throw e
          | Some did_ =>
            is_did = builtin eq domain_ did; match is_did with
              | True =>
                msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
                to: did_;
                amount: amount } in one_msg m ; send msg
              | False =>
                get_domain_addr <-& did_.did_domain_dns[domain_]; domain_addr = option_bystr20_value get_domain_addr;
                msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
                  to: domain_addr;
                  amount: amount } in one_msg m ; send msg end end end
  | Recipient addr_ =>
    ThrowIfSameAddr addr_ _this_address;
    msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
      to: addr_;
      amount: amount } in one_msg m ; send msg end;
  Timestamp end

transition RecipientAcceptTransfer(
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  ) 
  IsOperational;
  is_valid = builtin eq recipient _this_address; match is_valid with
    | True => | False => e = { _exception: "DIDxWALLET-WrongRecipientForAcceptTransfer" }; throw e end end 

transition RecipientAcceptTransferFrom(
  initiator: ByStr20,
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  IsOperational;
  is_valid = builtin eq recipient _this_address; match is_valid with
    | True => | False => e = { _exception: "DIDxWALLET-WrongRecipientForAcceptTransferFrom" }; throw e end end

transition TransferSuccessCallBack(
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  IsOperational;
  is_valid = builtin eq sender _this_address; match is_valid with
    | True => | False => e = { _exception: "DIDxWALLET-WrongSender" }; throw e end end

procedure ZRC2_TransferTokens( input: Pair String Uint128 )
  addr_name = let fst_element = @fst String Uint128 in fst_element input;
  amount = let snd_element = @snd String Uint128 in snd_element input;
  current_beneficiary <- batch_beneficiary; FetchServiceAddr addr_name;
  is_zil = builtin eq addr_name zil; match is_zil with
    | True => accept; msg = let m = { _tag: "AddFunds"; _recipient: current_beneficiary; _amount: amount } in one_msg m; send msg
    | False =>
      get_token_addr <- services[addr_name]; token_addr = option_bystr20_value get_token_addr;
      msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
        to: current_beneficiary;
        amount: amount } in one_msg m ; send msg end
end

transition ZRC2_BatchTransfer(
  addr: ByStr20,
  tokens: List( Pair String Uint128 ),
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  ThrowIfSameAddr addr _this_address;
  batch_beneficiary := addr; forall tokens ZRC2_TransferTokens; batch_beneficiary := zeroByStr20;
  Timestamp
end

(* -> Non-fungible tokens backbone 629-924 <- *)

(* -->> SSI DNS backbone 629-778 <<-- *)

transition BuyNftUsername(
  id: String,
  username: String,
  addr: Option ByStr20,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron; ThrowIfNullString id; ThrowIfNullString username;
  txID = "BuyNftUsername";
  current_init <-& init.dApp; init_did <-& current_init.implementation;
  get_fee <-& init_did.utility[id][txID]; fee = option_uint128_value get_fee;
  is_zil = builtin eq id zil; match is_zil with
    | True => accept
    | False =>
        is_free = builtin eq id free; match is_free with
          | True => | False =>
              FetchServiceAddr id; get_addr <- services[id]; coin_addr = option_bystr20_value get_addr;
              IncreaseAllowance coin_addr init_did fee end end;
  zil_amount = match is_zil with
    | True => fee
    | False => zero end;
  address = match addr with
    | Some addr_ => addr_
    | None => _this_address end;
  msg = let m = { _tag: txID; _recipient: current_init; _amount: zil_amount;
    id: id;
    username: username;
    addr: address;
    dID: _this_address } in one_msg m; send msg;
  Timestamp end

transition TransferNftUsername(
  id: String,
  username: String,
  addr: ByStr20,
  dID: ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20 end,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron; ThrowIfNullString id; ThrowIfNullString username;
  txID = "TransferNftUsername";
  current_init <-& init.dApp; init_did <-& current_init.implementation;
  get_fee <-& init_did.utility[id][txID]; fee = option_uint128_value get_fee;
  is_zil = builtin eq id zil; match is_zil with
    | True => accept
    | False =>
      is_free = builtin eq id free; match is_free with
        | True => | False =>
          FetchServiceAddr id; get_addr <- services[id]; coin_addr = option_bystr20_value get_addr;
          IncreaseAllowance coin_addr init_did fee end end;
  zil_amount = match is_zil with
    | True => fee
    | False => zero end;
  msg = let m = { _tag: txID; _recipient: current_init; _amount: zil_amount;
    id: id;
    username: username;
    addr: addr;
    dID: dID } in one_msg m; send msg;
  Timestamp end

transition MintTydraNft(
  id: String,
  token_id: ByStr32,
  token_uri: String,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  ThrowIfNullString id; ThrowIfNullHash token_id; ThrowIfNullString token_uri;
  txID = "MintTydraNft";
  current_init <-& init.dApp; init_did <-& current_init.implementation;
  get_fee <-& init_did.utility[id][txID]; fee = option_uint128_value get_fee;
  is_zil = builtin eq id zil; match is_zil with
    | True => accept
    | False =>
      is_free = builtin eq id free; match is_free with
        | True => | False =>
          FetchServiceAddr id; get_addr <- services[id]; coin_addr = option_bystr20_value get_addr;
          IncreaseAllowance coin_addr init_did fee end end;
  zil_amount = match is_zil with
    | True => fee
    | False => zero end;
  msg = let m = { _tag: txID; _recipient: init_did; _amount: zil_amount;
    id: id;
    token_id: token_id;
    token_uri: token_uri } in one_msg m; send msg;
  Timestamp end
  
transition TransferTydraNft(
  id: String,
  tydra: String,
  token_id: ByStr32,
  to_token_id: ByStr32,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  ThrowIfNullString id; ThrowIfNullString tydra; ThrowIfNullHash token_id; ThrowIfNullHash to_token_id;
  txID = "TransferTydraNft";
  current_init <-& init.dApp; init_did <-& current_init.implementation;
  get_fee <-& init_did.utility[id][txID]; fee = option_uint128_value get_fee;
  is_zil = builtin eq id zil; match is_zil with
    | True => accept
    | False =>
      is_free = builtin eq id free; match is_free with
        | True => | False =>
          FetchServiceAddr id; get_addr <- services[id]; coin_addr = option_bystr20_value get_addr;
          IncreaseAllowance coin_addr init_did fee end end;
  zil_amount = match is_zil with
    | True => fee
    | False => zero end;
  msg = let m = { _tag: txID; _recipient: init_did; _amount: zil_amount;
    id: id;
    tydra: tydra;
    token_id: token_id;
    to_token_id: to_token_id } in one_msg m; send msg;
  Timestamp end

transition UpdateTokenURI(
  addrName: String,
  token_id: Uint256,
  token_uri: String,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  FetchServiceAddr addrName; get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr;
  msg = let m = { _tag: "UpdateTokenURI"; _recipient: token_addr; _amount: zero;
    token_id: token_id;
    token_uri: token_uri } in one_msg m ; send msg;
  Timestamp end

transition UpdateDomainAddress(
  addrName: String,
  token_id: Uint256,
  new_addr: ByStr20,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  FetchServiceAddr addrName; get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr;
  msg = let m = { _tag: "UpdateDomainAddress"; _recipient: token_addr; _amount: zero;
    token_id: token_id;
    new_addr: new_addr } in one_msg m ; send msg;
  Timestamp end
  
transition SSIDNS_UpdateDomainCallback(
  token_owner: ByStr20,
  token_id: Uint256
  )
  IsOperational;
  is_valid = builtin eq token_owner _this_address; match is_valid with
    | True => | False => e = { _exception: "DIDxWALLET_UpdateDomainCallback-NotOwner" }; throw e end end

(* -->> ZRC6 backbone 782-924 <<-- *)

transition ZRC6_Mint(
  addrName: String,
  to: ByStr20,
  token_uri: String,
  domain_id: ByStr32,
  amount: Uint128,
  id: String,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron; ThrowIfNullAddr to;
  FetchServiceAddr addrName; get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr; ThrowIfNullAddr token_addr;
  is_null = builtin eq empty_string id; match is_null with
    | True =>
      accept; msg = let m = { _tag: "Mint"; _recipient: token_addr; _amount: amount;
        to: to;
        token_uri: token_uri } in one_msg m ; send msg
    | False =>
      txID = "BuyNftUsername";
      current_init <-& init.dApp; current_impl <-& current_init.implementation;
      get_fee <-& current_impl.utility[id][txID]; fee = option_uint128_value get_fee;
      is_zil = builtin eq id zil; match is_zil with
        | True => accept
        | False =>
          is_free = builtin eq id free; match is_free with
            | True => | False =>
              FetchServiceAddr id; get_addr <- services[id]; coin_addr = option_bystr20_value get_addr;
              IncreaseAllowance coin_addr token_addr fee end end;
      zil_amount = match is_zil with
        | True => fee
        | False => zero end;
      msg = let m = { _tag: "MintTyron"; _recipient: token_addr; _amount: zil_amount;
        to: to;
        token_uri: domain_id;
        id: id } in one_msg m ; send msg end;
  Timestamp
end

transition ZRC6_MintCallback(to: ByStr20, token_id: Uint256, token_uri: String) IsOperational end (* We could verify that from is _this_address but there is no 'from' variable in this callback *)

transition ZRC6_RecipientAcceptMint() IsOperational end

transition ZRC6_BatchMint(
  addrName: String,
  to_token_uri_pair_list: List( Pair ByStr20 String ),
  amount: Uint128,
  id: String,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  FetchServiceAddr addrName; get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr;
  is_null = builtin eq empty_string id; match is_null with
    | True =>
      accept; msg = let m = { _tag: "BatchMint"; _recipient: token_addr; _amount: amount;
        to_token_uri_pair_list: to_token_uri_pair_list } in one_msg m ; send msg
    | False =>
      txID = "BuyNftUsername";
      current_init <-& init.dApp; current_impl <-& current_init.implementation;
      get_fee <-& current_impl.utility[id][txID]; fee_ = option_uint128_value get_fee;
      counter = let list_length = @list_length (Pair ByStr20 String) in list_length to_token_uri_pair_list;
      get_counter = builtin to_uint128 counter; counter_ = match get_counter with
        | Some c => c
        | None => zero end; (* should never happen *)
      fee = builtin mul fee_ counter_;
      is_zil = builtin eq id zil; match is_zil with
        | True => accept
        | False =>
            is_free = builtin eq id free; match is_free with
              | True => | False =>
                  FetchServiceAddr id; get_addr <- services[id]; coin_addr = option_bystr20_value get_addr;
                  IncreaseAllowance coin_addr token_addr fee end end;
      zil_amount = match is_zil with
        | True => fee
        | False => zero end;
      msg = let m = { _tag: "BatchMintTyron"; _recipient: token_addr; _amount: zil_amount;
        to_token_uri_pair_list: to_token_uri_pair_list;
        id: id } in one_msg m ; send msg end;
  Timestamp end

transition ZRC6_BatchMintCallback() IsOperational end

transition ZRC6_TransferFrom(
  addrName: String,
  to: ByStr20,
  token_id: Uint256,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  ThrowIfSameAddr to _this_address;
  FetchServiceAddr addrName; get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr;
  msg = let m = { _tag: "TransferFrom"; _recipient: token_addr; _amount: zero;
    to: to;
    token_id: token_id } in one_msg m ; send msg; Timestamp end

transition ZRC6_TransferFromCallback(
  from: ByStr20,
  to: ByStr20,
  token_id: Uint256
  )
  IsOperational;
  is_valid = builtin eq from _this_address; match is_valid with
    | True => | False => e = { _exception: "DIDxWALLET-WrongSender" }; throw e end end

transition ZRC6_RecipientAcceptTransferFrom( from: ByStr20, to: ByStr20, token_id: Uint256 ) IsOperational end

transition ZRC6_BatchTransferFrom(
  addrName: String,
  to_token_id_pair_list: List (Pair ByStr20 Uint256),
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  FetchServiceAddr addrName; get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr;
  msg = let m = { _tag: "BatchTransferFrom"; _recipient: token_addr; _amount: zero;
    to_token_id_pair_list: to_token_id_pair_list } in one_msg m ; send msg; Timestamp end

transition ZRC6_BatchTransferFromCallback() IsOperational end

transition ZRC6_SetSpender(
  addrName: String,
  spender: ByStr20,
  token_id: Uint256,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  FetchServiceAddr addrName; get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr;
  msg = let m = { _tag: "SetSpender"; _recipient: token_addr; _amount: zero;
    spender: spender;
    token_id: token_id } in one_msg m ; send msg;
  Timestamp end

transition ZRC6_SetSpenderCallback( spender: ByStr20, token_id: Uint256 ) IsOperational end

transition ZRC6_Burn(
  addrName: String,
  token_id: Uint256,
  tyron: Option Uint128
  )
  IsOperational; VerifyController tyron;
  FetchServiceAddr addrName; get_token_addr <- services[addrName]; token_addr = option_bystr20_value get_token_addr;
  msg = let m = { _tag: "Burn"; _recipient: token_addr; _amount: zero;
    token_id: token_id } in one_msg m ; send msg;
  Timestamp end

transition ZRC6_BurnCallback( token_owner: ByStr20, token_id: Uint256 ) IsOperational end