(* v0.2.0
AIRxWALLET: $TYRON Airdrop Social-Recovery Wallet
Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2023. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0
import BoolUtils ListUtils

library AIRxWALLET
  let empty_services = Emp String ByStr20
  let true = True
  let false = False
  let null = ""

  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  let zero = Uint128 0
  let zeroByStr20 = 0x0000000000000000000000000000000000000000

  let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
  let compare_participant = fun( addr: ByStr20 ) => fun( participant: ByStr20 ) => builtin eq addr participant

contract Airdrop(
  init_username: String,
  init_controller: ByStr20,
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20,
      field services: Map String ByStr20 end end end,
  token_name: String,
  airdrop_amount: Uint128,
  init_list: List ByStr20
  )
    with
    let is_invalid = builtin eq token_name null in
    negb is_invalid
  =>
  field nft_username: String = init_username
  field pending_username: String = ""
  field is_paused: Bool = false
  field airdrop_list: List ByStr20 = init_list
  
  field services: Map String ByStr20 = empty_services
  (* The block number when the last DID CRUD operation occurred *)
  field ledger_time: BNum = BNum 0
  (* A monotonically increasing number representing the amount of DID CRUD transactions that have taken place *)
  field tx_number: Uint128 = zero
  field version: String = "AIRxWALLET_0.2.0" (* @xalkan *)

procedure RequireNotPaused()
  (* Reference: *)
  (* https://consensys.github.io/smart-contract-best-practices/general_philosophy/#prepare-for-failure *)
  paused <- is_paused; match paused with
  | False =>
  | True => (* Contract is paused *)
    e = { _exception: "AIRxWALLET_PausedError" }; throw e
  end
end

procedure VerifyController()
  current_username <- nft_username; current_init <-& init.dApp;
  get_did <-& current_init.did_dns[current_username]; match get_did with
  | None => e = { _exception : "AIRxWALLET_DidIsNull" }; throw e
  | Some did_ =>
      current_controller <-& did_.controller;
      verified = builtin eq _origin current_controller; match verified with
      | True =>
      | False => e = { _exception : "AIRxWALLET_WrongCaller" }; throw e end end end

transition Pause()
  RequireNotPaused; VerifyController; is_paused := true;
  e = { _eventname: "SmartContractPaused";
    pauser: _origin }; event e end

transition Unpause()
  VerifyController; is_paused := false;
  e = { _eventname: "SmartContractUnpaused";
    pauser: _origin }; event e end

procedure Timestamp()
  current_block <- &BLOCKNUMBER; ledger_time := current_block;
  latest_tx_number <- tx_number;
  new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor; tx_number := new_tx_number end

procedure ThrowIfNullAddr( addr: ByStr20 )
  is_null = builtin eq addr zeroByStr20; match is_null with
    | False => | True => e = { _exception: "AIRxWALLET_NullAddress" }; throw e end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  ThrowIfNullAddr a;
  is_self = builtin eq a b; match is_self with
    | False => | True => e = { _exception: "AIRxWALLET_SameAddress" }; throw e end end

procedure ThrowIfSameName(
  a: String,
  b: String
  )
  is_same = builtin eq a b; match is_same with
    | False => | True => e = { _exception: "AIRxWALLET_SameUsername" }; throw e end end

transition UpdateUsername( username: String )
  RequireNotPaused; VerifyController;
  current_username <- nft_username; ThrowIfSameName current_username username;
  current_init <-& init.dApp;
  get_did <-& current_init.did_dns[username]; match get_did with
    | Some did_ => pending_username := username
    | None => e = { _exception: "AIRxWALLET_DidIsNull" }; throw e end;
  Timestamp end

transition AcceptPendingUsername()
  RequireNotPaused; current_pending <- pending_username;
  current_init <-& init.dApp;
  get_did <-& current_init.did_dns[current_pending]; match get_did with
    | None => e = { _exception: "AIRxWALLET_DidIsNull" }; throw e
    | Some did_ =>
      current_controller <-& did_.controller;
      verified = builtin eq _origin current_controller; match verified with
        | True => | False => e = { _exception: "AIRxWALLET_WrongCaller" }; throw e end;
      nft_username := current_pending; pending_username := null end;
  Timestamp end

procedure FetchServiceAddr( id: String )
  current_init <-& init.dApp;
  initId = "init"; get_did <-& current_init.did_dns[initId]; match get_did with
    | None => e = { _exception: "AIRxWALLET_NullInit" }; throw e
    | Some did_ =>
      get_service <-& did_.services[id]; addr = option_bystr20_value get_service;
      services[id] := addr end end

transition RecipientAcceptTransfer(
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  ) 
  RequireNotPaused;
  is_valid = builtin eq recipient _this_address; match is_valid with
    | True => | False => e = { _exception: "AIRxWALLET_WrongRecipientForAcceptTransfer" }; throw e end end 

transition RecipientAcceptTransferFrom(
  initiator: ByStr20,
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  RequireNotPaused;
  is_valid = builtin eq recipient _this_address; match is_valid with
    | True => | False => e = { _exception: "AIRxWALLET_WrongRecipientForAcceptTransferFrom" }; throw e end end

transition Aidrop()
  RequireNotPaused;
  list_part = @list_mem ByStr20; list <- airdrop_list;
  is_participant = list_part compare_participant _sender list;
  match is_participant with
  | True =>
    list_filter = @list_filter ByStr20; remove_participant = fun( participant: ByStr20 )
      => let is_addr = builtin eq _sender participant in negb is_addr;
    list_updated = list_filter remove_participant list;
    airdrop_list := list_updated
  | False => e = { _exception: "AIRxWALLET_NotInTheList" }; throw e end;
  FetchServiceAddr token_name;
  get_token_addr <- services[token_name]; token_addr = option_bystr20_value get_token_addr;
  msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
    to: _sender;
    amount: airdrop_amount } in one_msg m ; send msg;
  Timestamp end

transition Transfer(
    addr_: ByStr20,
    amount: Uint128
  )
  VerifyController; FetchServiceAddr token_name;
  get_token_addr <- services[token_name]; token_addr = option_bystr20_value get_token_addr;
  ThrowIfSameAddr addr_ _this_address;
  msg = let m = { _tag: "Transfer"; _recipient: token_addr; _amount: zero;
    to: addr_;
    amount: amount } in one_msg m ; send msg end
  
transition TransferSuccessCallBack( sender: ByStr20, recipient: ByStr20, amount: Uint128 ) RequireNotPaused end