(* v1.5.0
donate.tyron: Decentralized ZIL Wallet for the SSI Community donations <> Donate DApp
Self-Sovereign Identity Protocol
Copyright (C) Tyron Mapu Community Interest Company and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

import PairUtils BoolUtils ListUtils IntUtils

library Donate

  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  type Error =
    | CodeWrongCaller
    | CodeIsInsufficient
 
  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeWrongCaller            => Int32 -1
    | CodeIsInsufficient         => Int32 -2
    end in { _exception: "Error"; code: result }
  
  let zero = Uint128 0
  let zeroByStr20 = 0x0000000000000000000000000000000000000000
  
  let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
  
  let hundred = Uint128 100
  let ten = Uint128 10
  let eighty = Uint128 80
  let wfp = "wfp"
  let insurance = "insurance"
  let coop = "tyron"

  type Beneficiary =
    | NftUsername of String String (* username & domain *)
    | Recipient of ByStr20

contract DonateDApp(
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field dns: Map String ByStr20 end end
  )
  field version: String = "donate--1.5.0"
  field xpoints: Map ByStr20 Uint128 = Emp ByStr20 Uint128
  field donations: Map String Uint128 = Emp String Uint128
  field ledger_time: BNum = BNum 0
  field tx_number: Uint128 = zero

procedure ThrowError( err: Error )
  e = make_error err; throw e end
  
procedure Timestamp()
  current_block <- &BLOCKNUMBER; ledger_time := current_block;
  latest_tx_number <- tx_number;
  new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor; tx_number := new_tx_number end

(* Receive $ZIL native funds *)
transition AddFunds()
  accept;
  get_xpoints <- xpoints[_origin]; x_points = option_uint128_value get_xpoints;
  new_bal = builtin add x_points _amount; xpoints[_origin] := new_bal;
  percent = builtin div _amount hundred; wfp_ = builtin mul percent ten; insurance_ = builtin mul percent ten; coop_ = builtin mul percent eighty;
  get_wfp_bal <- donations[wfp]; wfp_bal = option_uint128_value get_wfp_bal; new_wfp = builtin add wfp_bal wfp_;
  donations[wfp] := new_wfp;
  get_insurance_bal <- donations[insurance]; insurance_bal = option_uint128_value get_insurance_bal; new_insurance = builtin add insurance_bal insurance_;
  donations[insurance] := new_insurance;
  get_coop_bal <- donations[coop]; coop_bal = option_uint128_value get_coop_bal; new_coop = builtin add coop_bal coop_;
  donations[coop] := new_coop;
  Timestamp end

procedure IsSufficient(
  value: Uint128,
  amount: Uint128
  )
  is_sufficient = uint128_ge value amount; match is_sufficient with
  | True => | False => err = CodeIsInsufficient; ThrowError err end end

transition Withdrawal( amount: Uint128 )
  current_init <-& init.dApp;
  get_wfp <-& current_init.dns[wfp]; wfp_addr = option_bystr20_value get_wfp;
  is_wfp = builtin eq _sender wfp_addr; match is_wfp with
  | True =>
    get_balance <- donations[wfp]; balance = option_uint128_value get_balance;
    IsSufficient balance amount;
    msg = let m = { _tag: "AddFunds"; _recipient: wfp_addr; _amount: amount } in one_msg m; send msg;
    new_bal = builtin sub balance amount; donations[wfp] := new_bal
  | False =>
    get_insurance <-& current_init.dns[insurance]; insurance_addr = option_bystr20_value get_insurance;
    is_insurance = builtin eq _sender insurance_addr; match is_insurance with
    | True =>
      get_balance <- donations[insurance]; balance = option_uint128_value get_balance;
      IsSufficient balance amount;
      msg = let m = { _tag: "AddFunds"; _recipient: insurance_addr; _amount: amount } in one_msg m; send msg;
      new_bal = builtin sub balance amount; donations[insurance] := new_bal
    | False =>
      get_coop <-& current_init.dns[coop]; coop_addr = option_bystr20_value get_coop;
      is_coop = builtin eq _sender coop_addr; match is_coop with
      | True =>
        get_balance <- donations[coop]; balance = option_uint128_value get_balance;
        IsSufficient balance amount;
        msg = let m = { _tag: "AddFunds"; _recipient: coop_addr; _amount: amount } in one_msg m; send msg;
        new_bal = builtin sub balance amount; donations[coop] := new_bal
      | False => err = CodeWrongCaller; ThrowError err end end end end

transition XPoints( amount: Uint128 )
  current_init <-& init.dApp;
  xPointsDApp = "xpoints"; get_addr <-& current_init.dns[xPointsDApp]; addr = option_bystr20_value get_addr;
  is_xPoints = builtin eq _sender addr; match is_xPoints with
  | True => | False => err = CodeWrongCaller; ThrowError err end;
  get_xPoints <- xpoints[_origin]; x_points = option_uint128_value get_xPoints; IsSufficient x_points amount;
  new_bal = builtin sub x_points amount; xpoints[_origin] := new_bal end