(* v0.4
«community.ssi» DApp: Decentralised Exchange & Liquidity Pool Token
SSI Account & S$I Dollar
Tyron SSI: Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2023. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

import IntUtils BoolUtils PairUtils

library Community
  type Error =
    | CodeWrongSender
    | CodeDidIsNull
    | CodeWrongStatus
    | CodeIsNull
    | CodeSameValue
    | CodeIsInsufficient
    | CodeNotValid
    | CodeWrongRecipient
  
  type Action =
    | Add
    | Remove
  
  let add = Add
  let remove = Remove
  let true = True
  let false = False
  let zero = Uint128 0
  let zero_256 = Uint256 0
  let one = Uint128 1
  let one_256 = Uint256 1
  let zeroByStr20 = 0x0000000000000000000000000000000000000000
  let zeroByStr32 = 0x0000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr33 = 0x000000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr64 = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  let fee_denom = Uint256 10000 (* Fee denominated in basis points: 1 b.p. = 0.01% *)
  let empty_string = ""
  let did = "did"
  let ssi_id = "s$i"
  let none_byStr20 = None{ ByStr20 with contract field did_domain_dns: Map String ByStr20 end }
  
  let option_value = tfun 'A => fun(default: 'A) => fun(input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
  let option_string_value = let f = @option_value String in f empty_string
  let option_bystr32_value = let f = @option_value ByStr32 in f zeroByStr32
  let option_bystr33_value = let f = @option_value ByStr33 in f zeroByStr33
  let option_bystr64_value = let f = @option_value ByStr64 in f zeroByStr64

  let grow: Uint128 -> Uint256 =
    fun(var : Uint128) =>
      let get_big = builtin to_uint256 var in match get_big with
        | Some big => big
        | None => builtin sub zero_256 one_256 end (* @error throws an integer underflow - should never happen *)

  let get_output: Uint128 -> Uint128 -> Uint128 -> Uint256 -> Uint128 =
    fun(input_amount: Uint128) => fun(input_reserve: Uint128) => fun(output_reserve: Uint128) => fun (after_fee: Uint256) =>
      let input_amount_u256 = grow input_amount in
      let input_reserve_u256 = grow input_reserve in
      let output_reserve_u256 = grow output_reserve in
      let input_amount_after_fee = builtin mul input_amount_u256 after_fee in
      let numerator = builtin mul input_amount_after_fee output_reserve_u256 in
      let input_reserve_denom = builtin mul input_reserve_u256 fee_denom in
      let denominator = builtin add input_reserve_denom input_amount_after_fee in
      let result = builtin div numerator denominator in
      let result_uint128 = builtin to_uint128 result in match result_uint128 with
        | None => builtin sub zero one (* @error throws an integer overflow by computing -1 in uint *)
        | Some r => r end

  let fraction: Uint128 -> Uint128 -> Uint128 -> Uint128 =
    fun(dX: Uint128) => fun(x: Uint128) => fun(y: Uint128) =>
      let dX_u256 = grow dX in
      let x_u256 = grow x in
      let y_u256 = grow y in
      let numerator = builtin mul dX_u256 y_u256 in
      let result = builtin div numerator x_u256 in
      let result_uint128 = builtin to_uint128 result in match result_uint128 with
        | None => builtin sub zero one (* @error throws an integer overflow by computing -1 in uint *)
        | Some r => builtin add r one end

  let is_input_output: ByStr20 -> ByStr20 -> ByStr20 -> ByStr20 -> Bool =
    fun(token0_address: ByStr20) => fun(input: ByStr20) => fun(token1_address: ByStr20)=> fun(output: ByStr20) =>
    let is_input = builtin eq token0_address input in
    let is_output = builtin eq token1_address output in
    andb is_input is_output

  let compute_ssi: Uint128 -> Uint256 -> Uint256 -> Uint128 =
    fun(amount: Uint128) => fun(price: Uint256) => fun(x: Uint256) =>
      let amount_u256 = grow amount in
      let numerator = builtin mul amount_u256 price in
      let result = builtin div numerator x in
      let result_uint128 = builtin to_uint128 result in match result_uint128 with
        | None => builtin sub zero one (* @error throws an integer overflow by computing -1 in uint *)
        | Some r => r end

  let one_msg = fun(msg: Message) => let nil_msg = Nil{Message} in Cons{Message} msg nil_msg

  let two_msgs = fun(msg1: Message) => fun(msg2: Message) =>
    let msgs_tmp = one_msg msg2 in Cons{Message} msg1 msgs_tmp

  let three_msgs = fun(msg1: Message) => fun(msg2: Message) => fun(msg3: Message) =>
    let msgs_tmp = two_msgs msg2 msg3 in Cons{Message} msg1 msgs_tmp

  let four_msgs = fun(msg1: Message) => fun(msg2: Message) => fun(msg3: Message) => fun(msg4: Message) =>
    let msgs_tmp = three_msgs msg2 msg3 msg4 in Cons{Message} msg1 msgs_tmp

  let make_error = fun (error: Error) => fun (version: String) => fun (code: Int32) =>
    let exception = match error with
    | CodeWrongSender    => "WrongSender"
    | CodeDidIsNull      => "DidIsNull"
    | CodeWrongStatus    => "WrongStatus"
    | CodeIsNull         => "ZeroValueOrNull"
    | CodeSameValue      => "SameValue"
    | CodeWrongRecipient => "WrongRecipientForTransfer"
    | CodeIsInsufficient => "InsufficientAmount"
    | CodeNotValid       => "NotValid"
    end in { _exception: exception; contractVersion: version; errorCode: code }

contract Community(
  init_nft: ByStr32,
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20,
      field verification_methods: Map String ByStr33,
      field services: Map String ByStr20,
      field did_domain_dns: Map String ByStr20 end end end,
  token_id: String,
  init_fee: Uint256,
  init_fund: String,
  (* LP token *)
  init_supply: Uint128,
  name : String,
  symbol: String,
  decimals: Uint32,
  sbt_issuer: String,
  issuer_subdomain: String
  )
  with (* Contract constraints @review update *)
    let is_valid =
      let is_invalid = 
        let null = builtin eq init_nft zeroByStr32 in (* The initial domain name must not be null *)
        let insufficient = uint256_le fee_denom init_fee in
        orb null insufficient in
      negb is_invalid in
    let is_zero = builtin eq init_supply zero in
    andb is_valid is_zero
  =>

  field nft_domain: ByStr32 = init_nft
  field pending_domain: ByStr32 = zeroByStr32
  
  field pauser: ByStr32 = init_nft
  field paused: Bool = False
  
  field min_affiliation: Uint128 = Uint128 10000000000000000000 (* 10 S$I dollars *)
  field reserves: Pair Uint128 Uint128 = Pair{ Uint128 Uint128 } zero zero (* S$I reserve & Token reserve *)
  field contributions: Uint128 = zero
  field balances: Map ByStr20 Uint128 = Emp ByStr20 Uint128
  field price: Uint256 = Uint256 1350000 (* 1 $TYRON = 1.35 S$I *)
  field x: Uint256 = Uint256 1

  (* Liquidity Pool Token *)
  field total_supply: Uint128 = init_supply
  field lsd_pauser: ByStr32 = init_nft
  field lsd_paused: Bool = False
  field shares: Map ByStr20 Uint128 = Emp ByStr20 Uint128
  field allowances: Map ByStr20 Map ByStr20 Uint128 = Emp ByStr20 Map ByStr20 Uint128

  field sbt: Map ByStr32 ByStr64 = Emp ByStr32 ByStr64
  field registry: Map ByStr20 ByStr32 = Emp ByStr20 ByStr32
  field community_balances: Map ByStr32 Uint128 = Emp ByStr32 Uint128 (* NFT Domain Name & amount of dollars *)
  field limit: Uint128 = Uint128 1000000000000000000000 (* 1,000 S$I dollars *)
  field temp_did: Option ByStr20 with contract
    field did_domain_dns: Map String ByStr20 end = none_byStr20
  
  field profit_denom: Uint256 = init_fee
  field profit_fund: String = init_fund 
  
  (* DID Services *)
  field services: Map String ByStr20 = Emp String ByStr20

  (* The block number when the last transition occurred *)
  field ledger_time: BNum = BNum 0
  
  (* A monotonically increasing number representing the amount of transitions that have taken place *)
  field tx_number: Uint128 = zero

  (* The smart contract @version *)
  field version: String = "Community.ssiDApp_0.4.0"

procedure ThrowError(err: Error, code: Int32)
  ver <- version; e = make_error err ver code; throw e
end

procedure VerifyOrigin(addr: ByStr20)
  verified = builtin eq _origin addr; match verified with
    | True => | False => err = CodeWrongSender; code = Int32 -1; ThrowError err code end
end

procedure VerifyOwner(
  ssi_init: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20 end end
  )
  id <- nft_domain; domain_ = builtin to_string id;
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -2; ThrowError err code
    | Some did_ =>
        controller <-& did_.controller; VerifyOrigin controller end
end

procedure SupportTyron(
  ssi_init: ByStr20 with contract field dns: Map String ByStr20 end,
  tyron: Option Uint128
  )
  match tyron with
  | None => | Some donation =>
    donateDomain = "donate"; get_addr <-& ssi_init.dns[donateDomain]; addr = option_bystr20_value get_addr;
    accept; msg = let m = { _tag: "AddFunds"; _recipient: addr; _amount: donation } in one_msg m; send msg end
end

procedure TyronCommunityFund(
  ssi_init: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20 end end,
  id: String
  )
  fund <- profit_fund;
  txID = builtin concat fund id;
  init_did <-& ssi_init.implementation; get_fee <-& init_did.utility[did][txID]; fee = option_uint128_value get_fee;
  is_zero = builtin eq fee zero; match is_zero with
    | True => | False =>
      get_did <-& ssi_init.did_dns[fund]; match get_did with
        | Some did_ => msg = let m = { _tag: "AddFunds"; _recipient: did_; _amount: fee } in one_msg m; send msg
        | None => err = CodeDidIsNull; code = Int32 -3; ThrowError err code end end
end
  
procedure RequireContractOwner(
  tyron: Option Uint128,
  tx: String
  )
  ssi_init <-& init.dApp; VerifyOwner ssi_init;
  SupportTyron ssi_init tyron; TyronCommunityFund ssi_init tx
end

procedure Timestamp()
  current_block <- &BLOCKNUMBER; ledger_time := current_block;
  latest_tx_number <- tx_number; new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor;
  tx_number := new_tx_number
end

procedure RequireNotPaused()
  is_paused <- paused; match is_paused with
    | False => | True => err = CodeWrongStatus; code = Int32 -4; ThrowError err code end
end

procedure RequirePaused()
  is_paused <- paused; match is_paused with
    | True => | False => err = CodeWrongStatus; code = Int32 -5; ThrowError err code end
end

procedure RequireNotLSDPaused()
  is_paused <- lsd_paused; match is_paused with
    | False => | True => err = CodeWrongStatus; code = Int32 -6; ThrowError err code end
end

procedure RequireLSDPaused()
  is_paused <- lsd_paused; match is_paused with
    | True => | False => err = CodeWrongStatus; code = Int32 -7; ThrowError err code end
end

procedure ThrowIfNullString( input: String )
  is_null = builtin eq input empty_string; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -8; ThrowError err code end
end

procedure ThrowIfNullHash( input: ByStr32 )
  is_null = builtin eq input zeroByStr32; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -9; ThrowError err code end
end

procedure ThrowIfNullSig( input: ByStr64 )
  is_null = builtin eq input zeroByStr64; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -10; ThrowError err code end
end

procedure ThrowIfSameDomain(
  a: ByStr32,
  b: ByStr32
  )
  is_same = builtin eq a b; match is_same with
    | False => | True => err = CodeSameValue; code = Int32 -11; ThrowError err code end end

procedure ThrowIfZero( val: Uint128 )
  is_null = builtin eq zero val; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -12; ThrowError err code end
end

procedure ThrowIfNullAddr( addr: ByStr20 )
  is_null = builtin eq addr zeroByStr20; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -13; ThrowError err code end
end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
    | False => | True => err = CodeSameValue; code = Int32 -14; ThrowError err code end
end

procedure ThrowIfDifferentAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
    | True => | False => err = CodeNotValid; code = Int32 -15; ThrowError err code end
end

procedure ThrowIfSameVal(
  a: Uint128,
  b: Uint128
  )
  is_self = builtin eq a b; match is_self with
    | False => | True => err = CodeSameValue; code = Int32 -16; ThrowError err code end
end

procedure ThrowIfExpired( deadline_block: BNum )
  current_block <- & BLOCKNUMBER;
  verified = builtin blt current_block deadline_block; match verified with
  | True => | False => err = CodeNotValid; code = Int32 -17; ThrowError err code end
end

procedure FetchServiceAddr( id: String )
  ssi_init <-& init.dApp;
  initId = "init"; get_did <-& ssi_init.did_dns[initId]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -18; ThrowError err code
    | Some did_ =>
      get_service <-& did_.services[id]; addr = option_bystr20_value get_service; services[id] := addr;
      ssi_service <-& did_.services[ssi_id]; ssi_addr = option_bystr20_value ssi_service; services[ssi_id] := ssi_addr end
end

procedure IsPauser()
  id <- pauser; ssi_init <-& init.dApp;
  domain_ = builtin to_string id;
  get_addr <-& ssi_init.dns[domain_]; match get_addr with
    | None => err = CodeIsNull; code = Int32 -19; ThrowError err code
    | Some addr =>
      is_sender = builtin eq addr _sender; match is_sender with
        | True =>
        | False =>
          err = CodeWrongSender; code = Int32 -20; ThrowError err code end end
end

procedure IsLSDPauser()
  id <- lsd_pauser; ssi_init <-& init.dApp;
  domain_ = builtin to_string id;
  get_addr <-& ssi_init.dns[domain_]; match get_addr with
    | None => err = CodeIsNull; code = Int32 -21; ThrowError err code
    | Some addr =>
      is_sender = builtin eq addr _sender; match is_sender with
        | True =>
        | False =>
          err = CodeWrongSender; code = Int32 -22; ThrowError err code end end
end

procedure IsSufficient(
  value: Uint128,
  amount: Uint128
  )
  is_sufficient = uint128_ge value amount; match is_sufficient with
    | True => | False => err = CodeIsInsufficient; code = Int32 -23; ThrowError err code end
end

procedure IsSufficientLiquidity( amount: Uint128 )
  current_min <- min_affiliation; IsSufficient amount current_min
end

(* To make a deposit into this dapp *)
procedure TransferFundsFrom(
  addr: ByStr20,
  amount: Uint128
  )
  msg = let m = { _tag: "TransferFrom"; _recipient: addr; _amount: zero;
    from: _sender;
    to: _this_address;
    amount: amount } in one_msg m; send msg
end

procedure IsValidTransferFrom(
  amount: Uint128,
  initiator: ByStr20,
  recipient: ByStr20
  )
  ThrowIfZero amount;
  is_valid =
    let is_initiator = builtin eq initiator _this_address in
    let is_recipient = builtin eq recipient _this_address in
    andb is_initiator is_recipient;
  match is_valid with
    | True => | False => err = CodeNotValid; code = Int32 -24; ThrowError err code end
end

(* To withdraw funds from this dapp *)
procedure TransferFunds(
  addr: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  ThrowIfZero amount; ThrowIfNullAddr addr; ThrowIfNullAddr beneficiary; ThrowIfSameAddr beneficiary _this_address;
  msg = let m = { _tag: "Transfer"; _recipient: addr; _amount: zero;
    to: beneficiary;
    amount: amount } in one_msg m; send msg
end

procedure VerifyController(
  domain: ByStr32,
  ssi_init: ByStr20 with contract
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20,
      field did_domain_dns: Map String ByStr20 end end
  )
  ThrowIfNullHash domain; domain_ = builtin to_string domain;
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -25; ThrowError err code
    | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller;
      some_did = Some{ ByStr20 with contract field did_domain_dns: Map String ByStr20 end } did_;
      temp_did := some_did end
end

(* @dev: Updates the caller's balances & LP token total supply.
   @param action: Add or Remove shares.
   @param domain: The NFT Domain Name of the caller (_sender).
   @param amount: Of S$I dollars. *)
procedure UpdateShares(
  action: Action,
  addr: ByStr20,
  amount: Uint128
  )
  (* Get contributions *)
  current_contributions <- contributions;
  
  (* Get current supply & compute shares *)
  supply <- total_supply;
  is_null = builtin eq supply zero;
  computed_shares = match is_null with
  | True => amount
  | False => fraction amount current_contributions supply end;

  (* Get balances *)
  get_bal <- shares[addr]; bal = option_uint128_value get_bal;
  get_domain <- registry[addr]; domain = option_bystr32_value get_domain; ThrowIfNullHash domain;
  get_community_balance <- community_balances[domain]; community_balance = option_uint128_value get_community_balance;

  match action with
  | Add =>
    new_bal = builtin add bal computed_shares; shares[addr] := new_bal;
    new_supply = builtin add supply computed_shares; total_supply := new_supply;
    new_community_balance = builtin add community_balance amount; community_balances[domain] := new_community_balance
  | Remove =>
    new_bal = builtin sub bal computed_shares; (* @error: Throw integer underflow if trying to withdraw more shares than the balance. *)
    new_supply = builtin sub supply computed_shares; total_supply := new_supply;

    is_zero = builtin eq new_bal zero; match is_zero with
      | True =>
        (* Clean space *)
        delete shares[addr];
        delete community_balances[domain]    
      | False =>
        shares[addr] := new_bal;
        new_community_balance = builtin sub community_balance amount; community_balances[domain] := new_community_balance end end
end

(* @dev: Sends update order depending on the new balance. If above limit, requests DID signature.
   @param addr: Beneficiary.
   @param domain: The caller (_sender) must control the NFT domain name.
   @param amount: Of S$I dollars. *)
procedure AddShares(
  addr: ByStr20,
  domain: ByStr32,
  amount: Uint128
  )
  get_bal <- shares[addr]; bal = option_uint128_value get_bal;
  get_community_balance <- community_balances[domain]; community_balance = option_uint128_value get_community_balance;
  new_community_balance = builtin add community_balance amount;

  current_limit <- limit;
  is_below = uint128_le new_community_balance current_limit; match is_below with
  | True => | False =>
    get_sig <- sbt[domain]; sig = option_bystr64_value get_sig;
    ThrowIfNullSig sig end;
  (* @review: revoke sig by issuer *)
  UpdateShares add addr amount
end

procedure VerifySBTxWALLET(
  domain: ByStr32,
  ssi_init: ByStr20 with contract
    field did_dns: Map String ByStr20 with contract
      field verification_methods: Map String ByStr33 end end,
  get_xwallet: Option ByStr20 with contract
    field ivms101: Map String String,
    field sbt: Map String ByStr64 end
  )
  match get_xwallet with
  | None => err = CodeNotValid; code = Int32 -26; ThrowError err code
  | Some xwallet => (* Access the caller's SBTxWALLET *)
    (* The user's IVMS101 Message *)
    get_ivms101 <-& xwallet.ivms101[sbt_issuer]; msg = option_string_value get_ivms101; ThrowIfNullString msg;
    get_did <-& ssi_init.did_dns[sbt_issuer]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -27; ThrowError err code
    | Some did_ =>
      get_didkey <-& did_.verification_methods[issuer_subdomain]; did_key = option_bystr33_value get_didkey;
      signed_data = let hash = builtin sha256hash msg in builtin to_bystr hash;
      (* The issuer's signature *)
      get_sig <-& xwallet.sbt[sbt_issuer]; sig = option_bystr64_value get_sig;
      is_right_signature = builtin schnorr_verify did_key signed_data sig; match is_right_signature with
      | False => err = CodeNotValid; code = Int32 -28; ThrowError err code
      | True => sbt[domain] := sig end end end
end

procedure TransferIfSufficientBalance(
  originator: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  ThrowIfNullAddr originator; ThrowIfNullAddr beneficiary; ThrowIfSameAddr originator beneficiary;
  ThrowIfZero amount;
  
  UpdateShares remove originator amount;
  
  get_domain <- registry[beneficiary]; domain = option_bystr32_value get_domain; ThrowIfNullHash domain;
  AddShares beneficiary domain amount
end

transition UpdateDomain(
  domain: ByStr32,
  tyron: Option Uint128
  )
  RequireNotPaused; ThrowIfNullHash domain;
  tag = "UpdateDomain"; RequireContractOwner tyron tag;
  id <- nft_domain; ThrowIfSameDomain id domain;
  ssi_init <-& init.dApp; domain_ = builtin to_string domain;
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 1; ThrowError err code
    | Some did_ => pending_domain := domain end;
  Timestamp
end

transition AcceptPendingDomain()
  RequireNotPaused; domain <- pending_domain;
  ssi_init <-& init.dApp; domain_ = builtin to_string domain;
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -2; ThrowError err code
    | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller;
      nft_domain := domain; pending_domain := zeroByStr32 end;
  Timestamp
end

transition UpdatePauser(
  domain: ByStr32,
  tyron: Option Uint128
  )
  RequireNotPaused;
  tag = "UpdatePauser"; RequireContractOwner tyron tag;
  current_pauser <- pauser; ThrowIfSameDomain current_pauser domain;
  pauser := domain;
  e = { _eventname: "PauserUpdated";
    newPauser: domain }; event e;
  Timestamp
end

(* @dev: Pauses the whole dApp *)
transition Pause()
  RequireNotPaused;
  IsPauser; paused := true;
  ver <- version; e = { _eventname: "SSIDApp-Paused";
    version: ver;
    pauser: _sender }; event e;
  Timestamp
end

transition Unpause()
  RequirePaused;
  IsPauser; paused := false;
  ver <- version; e = { _eventname: "SSIDApp-Unpaused";
    version: ver;
    pauser: _sender }; event e;
  Timestamp
end

transition UpdateLSDPauser(
  domain: ByStr32,
  tyron: Option Uint128
  )
  RequireNotPaused;
  tag = "UpdateLSDPauser"; RequireContractOwner tyron tag;
  current_pauser <- lsd_pauser; ThrowIfSameDomain current_pauser domain;
  pauser := domain;
  e = { _eventname: "LSDPauserUpdated";
    newPauser: domain }; event e;
  Timestamp
end

(* @dev: Pauses the LP token *)
transition LSDPause()
  RequireNotPaused; RequireNotLSDPaused;
  IsLSDPauser; lsd_paused := true;
  ver <- version; e = { _eventname: "SSIDApp-LSDPaused";
    version: ver;
    pauser: _sender }; event e;
  Timestamp
end

transition LSDUnpause()
  RequireNotPaused; RequireLSDPaused;
  IsLSDPauser; lsd_paused := false;
  ver <- version; e = { _eventname: "SSIDApp-LSDUnpaused";
    version: ver;
    pauser: _sender }; event e;
  Timestamp
end

transition UpdateMinAffiliation(
  val: Uint128,
  tyron: Option Uint128
  )
  RequireNotPaused; ThrowIfZero val;
  tag = "UpdateMinAffiliation"; RequireContractOwner tyron tag;
  current <- min_affiliation; ThrowIfSameVal current val; min_affiliation := val;
  ver <- version; e = { _eventname: "SSIDApp-MinAffiliationUpdated";
    value: val;
    version: ver;
    sender: _sender }; event e;
  Timestamp
end

transition UpdateProfitDenom(
  val: Uint256,
  tyron: Option Uint128
  )
  RequireNotPaused;
  tag = "UpdateProfitDenom"; RequireContractOwner tyron tag;
  verified = uint256_le val fee_denom; match verified with
    | True => | False => err = CodeNotValid; code = Int32 3; ThrowError err code end;
  new_denom = builtin sub fee_denom val; profit_denom := new_denom;
  e = { _eventname: "ProfitDenomUpdated";
    newValue: new_denom }; event e;
  Timestamp
end

transition UpdateProfitFund(
  val: String,
  tyron: Option Uint128
  )
  RequireNotPaused;
  tag = "UpdateProfitFund"; RequireContractOwner tyron tag;
  ThrowIfNullString val; profit_fund := val;
  e = { _eventname: "ProfitFundUpdated";
    newValue: val }; event e;
  Timestamp
end

transition RecipientAcceptTransferFrom(
  initiator: ByStr20,
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; IsValidTransferFrom amount initiator recipient;
  Timestamp
end

transition TransferFromSuccessCallBack(
  initiator: ByStr20,
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; IsValidTransferFrom amount initiator recipient;
  Timestamp
end

transition TransferSuccessCallBack(
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  RequireNotPaused;
  is_valid = builtin eq sender _this_address; match is_valid with
    | True => | False => err = CodeNotValid; code = Int32 4; ThrowError err code end;
  Timestamp
end

transition AddLiquidity(
  token_address: ByStr20, (* It must be the $TYRON token address *)
  min_contribution_amount: Uint128, (* Of S$I *)
  max_token_amount: Uint128,
  deadline_block: BNum
  )
  RequireNotPaused; ThrowIfZero min_contribution_amount; ThrowIfZero max_token_amount;
  FetchServiceAddr token_id;
  get_ssi_addr <- services[ssi_id]; ssi_address = option_bystr20_value get_ssi_addr; ThrowIfNullAddr ssi_address;
  get_token_addr <- services[token_id]; token_addr = option_bystr20_value get_token_addr; ThrowIfNullAddr token_addr;
  ThrowIfDifferentAddr token_address token_addr;  
  ThrowIfExpired deadline_block;

  current_reserves <- reserves;
  ssi_reserve = let fst_element = @fst Uint128 Uint128 in fst_element current_reserves;
  
  ver <- version;
  is_empty = builtin eq ssi_reserve zero; match is_empty with
    | True =>
      current_price <- price; current_x <- x;
      ssi_amount = compute_ssi max_token_amount current_price current_x;
      IsSufficientLiquidity ssi_amount;

      (* Check limits *)
      is_valid = uint128_ge ssi_amount min_contribution_amount; match is_valid with
        | True => | False => err = CodeNotValid; code = Int32 5; ThrowError err code end;

      (* Make transfers & update balance *)
      TransferFundsFrom ssi_address ssi_amount;
      TransferFundsFrom token_addr max_token_amount;
      contributions := ssi_amount;
      balances[_sender] := ssi_amount;

      (* Update reserves *)
      init_reserves = Pair{ Uint128 Uint128 } ssi_amount max_token_amount;
      reserves := init_reserves;

      e = { _eventname: "SSIDApp_CommunityInitialised";
        version: ver;
        sender: _sender;
        tokenAddr: token_addr }; event e;
      e = { _eventname: "SSIDApp_AddLiquidity";
        version: ver;
        sender: _sender;
        contribution: ssi_amount;
        dollars: ssi_amount;
        tokens: max_token_amount;
        tokenAddr: token_addr;
        ssiReserve: ssi_amount;
        tokenReserve: max_token_amount;
        totalContributions: ssi_amount }; event e
    | False =>
      token_reserve = let snd_element = @snd Uint128 Uint128 in snd_element current_reserves;
      ssi_amount = get_output max_token_amount token_reserve ssi_reserve fee_denom; (* after_fee = fee_denom means 0% fee *)
      IsSufficientLiquidity ssi_amount;

      token_amount = fraction ssi_amount ssi_reserve token_reserve;

      current_contributions <- contributions; ThrowIfZero current_contributions;
      contribution_amount = fraction ssi_amount ssi_reserve current_contributions;

      (* Check limits *)
      is_valid =
        let valid_ssi = uint128_ge contribution_amount min_contribution_amount in
        let valid_token = uint128_le token_amount max_token_amount in
        andb valid_ssi valid_token;
      match is_valid with
      | True => | False => err = CodeNotValid; code = Int32 6; ThrowError err code end;
      
      (* Make transfers & update balance *)
      TransferFundsFrom ssi_address ssi_amount;
      TransferFundsFrom token_addr token_amount;
      get_balance <- balances[_sender]; balance = option_uint128_value get_balance;
      new_balance = builtin add balance contribution_amount; balances[_sender] := new_balance;
      
      new_contributions = builtin add current_contributions contribution_amount;
      contributions := new_contributions;
      
      (* Update reserves *)
      new_ssi_reserve = builtin add ssi_reserve ssi_amount;
      new_token_reserve = builtin add token_reserve token_amount;
      new_reserves = Pair{ Uint128 Uint128 } new_ssi_reserve new_token_reserve;
      reserves := new_reserves;
      
      e = { _eventname: "SSIDApp_AddLiquidity";
        version: ver;
        sender: _sender;
        contribution: contribution_amount;
        dollars: ssi_amount;
        tokens: token_amount;
        tokenAddr: token_addr;
        ssiReserve: new_ssi_reserve;
        tokenReserve: new_token_reserve;
        totalContributions: new_contributions }; event e end;
  Timestamp
end

(* @dev: Takes liquidity out of the dApp and sends the funds to the caller (_sender).
   @param contribution_amount: The amount of dollars provided for liquidity.
   @param min_zil_amount: Treated as the minimum amount of S$I dollars requested for withdrawal. *)
transition RemoveLiquidity(
  token_address: ByStr20,
  contribution_amount: Uint128,
  min_zil_amount: Uint128,
  min_token_amount: Uint128,
  deadline_block: BNum
  )
  RequireNotPaused;
  ThrowIfZero contribution_amount; ThrowIfZero min_zil_amount; ThrowIfZero min_token_amount;
  FetchServiceAddr token_id;
  get_ssi_addr <- services[ssi_id]; ssi_address = option_bystr20_value get_ssi_addr; ThrowIfNullAddr ssi_address;
  get_token_addr <- services[token_id]; token_addr = option_bystr20_value get_token_addr; ThrowIfNullAddr token_addr;
  ThrowIfDifferentAddr token_address token_addr;  
  ThrowIfExpired deadline_block;

  (* Get reserves *)
  current_reserves <- reserves;
  ssi_reserve = let fst_element = @fst Uint128 Uint128 in fst_element current_reserves;
  token_reserve = let snd_element = @snd Uint128 Uint128 in snd_element current_reserves;

  ThrowIfZero ssi_reserve;

  current_contributions <- contributions; ThrowIfZero current_contributions;
  ssi_amount = fraction contribution_amount current_contributions ssi_reserve;
  token_amount = fraction contribution_amount current_contributions token_reserve;

  (* Check limits *)
  is_valid =
    let valid_ssi = uint128_ge ssi_amount min_zil_amount in
    let valid_token = uint128_ge token_amount min_token_amount in
    andb valid_ssi valid_token;
  match is_valid with
    | True => | False => err = CodeNotValid; code = Int32 7; ThrowError err code end;

  (* Update balance *)
  get_balance <- balances[_sender]; balance = option_uint128_value get_balance;
  new_balance = builtin sub balance contribution_amount; (* @error: Integer underflow. *)
  new_contributions = builtin sub current_contributions contribution_amount;
  
  is_zero = builtin eq new_balance zero; match is_zero with
    | True => delete balances[_sender]
    | False => balances[_sender] := new_balance end;

  (* Compute new S$I reserve *)
  new_ssi_reserve = builtin sub ssi_reserve ssi_amount;
  
  ver <- version;
  is_empty = builtin eq new_ssi_reserve zero; match is_empty with
    | True =>
      (* Make transfers *)
      TransferFunds ssi_address _sender ssi_reserve;
      TransferFunds token_addr _sender token_reserve;
      
      (* Update reserves *)
      zero_reserves = Pair{ Uint128 Uint128 } zero zero; reserves := zero_reserves;
      contributions := zero;
      total_supply := zero;
      delete balances[_sender];

      e = { _eventname: "SSIDApp_RemoveLiquidity";
        version: ver;
        sender: _sender;
        contribution: contribution_amount;
        dollars: ssi_reserve;
        tokens: token_reserve;
        tokenAddr: token_addr;
        ssiReserve: zero;
        tokenReserve: zero;
        totalContributions: zero }; event e
    | False =>
      (* Make transfers & update shares *)
      TransferFunds ssi_address _sender ssi_amount;
      TransferFunds token_address _sender token_amount;

      (* Update reserves *)
      new_token_reserve = builtin sub token_reserve token_amount;
      new_reserves = Pair{ Uint128 Uint128 } new_ssi_reserve new_token_reserve;
      reserves := new_reserves;
      contributions := new_contributions;
      
      e = { _eventname: "SSIDApp_RemoveLiquidity";
        version: ver;
        sender: _sender;
        contribution: contribution_amount;
        dollars: ssi_amount;
        tokens: token_amount;
        tokenAddr: token_addr;
        ssiReserve: new_ssi_reserve;
        tokenReserve: new_token_reserve;
        totalContributions: new_contributions }; event e end;
  Timestamp
end

(* @dev: Swaps between the S$I dollar & the community token.
   @param token0_address: Address of the input token.
   @param token1_address: Address of the output token. *)
transition SwapExactTokensForTokens(
  token0_address: ByStr20,
  token1_address: ByStr20,
  token0_amount: Uint128,
  min_token1_amount: Uint128,
  deadline_block: BNum,
  recipient_address: ByStr20
  )
  RequireNotPaused; ThrowIfZero token0_amount; ThrowIfZero min_token1_amount;
  ThrowIfExpired deadline_block; ThrowIfNullAddr recipient_address;
  FetchServiceAddr token_id;
  get_ssi_addr <- services[ssi_id]; ssi_address = option_bystr20_value get_ssi_addr; ThrowIfNullAddr ssi_address;
  get_token_addr <- services[token_id]; token_address = option_bystr20_value get_token_addr; ThrowIfNullAddr token_address;
  
  is_ssi_to_token = is_input_output token0_address ssi_address token1_address token_address;
  is_token_to_ssi = is_input_output token0_address token_address token1_address ssi_address;
  is_valid = orb is_ssi_to_token is_token_to_ssi; match is_valid with
    | True => | False => err = CodeNotValid; code = Int32 10; ThrowError err code end;

  after_fee <- profit_denom;
  current_reserves <- reserves;
  ssi_reserve = let fst_element = @fst Uint128 Uint128 in fst_element current_reserves;
  token_reserve = let snd_element = @snd Uint128 Uint128 in snd_element current_reserves;

  ver <- version;
  match is_ssi_to_token with
    | True => (* Swap S$I for tokens *)
      ssi_amount = token0_amount;
      (* @review: compute_token for fair launch *)
      token_amount = get_output ssi_amount ssi_reserve token_reserve after_fee;
      
      (* Check limits *)
      is_valid_token = uint128_ge token_amount min_token1_amount; match is_valid with
        | True => | False => err = CodeNotValid; code = Int32 11; ThrowError err code end;
      
      (* Make transfers *)
      TransferFundsFrom ssi_address ssi_amount; (* The fee goes into the S$I reserve *)
      TransferFunds token_address recipient_address token_amount;

      (* Update reserves *)
      new_ssi_reserve = builtin add ssi_reserve ssi_amount;
      new_token_reserve = builtin sub token_reserve token_amount;
      new_reserves = Pair{ Uint128 Uint128 } new_ssi_reserve new_token_reserve;
      reserves := new_reserves;

      e = { _eventname: "SwapSSIForToken";
        version: ver;
        originator: _sender;
        beneficiary: recipient_address;
        tokenAddr: token_address;
        tokens: token_amount;
        dollars: ssi_amount;
        ssiReserve: new_ssi_reserve;
        tokenReserve: new_token_reserve }; event e
    | False => (* Swap tokens for S$I *)
      token_amount = token0_amount;
      ssi_amount = get_output token_amount token_reserve ssi_reserve after_fee;
      
      (* Check limits *)
      is_valid_ssi = uint128_ge ssi_amount min_token1_amount; match is_valid with
        | True => | False => err = CodeNotValid; code = Int32 12; ThrowError err code end;
      
      (* Make transfers *)
      TransferFundsFrom token_address token0_amount; (* The fee goes into the Token reserve *)
      TransferFunds ssi_address recipient_address ssi_amount;
      
      (* Update reserves *)
      new_ssi_reserve = builtin sub ssi_reserve ssi_amount;
      new_token_reserve = builtin add token_reserve token_amount;
      new_reserves = Pair{ Uint128 Uint128 } new_ssi_reserve new_token_reserve;
      reserves := new_reserves;

      e = { _eventname: "SwapTokenForSSI";
        version: ver;
        originator: _sender;
        beneficiary: recipient_address;
        tokenAddr: token_address;
        tokens: token_amount;
        dollars: ssi_amount;
        ssiReserve: new_ssi_reserve;
        tokenReserve: new_token_reserve }; event e
    end;
  Timestamp
end

transition JoinCommunity(
  domain: ByStr32,
  subdomain: Option String,
  amount: Uint128
  )
  RequireNotPaused;
  
  (* Verify & register NFT domain *)
  ssi_init <-& init.dApp;
  VerifyController domain ssi_init;
  registry[_sender] := domain;
  
  (* Get balance *)
  get_balance <- balances[_sender]; balance = option_uint128_value get_balance;
  IsSufficient balance amount;
  
  get_community_balance <- community_balances[domain]; community_balance = option_uint128_value get_community_balance;
  new_community_balance = builtin add community_balance amount;

  current_limit <- limit;
  is_below = uint128_le new_community_balance current_limit; match is_below with
  | True => | False =>
    (* Get SBTxWALLET *)
    subdomain_ = option_string_value subdomain; ThrowIfNullString subdomain_;
    is_did = builtin eq subdomain_ did; match is_did with
    | True => err = CodeNotValid; code = Int32 8; ThrowError err code
    | False =>
      current_did <- temp_did; match current_did with
      | None => err = CodeDidIsNull; code = Int32 9; ThrowError err code
      | Some did_ =>
        get_addr <-& did_.did_domain_dns[subdomain_]; addr = option_bystr20_value get_addr;
        get_xwallet <-& addr as ByStr20 with contract
          field ivms101: Map String String,
          field sbt: Map String ByStr64 end;
        VerifySBTxWALLET domain ssi_init get_xwallet;
        temp_did := none_byStr20 end end end;
  UpdateShares add _sender amount; 

  (* Update balance *)
  new_balance = builtin sub balance amount;
  is_zero = builtin eq new_balance zero; match is_zero with
    | True => (* Clean space *)
      delete balances[_sender]
    | False =>
      balances[_sender] := new_balance end;
  Timestamp
end

(* @dev: The caller (_sender) must control the NFT domain name *)
transition LeaveCommunity( amount: Uint128 )
  RequireNotPaused;
  UpdateShares remove _sender amount;

  (* Update balance *)
  get_balance <- balances[_sender]; balance = option_uint128_value get_balance;
  new_balance = builtin add balance amount; balances[_sender] := new_balance;
  Timestamp
end

(* @dev: Adds rewards. *)
transition RecipientAcceptTransfer(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
  )
  RequireNotPaused;
  ssi_init <-& init.dApp; VerifyOwner ssi_init;
  is_valid = builtin eq recipient _this_address; match is_valid with
    | True => | False => err = CodeWrongRecipient; code = Int32 13; ThrowError err code end;
  FetchServiceAddr token_id;
  get_ssi_addr <- services[ssi_id]; ssi_address = option_bystr20_value get_ssi_addr; ThrowIfNullAddr ssi_address;
  is_ssi = builtin eq ssi_address _sender; match is_ssi with
    | True =>
      get_token_addr <- services[token_id]; token_address = option_bystr20_value get_token_addr; ThrowIfNullAddr token_address;
      
      current_reserves <- reserves;
      ssi_reserve = let fst_element = @fst Uint128 Uint128 in fst_element current_reserves;
      token_reserve = let snd_element = @snd Uint128 Uint128 in snd_element current_reserves;

      (* Update reserves *)
      new_ssi_reserve = builtin add ssi_reserve amount;
      new_reserves = Pair{ Uint128 Uint128 } new_ssi_reserve token_reserve;
      reserves := new_reserves;

      current_contributions <- contributions; ThrowIfZero current_contributions;
      contribution_amount =
        let contribution = let two = Uint128 2 in builtin div amount two in
        fraction contribution ssi_reserve current_contributions;
      new_contributions = builtin add current_contributions contribution_amount;
      contributions := new_contributions;

      ver <- version;
      e = { _eventname: "SSIDApp_AddRewards";
        version: ver;
        contribution: contribution_amount;
        dollars: amount;
        tokenAddr: token_address;
        ssiReserve: new_ssi_reserve;
        tokenReserve: token_reserve;
        totalContributions: new_contributions }; event e
    | False =>
      err = CodeNotValid; code = Int32 14; ThrowError err code end;
  Timestamp
end

(* @dev: Moves an amount of LP tokens from the caller to the recipient.
   @dev: The caller (_sender) must be the token owner.
   @dev: Balance of _sender (originator) will decrease.
   @dev: Balance of recipient (beneficiary) will increase.
   @param to: Address of the recipient whose balance is increased.
   @param amount: Amount of tokens to be sent. *)
transition Transfer(
  to: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; RequireNotLSDPaused;
  TransferIfSufficientBalance _sender to amount;
  
  e = { _eventname: "TransferSuccess";
    sender: _sender;
    recipient: to;
    amount: amount }; event e;
  
  (* Prevent using contracts that do not support Transfer of tokens *)
  msg_to_originator = { _tag: "TransferSuccessCallBack"; _recipient: _sender; _amount: zero;
    sender: _sender;
    recipient: to;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptTransfer"; _recipient: to; _amount: zero;
    sender: _sender;
    recipient: to;
    amount: amount
  };
  msgs = two_msgs msg_to_originator msg_to_beneficiary; send msgs;
  Timestamp
end

(* @dev: Increases the allowance of the spender over the caller LP tokens.
   @dev: The caller (_sender) must be the token owner.
   @param spender: Address of the approved spender.
   @param amount: Number of tokens to be increased as allowance for the spender. *)
transition IncreaseAllowance(
  spender: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; RequireNotLSDPaused; ThrowIfSameAddr spender _sender;
  get_allowance <- allowances[_sender][spender]; allowance = option_uint128_value get_allowance;
  new_allowance = builtin add allowance amount; allowances[_sender][spender] := new_allowance;
  
  e = { _eventname: "IncreasedAllowance";
    token_owner: _sender;
    spender: spender;
    new_allowance: new_allowance }; event e;
  Timestamp
end

(* @dev: Decreases the allowance of the spender over the caller LP tokens.
   @dev: The caller (_sender) must be the token owner.
   @param spender: Address of the approved spender.
   @param amount: Number of tokens to be decreased as allowance for the spender. *)
transition DecreaseAllowance(
  spender: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; RequireNotLSDPaused; ThrowIfSameAddr spender _sender;
  get_allowance <- allowances[_sender][spender]; allowance = option_uint128_value get_allowance;
  is_valid = uint128_le amount allowance; match is_valid with
    | True =>
      new_allowance = builtin sub allowance amount; allowances[_sender][spender] := new_allowance;
      e = { _eventname: "DecreasedAllowance";
        token_owner: _sender;
        spender: spender;
        new_allowance: new_allowance }; event e
    | False =>
      (* Interpret it as a request to delete the spender data *)
      delete allowances[_sender][spender] end;
  Timestamp
end

(* @dev: Moves a given amount of LP tokens from one address to another using the allowance mechanism.
   @dev: The caller must be an approved spender.
   @dev: Balance of the token owner (originator) will decrease.
   @dev: Balance of recipient (beneficiary) will increase.
   @param from: Address of the token owner whose balance is decreased (the originator address).
   @param to: Address of the recipient whose balance is increased (the beneficiary address).
   @param amount: Amount of tokens to be transferred. *)
transition TransferFrom(
  from: ByStr20,
  to: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; RequireNotLSDPaused;
  get_allowance <- allowances[from][_sender]; allowance = option_uint128_value get_allowance;
  IsSufficient allowance amount;
  TransferIfSufficientBalance from to amount;
  new_allowance = builtin sub allowance amount; allowances[from][_sender] := new_allowance;
  
  e = { _eventname: "TransferFromSuccess";
    initiator: _sender;
    sender: from;
    recipient: to;
    amount: amount }; event e;
  
  (* Prevent using contracts that do not support TransferFrom of tokens *)
  msg_to_spender = { _tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero;
    initiator: _sender;
    sender: from;
    recipient: to;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptTransferFrom"; _recipient: to; _amount: zero;
    initiator: _sender;
    sender: from;
    recipient: to;
    amount: amount
  }; msgs = two_msgs msg_to_spender msg_to_beneficiary; send msgs;
  Timestamp
end