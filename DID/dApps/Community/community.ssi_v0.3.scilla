(* v0.3
Community.ssi dApp: Governing & Profit-Sharing Community Decentralised Application <> SSI Account
Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2023. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

import IntUtils BoolUtils

library Community
  let one_msg = fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  let two_msgs = fun( msg1: Message ) => fun( msg2: Message ) =>
    let msgs_tmp = one_msg msg2 in Cons{ Message } msg1 msgs_tmp

  let three_msgs = fun( msg1: Message ) => fun( msg2: Message ) => fun( msg3: Message ) =>
    let msgs_tmp = two_msgs msg2 msg3 in Cons{ Message } msg1 msgs_tmp

  let four_msgs = fun( msg1: Message ) => fun( msg2: Message ) => fun( msg3: Message ) => fun( msg4: Message ) =>
    let msgs_tmp = three_msgs msg2 msg3 msg4 in Cons{ Message } msg1 msgs_tmp

  type Error =
    | CodeWrongSender
    | CodeDidIsNull
    | CodeWrongStatus
    | CodeIsNull
    | CodeSameValue
    | CodeIsInsufficient
    | CodeNotValid
    | CodeWrongRecipient

  let true = True
  let false = False
  let zero = Uint128 0
  let zeroByStr20 = 0x0000000000000000000000000000000000000000
  let zeroByStr32 = 0x0000000000000000000000000000000000000000000000000000000000000000
  let fee_denom = Uint256 10000 (* Fee denominated in basis points: 1 b.p. = 0.01% *)
  let empty_string = ""
  let did = "did"
  let fund = "community" (* @review *)
  
  let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20

  let option2_uint128_value = fun( input: Option( Option Uint128 )) => match input with
    | Some (Some a) => a
    | _ => zero end

  let option_uint128 = fun( input: Uint128 ) =>
    let is_zero = builtin eq input zero in match is_zero with
    | True => None{ Uint128 }
    | False => Some{ Uint128 } input end

  let better_subtract = fun( a: Uint128 ) => fun( b: Uint128 ) =>
    let a_ge_b = uint128_ge a b in match a_ge_b with
      | True => builtin sub a b
      | False => zero end

  let grow: Uint128 -> Uint256 = fun( var : Uint128 ) =>
    let maybe_big = builtin to_uint256 var in match maybe_big with
      | Some big => big
      | None => Uint256 0 end (* should never happen *)

let make_error = fun (error: Error) => fun (version: String) => fun (code: Int32) =>
    let exception = match error with
    | CodeWrongSender    => "WrongSender"
    | CodeDidIsNull      => "DidIsNull"
    | CodeWrongStatus    => "WrongStatus"
    | CodeIsNull         => "ZeroValueOrNull"
    | CodeSameValue      => "SameValue"
    | CodeWrongRecipient => "WrongRecipientForTransfer"
    | CodeIsInsufficient => "InsufficientAmount"
    | CodeNotValid       => "NotValid"
    end in { _exception: exception; contractVersion: version; errorCode: code }

contract Community(
  init_nft: ByStr32,
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20,
      field services: Map String ByStr20 end end end,
  init_rate: Uint128,
  init_factor: Uint128
  )
  with (* Contract constraints *)
    let is_invalid = builtin eq init_nft zeroByStr32 in (* initial domain name must not be null *)
    negb is_invalid
  =>

  field nft_domain: ByStr32 = init_nft
  field pending_domain: ByStr32 = zeroByStr32
  
  field pauser: ByStr32 = init_nft
  field paused: Bool = False
  
  field reserves: Pair Uint128 Uint128 = Pair{ Uint128 Uint128 } zero zero (* S$I & $TYRON *)
  field min_affiliation: Uint128 = Uint128 10000000000000000000 (* S$I 10 *)
  field profit_denom: Uint256 = fee_denom
  field rate: Uint128 = init_rate
  field factor: Uint128 = init_factor (* @review *)
  
  (* DID Services *)
  field services: Map String ByStr20 = Emp String ByStr20

  (* The block number when the last transition occurred *)
  field ledger_time: BNum = BNum 0
  
  (* A monotonically increasing number representing the amount of transitions that have taken place *)
  field tx_number: Uint128 = zero

  (* The smart contract @version *)
  field version: String = "Community.ssiDApp_0.3.0"

procedure ThrowError( err: Error, code: Int32 )
  ver <- version; e = make_error err ver code; throw e end

procedure VerifyOrigin( addr: ByStr20 )
  verified = builtin eq _origin addr; match verified with
    | True => | False => err = CodeWrongSender; code = Int32 -1; ThrowError err code end end

procedure SupportTyron( tyron: Option Uint128 )
  match tyron with
  | None => | Some donation =>
    current_init <-& init.dApp;
    donateDomain = "donate"; get_addr <-& current_init.dns[donateDomain]; addr = option_bystr20_value get_addr;
    accept; msg = let m = { _tag: "AddFunds"; _recipient: addr; _amount: donation } in one_msg m; send msg end end

procedure TyronCommunityFund(id: String)
  txID = builtin concat fund id;
  current_init <-& init.dApp; init_did <-& current_init.implementation;
  get_fee <-& init_did.utility[did][txID]; fee = option_uint128_value get_fee;
  is_zero = builtin eq fee zero; match is_zero with
    | True => | False =>
      get_did <-& current_init.did_dns[fund]; match get_did with
      | Some did_ => msg = let m = { _tag: "AddFunds"; _recipient: did_; _amount: fee } in one_msg m; send msg
      | None => err = CodeDidIsNull; code = Int32 -2; ThrowError err code end end end

procedure RequireContractOwner(
  tyron: Option Uint128,
  tx: String
  )
  id <- nft_domain; current_init <-& init.dApp;
  domain_ = builtin to_string id;
  get_did <-& current_init.did_dns[domain_]; match get_did with
  | None => err = CodeDidIsNull; code = Int32 -3; ThrowError err code
  | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller;
      SupportTyron tyron; TyronCommunityFund tx end end

procedure Timestamp()
  current_block <- &BLOCKNUMBER; ledger_time := current_block;
  latest_tx_number <- tx_number; new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor;
  tx_number := new_tx_number end

procedure RequireNotPaused()
  is_paused <- paused; match is_paused with
    | False => | True => err = CodeWrongStatus; code = Int32 -4; ThrowError err code end end

procedure RequirePaused()
  is_paused <- paused; match is_paused with
    | True => | False => err = CodeWrongStatus; code = Int32 -5; ThrowError err code end end

procedure ThrowIfNullHash( input: ByStr32 )
  is_null = builtin eq input zeroByStr32; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -6; ThrowError err code end end

procedure ThrowIfSameDomain(
  a: ByStr32,
  b: ByStr32
  )
  is_same = builtin eq a b; match is_same with
    | False => | True => err = CodeSameValue; code = Int32 -7; ThrowError err code end end

procedure ThrowIfZero( val: Uint128 )
  is_null = builtin eq zero val; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -8; ThrowError err code end end

procedure ThrowIfNullAddr( addr: ByStr20 )
  is_null = builtin eq addr zeroByStr20; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -9; ThrowError err code end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
    | False => | True => err = CodeSameValue; code = Int32 -10; ThrowError err code end end

procedure ThrowIfSameVal(
  a: Uint128,
  b: Uint128
  )
  is_self = builtin eq a b; match is_self with
    | False => | True => err = CodeSameValue; code = Int32 -10; ThrowError err code end end (* @review codes *)

procedure FetchServiceAddr( id: String )
  current_init <-& init.dApp;
  initId = "init"; get_did <-& current_init.did_dns[initId]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -11; ThrowError err code
    | Some did_ =>
      get_service <-& did_.services[id]; addr = option_bystr20_value get_service;
      services[id] := addr end end

procedure IsPauser()
  id <- pauser; current_init <-& init.dApp;
  domain_ = builtin to_string id;
  get_did <-& current_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -3; ThrowError err code
    | Some did_ =>
        controller <-& did_.controller; VerifyOrigin controller end end

procedure IsSufficient(
  value: Uint128,
  amount: Uint128
  )
  is_sufficient = uint128_ge value amount; match is_sufficient with
    | True => | False => err = CodeIsInsufficient; code = Int32 -3; ThrowError err code end end

transition UpdateDomain(
  domain: ByStr32,
  tyron: Option Uint128
  )
  RequireNotPaused; ThrowIfNullHash domain;
  tag = "UpdateDomain"; RequireContractOwner tyron tag;
  id <- nft_domain; ThrowIfSameDomain id domain;
  current_init <-& init.dApp; domain_ = builtin to_string domain;
  get_did <-& current_init.did_dns[domain_]; match get_did with
    | Some did_ => pending_domain := domain
    | None => err = CodeDidIsNull; code = Int32 -12; ThrowError err code end;
  Timestamp end

transition AcceptPendingDomain()
  RequireNotPaused; domain <- pending_domain;
  current_init <-& init.dApp; domain_ = builtin to_string domain;
  get_did <-& current_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -13; ThrowError err code
    | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller;
      nft_domain := domain; pending_domain := zeroByStr32 end;
  Timestamp end

transition UpdatePauser(
  domain: ByStr32,
  tyron: Option Uint128
  )
  RequireNotPaused;
  tag = "UpdatePauser"; RequireContractOwner tyron tag;
  current_pauser <- pauser; ThrowIfSameDomain current_pauser domain;
  pauser := domain;
  e = { _eventname: "PauserUpdated";
    newPauser: domain }; event e;
  Timestamp end

transition Pause()
  IsPauser; RequireNotPaused; paused := true; (* @review use of pauser *)
  ver <- version; e = { _eventname: "SSIDApp-Paused";
    version: ver;
    pauser: _sender }; event e;
  Timestamp end

transition Unpause()
  IsPauser; RequirePaused; paused := false;
  ver <- version; e = { _eventname: "SSIDApp-Unpaused";
    version: ver;
    pauser: _sender }; event e;
  Timestamp end

transition UpdateMinAffiliation(
  val: Uint128,
  tyron: Option Uint128
  )
  RequireNotPaused; ThrowIfZero val;
  tag = "UpdateMinAffiliation"; RequireContractOwner tyron tag;
  current <- min_affiliation; ThrowIfSameVal current val; min_affiliation := val;
  ver <- version; e = { _eventname: "SSIDApp-MinAffiliationUpdated";
    value: val;
    version: ver;
    sender: _sender }; event e;
  Timestamp end

transition UpdateProfitDenom(
  val: Uint256,
  tyron: Option Uint128
  )
  RequireNotPaused;
  tag = "UpdateProfitDenom"; RequireContractOwner tyron tag;
  verified = uint256_le val fee_denom; match verified with
    | True => | False => err = CodeNotValid; code = Int32 -3; ThrowError err code end;
  profit_denom := val;
  e = { _eventname: "FeeUpdated"; (* review *)
    newValue: val }; event e;
  Timestamp end

transition UpdateFactor(
  val: Uint128,
  tyron: Option Uint128
  )
  RequireNotPaused; ThrowIfZero val;
  tag = "UpdateFactor"; RequireContractOwner tyron tag;
  current <- factor; ThrowIfSameVal current val; factor := val;
  e = { _eventname: "FactorUpdated";
    newValue: val }; event e;
  Timestamp end

procedure ThrowIfExpired( deadline_block: BNum )
  current_block <- & BLOCKNUMBER;
  verified = builtin blt current_block deadline_block; match verified with
  | True => | False => e = { _exception : "RequestExpired" }; throw e end end

transition JoinTYRONCommunity(
  amount: Uint128,
  deadline_block: BNum
  )
  RequireNotPaused; ThrowIfExpired deadline_block;
  ThrowIfZero amount; current_min <- min_affiliation;
  verified = uint128_ge amount current_min; match verified with
  | True => | False => err = CodeIsInsufficient; code = Int32 -3; ThrowError err code end;
  Timestamp end