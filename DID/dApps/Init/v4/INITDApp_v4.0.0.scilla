(* v4
INIT DAPP: SSI Initialization & DNS <> Proxy smart contract
Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2022. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

import BoolUtils

library Init
  type Operation =
    | Add
    | Sub
  
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  type Caller =
    | Controller
    | Implementation
  
  let controller_ = Controller
  let implementation_ = Implementation
  let donateDomain = "donate"
  let donateHash = 0x0000000000000000000000000000000000000000000000000000000000000000 (* @xalkan *)
  let donateAddr = 0xc88ab766cdbe10e5961026633ad67c57f2e4aaf1 (* @xalkan *)
  let zero = Uint256 0
  let one = Uint256 1
  let zeroByStr20 = 0x0000000000000000000000000000000000000000
  let add_operation = Add
  let sub_operation = Sub
  let zeroByStr32 = 0x0000000000000000000000000000000000000000000000000000000000000000
  let empty_string = ""
  
  let get_bal = fun ( maybe_bal: Option Uint256 ) =>
    match maybe_bal with
    | None => zero
    | Some bal => bal end

contract Init(
  initial_contract_owner: ByStr32,
  initial_base_uri: String,
  name: String,
  symbol: String,
  initialContractOwnerDid: ByStr20 with contract
    field did: String,
    field nft_username: ByStr32,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map ByStr32 ByStr20,
    field deadline: Uint128 end,
  init_: ByStr20 with contract 
    field nft_username: String,
    field paused: Bool,
    field utility: Map String Map String Uint128 end,
  init_gamma: ByStr20 with contract 
    field nft_username: ByStr32,
    field paused: Bool,
    field utility: Map String Map String Uint128 end,
  initDns: Map String ByStr20,
  initRecords: Map ByStr32 ByStr20,
  initDidDns: Map String ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end,
  initDidRecords: Map ByStr32 ByStr20 with contract
    field did: String,
    field nft_username: ByStr32,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map ByStr32 ByStr20,
    field deadline: Uint128 end
  )
  with
    (* `initial_contract_owner` must not be zero *)
    let is_contract_owner_invalid = builtin eq initial_contract_owner zeroByStr32 in
    (* `name` must not be an empty string *)
    let is_name_invalid = builtin eq name empty_string in
    (* `symbol` must not be an empty string *)
    let is_symbol_invalid = builtin eq symbol empty_string in
    (* Check if any parameter is invalid *)
    let is_name_or_symbol_invalid = orb is_name_invalid is_symbol_invalid in

    let is_invalid = orb is_contract_owner_invalid is_name_or_symbol_invalid in
    negb is_invalid
    =>
  field token_name: String = name
  field token_symbol: String = symbol
  field base_uri: String = initial_base_uri
  field token_uris: Map ByStr32 String = Emp ByStr32 String
  field token_id_count: Uint256 = Uint256 0
  
  (* Mapping from token owner to the number of existing tokens *)
  field balances: Map ByStr20 Uint256 = Emp ByStr20 Uint256
  
  (* Mapping from token ID to a spender *)
  field spenders: Map Uint256 ByStr20 = Emp Uint256 ByStr20
  
  (* Mapping from token owner to operators authorized by the token owner *)
  field operators: Map ByStr20 (Map ByStr20 Bool) = Emp ByStr20 (Map ByStr20 Bool)
  
  field implementation: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field utility: Map String Map String Uint128 end = init_
  
  field implementation_: ByStr20 with contract
    field nft_username: ByStr32,
    field paused: Bool,
    field utility: Map String Map String Uint128 end = init_gamma

  (* DNS records @key: NFT Username @value: address *)
  (*field dns: Map String ByStr20 = builtin put initDns donateDomain donateAddr*)
  field dns: Map ByStr32 ByStr20 = builtin put initRecords donateHash donateAddr
  (*field did_dns: Map String ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end = initDidDns*)
  field did_dns: Map ByStr32 ByStr20 with contract
    field did: String,
    field nft_username: ByStr32,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map ByStr32 ByStr20,
    field deadline: Uint128 end = builtin put initDidRecords initial_contract_owner initialContractOwnerDid
  field version: String = "INITDApp_v4.0.0" (* @xalkan *)

procedure VerifyCaller( caller: Caller )
  current_impl <- implementation_;
  is_paused <-& current_impl.paused; match is_paused with
  | False => | True => e = { _exception : "INITDApp-PausedError" }; throw e end;
  match caller with
  | Controller =>
      current_username <-& current_impl.nft_username;
      get_did <- did_dns[current_username]; match get_did with
      | None => e = { _exception : "INITDApp-DidIsNull" }; throw e
      | Some did_ =>
          current_controller <-& did_.controller;
          verified = builtin eq _origin current_controller; match verified with
          | True => | False => e = { _exception : "INITDApp-NotContractOwnerError" }; throw e end end
  | Implementation =>
      verified = builtin eq _sender current_impl; match verified with
      | True => | False => e = { _exception : "INITDApp-WrongCaller/Implementation" }; throw e end end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
    | False => | True => e = { _exception : "INITDApp-SameAddress" }; throw e end end

procedure SetTokenURI(
  token_id: ByStr32,
  token_uri: String
  )
  is_empty_string = builtin eq token_uri empty_string; match is_empty_string with 
    | True => | False => token_uris[token_id] := token_uri end end

(* Sets `uri` as the base URI. *)
(* @Requirements: *)
(* - `_origin` must be the contract owner. Otherwise, it must throw `NotContractOwnerError` *)
transition SetBaseURI(uri: String)
  VerifyCaller controller_; base_uri := uri;
  e = { _eventname: "SetBaseURI";
    base_uri: uri }; event e;
  msg = let m = { _tag: "ZRC6_SetBaseURICallback"; _recipient: _origin; _amount: Uint128 0;
    base_uri: uri } in one_msg m; send msg end

transition UpdateImplementation(
  addr: ByStr20 with contract
    field nft_username: ByStr32,
    field paused: Bool,
    field utility: Map String Map String Uint128,
    field did: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map ByStr32 ByStr20,
    field deadline: Uint128 end
  )
  VerifyCaller controller_; current_impl <- implementation; ThrowIfSameAddr current_impl addr;
  implementation_ := addr; initId = let id = "init" in builtin sha256hash id;
  dns[initId] := addr; did_dns[initId] := addr;
  e = { _eventname: "ImplementationUpdated";
    newImplementation: addr }; event e end

procedure RequireValidDestination( to: ByStr20 )
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zeroByStr20 = builtin eq to zeroByStr20; match is_zeroByStr20 with
    | False => | True => e = { _exception : "INITDApp-ZeroAddressDestinationError" }; throw e end;
  is_this_address = builtin eq to _this_address; match is_this_address with
    | False => | True => e = { _exception : "INITDApp-ThisAddressDestinationError" }; throw e end end

procedure UpdateBalance(
  operation: Operation,
  address: ByStr20
  )
  match operation with
  | Add =>
    maybe_count <- balances[address];
    new_count = 
      let cur_count = get_bal maybe_count in
      (* if overflow occurs, it throws CALL_CONTRACT_FAILED *)
      builtin add cur_count one; balances[address] := new_count
  | Sub =>
    maybe_count <- balances[address];
    new_count = 
      let cur_count = get_bal maybe_count in
      (* if underflow occurs, it throws CALL_CONTRACT_FAILED *)
      builtin sub cur_count one; balances[address] := new_count end end

(* @Requirements: *)
(* - `to` must not be the zero address. Otherwise, it must throw `ZeroAddressDestinationError` *)
(* - `to` must not be `_this_address`. Otherwise, it must throw `ThisAddressDestinationError` *)
procedure MintToken(
  to: ByStr20,
  token_id: ByStr32
  )
  RequireValidDestination to;
  current_token_id_count <- token_id_count; new_token_id_count = builtin add current_token_id_count one;
  token_id_count := new_token_id_count;

  (* mint token *)
  dns[token_id] := to;
  
  (* add one to the token owner balance *)
  UpdateBalance add_operation to end

(* Mints a token with a specific `token_uri` and transfers it to `addr`. *)
(* Pass empty string to `token_uri` to use the concatenated token URI. i.e. `<base_uri><token_id>`. *)
(* @param: addr - Address of the token recipient *)
(* @param: token_uri - URI of a token *)
(* @Requirements: *)
(* - The contract must not be paused. Otherwise, it must throw `PausedError` *)
transition ZRC6_MintCallback(
  to: ByStr20,
  token_id: ByStr32,
  token_uri: String
  )
  VerifyCaller implementation_; MintToken to token_id;
  SetTokenURI token_id token_uri;
  e = { _eventname: "Mint";
    to: to;
    token_id: token_id;
    token_uri: token_uri
  }; event e;
  (* @xalkan add in DIDxWallet *)
  msg = let m = { _tag: "ZRC6_RecipientAcceptMint"; _recipient: to; _amount: Uint128 0 } in one_msg m; send msg end

transition NftDidCallBack(
  username: ByStr32,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: ByStr32,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map ByStr32 ByStr20,
    field deadline: Uint128 end
  )
  VerifyCaller implementation_; did_dns[username] := dID end

transition BuyNftUsername(
  id: String,
  username: String,
  addr: ByStr20,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end,
  token_uri: String
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "BuyNftUsername"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    addr: addr;
    dID: dID;
    token_uri: token_uri } in one_msg m; send msg end

transition UpdateNftDid(
  id: String,
  username: ByStr32,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: ByStr32,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map ByStr32 ByStr20,
    field deadline: Uint128 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "UpdateNftDid"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    dID: dID } in one_msg m; send msg end

transition TransferNftUsername(
  id: String,
  username: ByStr32,
  addr: ByStr20,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: ByStr32,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map ByStr32 ByStr20,
    field deadline: Uint128 end,
  token_uri: String
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "TransferNftUsername"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    addr: addr;
    addr_: _sender;
    dID: dID;
    token_uri: token_uri } in one_msg m; send msg end