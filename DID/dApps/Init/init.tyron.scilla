(* v2.5.0
init.tyron: SSI Initialization & DNS DApp <> Proxy smart contract
Self-Sovereign Identity Protocol
Copyright (C) Tyron Pungtas and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

library Init
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg
    
  type Error =
    | CodeWrongStatus
    | CodeWrongCaller
    | CodeNotValid
    | CodeSameAddress

  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeWrongStatus            => Int32 0
    | CodeWrongCaller            => Int32 -1
    | CodeNotValid               => Int32 -2
    | CodeSameAddress            => Int32 -3
    end in { _exception: "Error"; code: result }
  
  type Caller =
    | Controller
    | Implementation
  
  let controller_ = Controller
  let implementation_ = Implementation
  let init = "init"

contract Init( init_controller: ByStr20 with contract 
  field nft_username: String,
  field services: Map String ByStr20,
  field paused: Bool end
  )
  field implementation: ByStr20 with contract
    field nft_username: String,
    field services: Map String ByStr20,
    field paused: Bool end = init_controller

  (* DNS records @key: NFT Username @value: address *)
  field dns: Map String ByStr20 = let emp = Emp String ByStr20 in builtin put emp init init_controller
  field guardians: Map String ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33 end =
      Emp String ByStr20 with contract
        field controller: ByStr20,
        field verification_methods: Map String ByStr33 end

procedure ThrowError( err: Error )
  e = make_error err; throw e end
  
procedure VerifyCaller( caller: Caller )
  current_impl <- implementation;
  is_paused <-& current_impl.paused; match is_paused with
  | False => | True => err = CodeWrongStatus; ThrowError err end;
  match caller with
  | Controller =>
      current_username <-& current_impl.nft_username;
      get_addr <- guardians[current_username]; match get_addr with
      | None => err = CodeNotValid; ThrowError err
      | Some addr =>
          current_controller <-& addr.controller;
          verified = builtin eq _origin current_controller; match verified with
          | True => | False => err = CodeWrongCaller; ThrowError err end end
  | Implementation =>
      verified = builtin eq _sender current_impl; match verified with
      | True => | False => err = CodeWrongCaller; ThrowError err end end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
  | False => | True => err = CodeSameAddress; ThrowError err end end

transition UpdateImplementation(
  addr: ByStr20 with contract
    field nft_username: String,
    field services: Map String ByStr20,
    field paused: Bool end
  )
  VerifyCaller controller_; current_impl <- implementation; ThrowIfSameAddr current_impl addr;
  implementation := addr; dns[init] := addr;
  e = { _eventname: "ImplementationUpdated";
    newImplementation: addr }; event e end

transition NFTUsernameCallBack(
  username: String,
  addr: ByStr20
  )
  VerifyCaller implementation_; dns[username] := addr end

transition BuyNFTUsername(
  username: String,
  guardianship: Option ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "BuyNFTUsername"; _recipient: current_impl; _amount: _amount;
    username: username;
    addr: _sender;
    guardianship: guardianship } in one_msg m; send msg end

transition NFTGuardianshipCallBack(
  username: String,
  addr: ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33 end
  )
  VerifyCaller implementation_; guardians[username] := addr end
  
transition UpdateGuardianship(
  username: String,
  addr: ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "UpdateGuardianship"; _recipient: current_impl; _amount: _amount;
    username: username;
    addr: _sender;
    guardian: addr } in one_msg m; send msg end

transition RemoveGuardianshipCallBack( username: String )
  VerifyCaller implementation_; delete guardians[username] end

transition TransferNFTUsername(
  username: String,
  newAddr: ByStr20,
  guardianship: Option ByStr20 with contract
    field controller: ByStr20,
    field verification_methods: Map String ByStr33 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "TransferNFTUsername"; _recipient: current_impl; _amount: _amount;
    username: username;
    addr: _sender;
    newAddr: newAddr;
    guardianship: guardianship } in one_msg m; send msg end