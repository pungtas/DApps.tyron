(* v3.5.0
INIT DAPP: SSI Initialization & DNS <> Proxy smart contract
Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2022. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

library Init
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  type Caller =
    | Controller
    | Implementation
  
  let controller_ = Controller
  let implementation_ = Implementation
  let donateDApp = "donate"
  let donateAddr = 0xc88ab766cdbe10e5961026633ad67c57f2e4aaf1   (* @todo *)

contract Init(
  name: String,
  nameDid: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end,
  init_: ByStr20 with contract 
    field nft_username: String,
    field paused: Bool,
    field utility: Map String Map String Uint128 end,
  initDns: Map String ByStr20,
  initDidDns: Map String ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  field implementation: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field utility: Map String Map String Uint128 end = init_

  (* DNS records @key: NFT Username @value: address *)
  field dns: Map String ByStr20 = let map = builtin put initDns name nameDid in builtin put map donateDApp donateAddr
  field did_dns: Map String ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end = let map = builtin put initDidDns name nameDid in builtin put map donateDApp nameDid

  field version: String = "init----3.5.0" (* @todo *)

procedure VerifyCaller( caller: Caller )
  current_impl <- implementation;
  is_paused <-& current_impl.paused; match is_paused with
  | False => | True => e = { _exception : "init.tyron-WrongStatus" }; throw e end;
  match caller with
  | Controller =>
      current_username <-& current_impl.nft_username;
      get_did <- did_dns[current_username]; match get_did with
      | None => e = { _exception : "init.tyron-DidIsNull" }; throw e
      | Some did_ =>
          current_controller <-& did_.controller;
          verified = builtin eq _origin current_controller; match verified with
          | True => | False => e = { _exception : "init.tyron-WrongCaller/Controller" }; throw e end end
  | Implementation =>
      verified = builtin eq _sender current_impl; match verified with
      | True => | False => e = { _exception : "init.tyron-WrongCaller/Implementation" }; throw e end end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
  | False => | True => e = { _exception : "init.tyron-SameAddress" }; throw e end end

transition UpdateImplementation(
  addr: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field utility: Map String Map String Uint128,
    field did: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  VerifyCaller controller_; current_impl <- implementation; ThrowIfSameAddr current_impl addr;
  implementation := addr; initDApp = "init"; dns[initDApp] := addr; did_dns[initDApp] := addr;
  e = { _eventname: "ImplementationUpdated";
    newImplementation: addr }; event e end

transition NftUsernameCallBack(
  username: String,
  addr: ByStr20
  )
  VerifyCaller implementation_; dns[username] := addr end

transition NftDidCallBack(
  username: String,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  VerifyCaller implementation_; did_dns[username] := dID end

transition BuyNftUsername(
  id: String,
  username: String,
  addr: ByStr20,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "BuyNftUsername"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    addr: addr;
    dID: dID } in one_msg m; send msg end

transition UpdateNftDid(
  id: String,
  username: String,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "UpdateNftDid"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    dID: dID } in one_msg m; send msg end

transition TransferNftUsername(
  id: String,
  username: String,
  addr: ByStr20,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "TransferNftUsername"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    addr: addr;
    dID: dID } in one_msg m; send msg end