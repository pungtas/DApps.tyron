(* v3.5.0
init.tyron: SSI Initialization & DNS DApp <> Proxy smart contract
Self-Sovereign Identity Protocol
Copyright (C) Tyron Mapu Community Interest Company and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

library Init
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  type Caller =
    | Controller
    | Implementation
  
  let controller_ = Controller
  let implementation_ = Implementation
  let donateDApp = "donate"
  let donateAddr = 0xc88ab766cdbe10e5961026633ad67c57f2e4aaf1   (* @todo *)

contract Init(
  name: String,
  nameDid: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end,
  init_: ByStr20 with contract 
    field nft_username: String,
    field paused: Bool,
    field utility: Map String Map String Uint128 end,
  initDns: Map String ByStr20,
  initDidDns: Map String ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  field implementation: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field utility: Map String Map String Uint128 end = init_

  (* DNS records @key: NFT Username @value: address *)
  field dns: Map String ByStr20 = let map = builtin put initDns name nameDid in builtin put map donateDApp donateAddr
  field did_dns: Map String ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end = let map = builtin put initDidDns name nameDid in builtin put map donateDApp nameDid

  field version: String = "init----3.5.0" (* @todo *)

procedure VerifyCaller( caller: Caller )
  current_impl <- implementation;
  is_paused <-& current_impl.paused; match is_paused with
  | False => | True => e = { _exception : "init.tyron-WrongStatus" }; throw e end;
  match caller with
  | Controller =>
      current_username <-& current_impl.nft_username;
      get_did <- did_dns[current_username]; match get_did with
      | None => e = { _exception : "init.tyron-DidIsNull" }; throw e
      | Some did_ =>
          current_controller <-& did_.controller;
          verified = builtin eq _origin current_controller; match verified with
          | True => | False => e = { _exception : "init.tyron-WrongCaller/Controller" }; throw e end end
  | Implementation =>
      verified = builtin eq _sender current_impl; match verified with
      | True => | False => e = { _exception : "init.tyron-WrongCaller/Implementation" }; throw e end end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
  | False => | True => e = { _exception : "init.tyron-SameAddress" }; throw e end end

transition UpdateImplementation(
  addr: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field utility: Map String Map String Uint128,
    field did: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  VerifyCaller controller_; current_impl <- implementation; ThrowIfSameAddr current_impl addr;
  implementation := addr; initDApp = "init"; dns[initDApp] := addr; did_dns[initDApp] := addr;
  e = { _eventname: "ImplementationUpdated";
    newImplementation: addr }; event e end

transition NftUsernameCallBack(
  username: String,
  addr: ByStr20
  )
  VerifyCaller implementation_; dns[username] := addr end

transition NftDidCallBack(
  username: String,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  VerifyCaller implementation_; did_dns[username] := dID end

transition BuyNftUsername(
  id: String,
  username: String,
  addr: ByStr20,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "BuyNftUsername"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    addr: addr;
    dID: dID } in one_msg m; send msg end

transition UpdateNftDid(
  id: String,
  username: String,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "UpdateNftDid"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    dID: dID } in one_msg m; send msg end

transition TransferNftUsername(
  id: String,
  username: String,
  addr: ByStr20,
  dID: ByStr20 with contract
    field did: String,
    field nft_username: String,
    field controller: ByStr20,
    field version: String,
    field verification_methods: Map String ByStr33,
    field services: Map String ByStr20,
    field social_guardians: Map ByStr32 Bool,
    field did_domain_dns: Map String ByStr20,
    field deadline: Uint128 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "TransferNftUsername"; _recipient: current_impl; _amount: _amount;
    id: id;
    username: username;
    addr: addr;
    dID: dID } in one_msg m; send msg end