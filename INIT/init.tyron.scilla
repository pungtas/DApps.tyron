(* v2.2.0
init.tyron: SSI initialization & DNS <> Proxy smart contract
Self-Sovereign Identity Protocol.
Copyright (C) Tyron Pungtas and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

library Init
  let one_msg = fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  type Error =
    | CodeWrongCaller
    | CodeWrongStatus
 
  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeWrongCaller            => Int32 -1
    | CodeWrongStatus            => Int32 -2
    end in { _exception: "Error"; code: result }

contract Init( init_controller: ByStr20 with contract 
  field controller: ByStr20,
  field services: Map String ByStr20,
  field paused: Bool,
  field utility: Map String Map String Uint128 end
  )
  field implementation: ByStr20 with contract
    field controller: ByStr20,
    field services: Map String ByStr20,
    field paused: Bool,
    field utility: Map String Map String Uint128 end = init_controller

  (* DNS records @key: NFT username @value: address *)
  field dns: Map String ByStr20 = Emp String ByStr20
  field guardians: Map String ByStr20 with contract field verification_methods: Map String ByStr33 end = Emp String ByStr20 with contract field verification_methods: Map String ByStr33 end

procedure ThrowError( err: Error )
  e = make_error err; throw e end

procedure VerifyController()
  current_implementation <- implementation;
  controller <-& current_implementation.controller; is_paused <-& current_implementation.paused;
  verified = builtin eq _sender controller; match verified with
  | True => | False => err = CodeWrongCaller; ThrowError err end;
  match is_paused with
  | False => | True => err = CodeWrongStatus; ThrowError err end end

transition UpdateImplementation( addr: ByStr20 with contract field controller: ByStr20, field services: Map String ByStr20, field paused: Bool, field utility: Map String Map String Uint128 end )
  VerifyController; implementation := addr; init_ = "init"; dns[init_] := addr;
  e = { _eventname: "ImplementationUpdated";
    new_implementation: addr }; event e end

procedure VerifyImplementation()
  current_impl <- implementation;
  verified = builtin eq _sender current_impl; match verified with
  | True => | False => err = CodeWrongCaller; ThrowError err end end

transition NFTUsernameCallBack(
  username: String,
  addr: ByStr20
  )
  VerifyImplementation; dns[username] := addr end

transition BuyNFTUsername(
  username: String,
  guardianship: Option ByStr20 with contract field verification_methods: Map String ByStr33 end,
  id: String
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "BuyNFTUsername"; _recipient: current_impl; _amount: _amount;
    username: username;
    addr: _sender;
    guardianship: guardianship;
    id: id } in one_msg m; send msg end

transition NFTGuardianshipCallBack(
  username: String,
  addr: ByStr20 with contract field verification_methods: Map String ByStr33 end
  )
  VerifyImplementation; guardians[username] := addr end
  
transition UpdateGuardianship(
  username: String,
  addr: ByStr20 with contract field verification_methods: Map String ByStr33 end
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "UpdateGuardianship"; _recipient: current_impl; _amount: _amount;
    username: username;
    addr: _sender;
    guardian: addr } in one_msg m; send msg end

transition RemoveGuardianshipCallBack( username: String )
  VerifyImplementation; delete guardians[username] end

transition TransferNFTUsername(
  username: String,
  newAddr: ByStr20,
  guardianship: Option ByStr20 with contract field verification_methods: Map String ByStr33 end,
  id: String
  )
  current_impl <- implementation;
  accept; msg = let m = { _tag: "TransferNFTUsername"; _recipient: current_impl; _amount: _amount;
    username: username;
    addr: _sender;
    newAddr: newAddr;
    guardianship: guardianship;
    id: id } in one_msg m; send msg end