(*
  INIT.tyron: SSI initialization & DNS smart contract.
  Tyron Self-Sovereign Identity Protocol.
  Copyright (C) Tyron Pungtas and its affiliates.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
*)

scilla_version 0

library INIT

  let one_msg = fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  let two_msgs = fun( msg1: Message ) => fun( msg2: Message ) =>
    let msgs_tmp = one_msg msg2 in Cons{ Message } msg1 msgs_tmp

  type Error =
    | CodeDomainTaken
    | CodeNotProxy
    | CodeNotRightCaller

  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeDomainTaken            => Int32 -1
    | CodeNotProxy            => Int32 -2
    | CodeNotRightCaller         => Int32 -3
    end in { _exception: "Error"; code: result }
  
  let zero = Uint128 0
  
  type Code =
    | Ssi
    | Did
  
  let option_value = tfun 'A => fun( default: 'A ) => fun( opt_val: Option 'A ) =>
    match opt_val with
    | Some v => v
    | None => default
    end
    
  let option_uint128_value = let f = @option_value Uint128 in f zero

contract INIT(
  initAdmin: ByStr20
  )
  field admin: ByStr20 = initAdmin

  (* SSI.tyron smart-contract code by version
  @key: version
  @value: hex-encoded code *)
  field ssi_code: Map String String = Emp String String
  
  (* DID.tyron smart-contract code by version
  @key: version
  @value: hex-encoded code *)
  field did_code: Map String String = Emp String String
  
  (* DNS records
  @key: SsiDomain (e.g. ".did", ".agent", ".mapu")
  @value: Map of
    @key: domain name
    @value: address *)
  field dns: Map String (Map String ByStr20) = Emp String (Map String ByStr20)

  (* Proxy and implementation addresses
  @key: implementation address
  @value: proxy address *)
  field records: Map ByStr20 ByStr20 = Emp ByStr20 ByStr20
  
  (* Implementation records
  @key: proxy address
  @value: implementation address *)
  field implementations: Map ByStr20 ByStr20 = Emp ByStr20 ByStr20

procedure ThrowError(
  err: Error
  )
  e = make_error err; throw e
end

(* Validate address against _sender *)
procedure VerifyCaller(
  check: ByStr20
)
  is_correct = builtin eq check _sender;
  match is_correct with
  | True =>
  | False => err= CodeNotRightCaller; ThrowError err
  end
end

(* Update the admin's address *)
transition UpdateAdmin(
  newAdmin: ByStr20
)
  current_admin <- admin; VerifyCaller current_admin;
  admin := newAdmin
end
  
(* Set the SSI or DID.tyron code *)
transition SetCode(
  tyron: Code,
  version: String,
  code: String
  )
  current_admin <- admin; VerifyCaller current_admin;
  match tyron with
    | Ssi =>
        ssi_code[version] := code;
        e = {
          _eventname: "SSIcodeUpdated";
          version: version;
          code: code
        }; event e
    | Did =>
        did_code[version] := code;
        e = {
          _eventname: "DIDcodeUpdated";
          version: version;
          code: code
        }; event e
  end
end

(* Set a domain name in the DNS *)
transition SetDomain(
  domain: String,
  username: String
  )
  
  taken <- exists dns[domain][username];
  match taken with
  | True => err = CodeDomainTaken; ThrowError err
  | False => 
      accept;
      (* to-do payment *)
      dns[domain][username] := _sender
  end
end

(* Sets the token name, proxy address and implementation address of a token *)
transition SetRecord(
  implAddr: ByStr20,
  proxyAddr: ByStr20
  )
  current_admin <- admin; VerifyCaller current_admin;
  records[implAddr] := proxyAddr;
  e = {
    _eventname: "RecordUpdated";
    implementationAddress: implAddr;
    proxyAddress: proxyAddr
  }; event e
end

(* Called by an SSI.tyron to verify implementation-proxy addresses *)
transition VerifyRecord(
  sender: ByStr20,
  did: ByStr20
  )
  proxy_addr <- records[sender];
  match proxy_addr with
  | Some addr =>
      (* PST; to-do: accept payment *)
      msg = let m = {
        _tag: "VerifyRecordCallBack";
        _recipient: _sender;
        _amount: zero;
        did: did;
        implAddr: sender;
        proxyAddr: addr
      } in one_msg m; send msg
  | None => err= CodeNotProxy; ThrowError err
  end
end