(* v3.0.0
tokeni.tyron: Fungible Token DApp <> Implementation smart contract
Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2022. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (“Tyron”) (or Tyron’s licensors) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the “Program”), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the “Resulting Program”) solely for Non-Commercial Use as long as you:
1. give prominent notice (“Notice”) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
“Non-Commercial Use” means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

import IntUtils

library FungibleTokenI
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  let two_msgs =
    fun( msg1: Message ) => fun( msg2: Message ) =>
    let msgs_tmp = one_msg msg2 in Cons{ Message } msg1 msgs_tmp

  let three_msgs =
    fun( msg1: Message ) => fun( msg2: Message ) => fun( msg3: Message ) =>
    let msgs_tmp = two_msgs msg2 msg3 in Cons{ Message } msg1 msgs_tmp

  let four_msgs =
    fun( msg1: Message ) => fun( msg2: Message ) => fun( msg3: Message ) => fun( msg4: Message ) =>
    let msgs_tmp = three_msgs msg2 msg3 msg4 in Cons{ Message } msg1 msgs_tmp

  type Error =
    | CodeNotProxy
    | CodeWrongCaller
    | CodeIsNull
    | CodeSameAddress
    | CodeSameUsername
    | CodeIsPaused
    | CodeNotPaused
    | CodeIsBlocked
    | CodeNotBlocked
    | CodeIsInsufficient

  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeNotProxy               => Int32 0
    | CodeWrongCaller            => Int32 -1
    | CodeIsNull                 => Int32 -2
    | CodeSameAddress            => Int32 -3
    | CodeSameUsername           => Int32 -4
    | CodeIsPaused               => Int32 -5
    | CodeNotPaused              => Int32 -6
    | CodeIsBlocked              => Int32 -7
    | CodeNotBlocked             => Int32 -8
    | CodeIsInsufficient         => Int32 -9
    end in { _exception: "Error"; code: result }

  let zero = Uint128 0
  let true = True
  let false = False
  let zeroByStr20 = 0x0000000000000000000000000000000000000000

  let option_value =
    tfun 'A => fun( default: 'A ) => fun( opt_val: Option 'A ) => match opt_val with
    | Some v => v
    | None => default end

  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20

  let better_subtract =
    fun( a: Uint128 ) => fun( b: Uint128 ) =>
    let a_ge_b = uint128_ge a b in match a_ge_b with
    | True => builtin sub a b
    | False => zero end
  
  type Account =
    | Account of BNum Uint128 Uint128 Uint128

contract FungibleTokenI(
  init_username: String,
  init_controller: ByStr20,
  proxy: ByStr20 with contract 
    field balances: Map ByStr20 Uint128,
    field total_supply: Uint128,
    field allowances: Map ByStr20 ( Map ByStr20 Uint128 ) end,
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field did: String,   (* the W3C decentralized identifier *)
      field nft_username: String,
      field controller: ByStr20,
      field version: String,
      field verification_methods: Map String ByStr33,
      field services: Map String ByStr20,
      field did_domain_dns: Map String ByStr20 end end end
  )
  field nft_username: String = init_username
  field pending_username: String = ""

  field pauser: String = init_username
  field paused: Bool = False
  
  field minter: ByStr20 = init_controller
  
  field lister: String = init_username
  field blocked: Map ByStr20 Bool = Emp ByStr20 Bool
  
  field fund: ByStr20 = init_controller
  field accounts: Map ByStr20 Account = Emp ByStr20 Account
  field lockup_period: Uint128 = Uint128 2900000

  field insurance: ByStr20 = init_controller
  
  field xinit: ByStr20 with contract field dApp: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field did: String,   (* the W3C decentralized identifier *)
      field nft_username: String,
      field controller: ByStr20,
      field version: String,
      field verification_methods: Map String ByStr33,
      field services: Map String ByStr20,
      field did_domain_dns: Map String ByStr20 end end end = init
      
  field version: String = "tokeni--3.0.0" (* @todo *)

procedure SupportTyron( tyron: Option Uint128 )
  match tyron with
  | None => | Some donation =>
      current_init <-& init.dApp; donateDApp = "donate";
      get_addr <-& current_init.dns[donateDApp]; addr = option_bystr20_value get_addr;
      accept; msg = let m = { _tag: "AddFunds"; _recipient: addr; _amount: donation } in one_msg m; send msg end end

procedure ThrowError( err: Error )
  e = make_error err; throw e end

procedure ThrowIfNotProxy()
  verified = builtin eq proxy _sender; match verified with
  | True => | False => err= CodeNotProxy; ThrowError err end end

procedure VerifyController( tyron: Option Uint128 )
  current_username <- nft_username; current_init <-& init.dApp;
  get_did <-& current_init.did_dns[current_username]; match get_did with
  | None => err = CodeIsNull; ThrowError err
  | Some did_ =>
      current_controller <-& did_.controller;
      verified = builtin eq _origin current_controller; match verified with
      | True => | False => err = CodeWrongCaller; ThrowError err end;
      SupportTyron tyron end end

procedure IsPauser()
  current_pauser <- pauser; current_init <-& init.dApp;
  get_did <-& current_init.did_dns[current_pauser]; match get_did with
  | None => err = CodeIsNull; ThrowError err
  | Some did_ =>
      current_controller <-& did_.controller;
      verified = builtin eq _origin current_controller; match verified with
      | True => | False => err = CodeWrongCaller; ThrowError err end end end

procedure IsPaused()
  is_paused <- paused; match is_paused with
  | True => | False => err = CodeNotPaused; ThrowError err end end

procedure IsNotPaused()
  is_paused <- paused; match is_paused with
  | False => | True => err = CodeIsPaused; ThrowError err end end

procedure IsLister()
  current_lister <- lister; current_init <-& init.dApp;
  get_did <-& current_init.did_dns[current_lister]; match get_did with
  | None => err = CodeIsNull; ThrowError err
  | Some did_ =>
      current_controller <-& did_.controller;
      verified = builtin eq _origin current_controller; match verified with
      | True => | False => err = CodeWrongCaller; ThrowError err end end end

procedure IsBlocked( addr: ByStr20 )
  is_blocked <- exists blocked[addr]; match is_blocked with
  | True => | False => err = CodeNotBlocked; ThrowError err end end

procedure IsNotNull( addr: ByStr20 )
  is_null = builtin eq zeroByStr20 addr; match is_null with
  | False => | True => err = CodeIsNull; ThrowError err end end

procedure IsNotBlocked( addr: ByStr20 )
  IsNotNull addr;
  is_blocked <- exists blocked[addr]; match is_blocked with
  | False => | True => err = CodeIsBlocked; ThrowError err end end
  
procedure IsMinter( addr: ByStr20 )
  current_minter <- minter; IsNotBlocked current_minter;
  verified = builtin eq addr current_minter; match verified with
  | True  => | False => err = CodeWrongCaller; ThrowError err end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
  | False => | True => err = CodeSameAddress; ThrowError err end end

procedure IsSufficient(
  value: Uint128,
  amount: Uint128
  )
  is_sufficient = uint128_ge value amount; match is_sufficient with
  | True => | False => err = CodeIsInsufficient; ThrowError err end end

procedure ThrowIfSameName(
  a: String,
  b: String
  )
  is_same = builtin eq a b; match is_same with
  | False => | True => err = CodeSameUsername; ThrowError err end end

transition UpdateUsername(
  username: String,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron;
  current_username <- nft_username; ThrowIfSameName current_username username;
  current_init <-& init.dApp;
  get_did <-& current_init.did_dns[username]; match get_did with
  | None => err = CodeIsNull; ThrowError err
  | Some did_ => pending_username := username end end

transition AcceptPendingUsername()
  IsNotPaused; current_pending <- pending_username;
  current_init <-& init.dApp;
  get_did <-& current_init.did_dns[current_pending]; match get_did with
  | None => err = CodeIsNull; ThrowError err
  | Some did_ =>
      current_controller <-& did_.controller;
      verified = builtin eq _origin current_controller; match verified with
      | True => | False => err = CodeWrongCaller; ThrowError err end;
      nft_username := current_pending end end

transition UpdatePauser(
  username: String,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron;
  current_pauser <- pauser; ThrowIfSameName current_pauser username;
  pauser := username;
  e = { _eventname: "PauserUpdated";
    newPauser: username }; event e end

transition Pause()
  IsNotPaused; IsPauser; paused := true;
  e = { _eventname: "SmartContractPaused";
    pauser: _sender }; event e end

transition Unpause()
  IsPaused; IsPauser; paused := false;
  e = { _eventname: "SmartContractUnpaused";
    pauser: _sender }; event e end
    
transition UpdateMinter(
  addr: ByStr20,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron; IsNotNull addr;
  current_minter <- minter; ThrowIfSameAddr current_minter addr;
  minter:= addr;
  e = { _eventname: "MinterUpdated";
    newMinter: addr }; event e end

transition UpdateLister(
  username: String,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron;
  current_lister <- lister; ThrowIfSameName current_lister username;
  lister:= username;
  e = { _eventname: "ListerUpdated";
    newLister: username }; event e end

transition Block( addr: ByStr20 )
  IsNotPaused; IsLister;
  IsNotBlocked addr; blocked[addr] := true;
  e = { _eventname: "AddressBlocked";
    address: addr;
    lister: _origin }; event e end

transition Unblock( addr: ByStr20 )
  IsNotPaused; IsLister;
  IsBlocked addr; delete blocked[addr];
  e = { _eventname: "AddressUnblocked";
    address: addr;
    lister: _origin }; event e end

transition UpdateFund(
  addr: ByStr20,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron; IsNotNull addr;
  current_fund <- fund; ThrowIfSameAddr current_fund addr;
  fund := addr;
  e = { _eventname: "FundAddressUpdated";
    newFund: addr }; event e end
    
transition UpdateInsurance(
  addr: ByStr20,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron; IsNotNull addr;
  current_insurance <- insurance; ThrowIfSameAddr current_insurance addr;
  insurance := addr;
  e = { _eventname: "InsuranceAddressUpdated";
    newInsurance: addr }; event e end

transition UpdateLockup(
  val: Uint128,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron; lockup_period := val end

transition AddAccount(
  investor: ByStr20,
  amount: Uint128,
  schedule: Uint128,
  start: Uint128,
  tyron: Uint128
  )
  IsNotPaused; tyron_ = Some{ Uint128 } tyron; VerifyController tyron_; current_fund <- fund;
  IsNotBlocked current_fund; IsNotBlocked investor; ThrowIfSameAddr current_fund investor;
  get_fund_bal <-& proxy.balances[current_fund]; fund_bal = option_uint128_value get_fund_bal;
  new_fund_bal = builtin sub fund_bal amount;
  get_investor_bal <-& proxy.balances[investor]; investor_bal = option_uint128_value get_investor_bal;
  new_investor_bal = builtin add investor_bal amount;
  lockup <- lockup_period;
  portion = builtin div amount schedule;
  vest = builtin div lockup schedule;
  current_block <- &BLOCKNUMBER;
  is_now = builtin eq start zero; init_block = match is_now with
  | True => current_block
  | False => builtin badd current_block start end;
  account = Account init_block vest amount portion; accounts[investor] := account;
  msg = let m = { _tag: "TransferCallBack"; _recipient: proxy; _amount: zero;
    originator: current_fund;
    beneficiary: investor;
    originatorBal: new_fund_bal;
    beneficiaryBal: new_investor_bal } in one_msg m; send msg end

procedure IsVested(
  investor: ByStr20,
  bal: Uint128,
  transfer: Uint128
  )
  get_account <- accounts[investor];
  match get_account with
  | None => | Some account =>
      match account with
      | Account next vest amount portion =>
          new = builtin sub bal transfer;
          block <- &BLOCKNUMBER; vested = builtin blt next block;
          match vested with
          | False => IsSufficient new amount
          | True => 
              new_amount = builtin sub amount portion;
              is_zero = builtin eq zero new_amount;
              match is_zero with
              | True => delete accounts[investor]
              | False =>
                  IsSufficient new new_amount;
                  next_ = builtin badd next vest;
                  account = Account next_ vest new_amount portion; accounts[investor] := account end end end end end

transition Mint(
  originator: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy; IsMinter originator; IsNotBlocked beneficiary;
  current_supply <-& proxy.total_supply; new_supply = builtin add current_supply amount;
  get_bal <-& proxy.balances[beneficiary]; bal = option_uint128_value get_bal; new_bal = builtin add bal amount;
  e = { _eventname: "Minted";
    minter: originator;
    beneficiary: beneficiary;
    amount: amount
  }; event e;
  msg_to_proxy = { _tag: "TransmuteCallBack"; _recipient: _sender; _amount: zero;
    beneficiary: beneficiary;
    newBalance: new_bal;
    newSupply: new_supply
  };
  msg_to_minter = { _tag: "MintSuccessCallBack"; _recipient: originator; _amount: zero;
    minter: originator;
    beneficiary: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptMint"; _recipient: beneficiary; _amount: zero;
    minter: originator;
    beneficiary: beneficiary;
    amount: amount
  }; msgs = three_msgs msg_to_proxy msg_to_minter msg_to_beneficiary; send msgs end

transition Transfer(
  originator: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsNotBlocked originator; IsNotNull beneficiary; IsNotBlocked beneficiary; ThrowIfSameAddr originator beneficiary;
  get_originator_bal <-& proxy.balances[originator]; originator_bal = option_uint128_value get_originator_bal;
  IsSufficient originator_bal amount; IsVested originator originator_bal amount;
  new_originator_bal = builtin sub originator_bal amount;
  get_beneficiary_bal <-& proxy.balances[beneficiary]; beneficiary_bal = option_uint128_value get_beneficiary_bal;
  new_beneficiary_bal = builtin add beneficiary_bal amount;
  e = { _eventname: "TransferSuccess";
    originator: originator;
    beneficiary: beneficiary;
    amount: amount }; event e;
  msg_to_proxy = { _tag: "TransferCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    beneficiary: beneficiary;
    originatorBal: new_originator_bal;
    beneficiaryBal: new_beneficiary_bal
  };
  msg_to_originator = { _tag: "TransferSuccessCallBack"; _recipient: originator; _amount: zero;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptTransfer"; _recipient: beneficiary; _amount: zero;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  }; msgs = three_msgs msg_to_proxy msg_to_originator msg_to_beneficiary; send msgs end

transition IncreaseAllowance(
  originator: ByStr20,
  spender: ByStr20,
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsNotBlocked originator; IsNotBlocked spender; ThrowIfSameAddr originator spender;
  get_allowance <-& proxy.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  new_allowance = builtin add allowance amount;
  e = { _eventname: "IncreasedAllowance";
    originator: originator;
    spender: spender;
    newAllowance: new_allowance }; event e;
  msg = let m = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    newAllowance: new_allowance
  } in one_msg m; send msg end

transition DecreaseAllowance(
  originator: ByStr20,
  spender: ByStr20,
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsNotBlocked originator; IsNotBlocked spender; ThrowIfSameAddr originator spender;
  get_allowance <-& proxy.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  new_allowance = better_subtract allowance amount;
  e = { _eventname: "DecreasedAllowance";
    originator: originator;
    spender: spender;
    newAllowance: new_allowance }; event e;
  msg = let m = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    newAllowance: new_allowance
  } in one_msg m; send msg end

transition Burn(
  originator: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsMinter originator; IsNotBlocked beneficiary;
  get_bal <-& proxy.balances[beneficiary]; bal = option_uint128_value get_bal;
  IsSufficient bal amount; IsVested beneficiary bal amount;
  get_allowance <-& proxy.allowances[beneficiary][originator]; allowance = option_uint128_value get_allowance;
  IsSufficient allowance amount;
  new_bal = builtin sub bal amount; new_allowance = builtin sub allowance amount;
  current_supply <-& proxy.total_supply; new_supply = builtin sub current_supply amount;
  e = { _eventname: "Burnt";
    minter: originator;
    beneficiary: beneficiary;
    amount: amount
  }; event e;
  msg_to_proxy = { _tag: "TransmuteCallBack"; _recipient: _sender; _amount: zero;
    beneficiary: beneficiary;
    newBalance: new_bal;
    newSupply: new_supply
  };
  msg_to_proxy_allowance = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: beneficiary;
    spender: originator;
    newAllowance: new_allowance
  };
  msg_to_minter = { _tag: "BurnSuccessCallBack"; _recipient: originator; _amount: zero;
    minter: originator;
    beneficiary: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptBurn"; _recipient: beneficiary; _amount: zero;
    minter: originator;
    beneficiary: beneficiary;
    amount: amount
  }; msgs = four_msgs msg_to_proxy msg_to_proxy_allowance msg_to_minter msg_to_beneficiary; send msgs end

transition TransferFrom(
  originator: ByStr20,
  spender: ByStr20,
  beneficiary: ByStr20, 
  amount: Uint128
  )
  IsNotPaused; ThrowIfNotProxy;
  IsNotBlocked originator; IsNotBlocked spender; IsNotBlocked beneficiary; ThrowIfSameAddr originator beneficiary;
  get_originator_bal <-& proxy.balances[originator]; originator_bal = option_uint128_value get_originator_bal;
  IsSufficient originator_bal amount; IsVested originator originator_bal amount;
  get_allowance <-& proxy.allowances[originator][spender]; allowance = option_uint128_value get_allowance;
  IsSufficient allowance amount;
  get_beneficiary_bal <-& proxy.balances[beneficiary]; beneficiary_bal = option_uint128_value get_beneficiary_bal;
  new_originator_bal = builtin sub originator_bal amount; new_allowance = builtin sub allowance amount; new_beneficiary_bal = builtin add beneficiary_bal amount;
  e = { _eventname: "TransferFromSuccess";
    originator: originator;
    spender: spender;
    beneficiary: beneficiary;
    amount: amount }; event e;
  msg_to_proxy_balances = { _tag: "TransferCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    beneficiary: beneficiary;
    originatorBal: new_originator_bal;
    beneficiaryBal: new_beneficiary_bal
  };
  msg_to_proxy_allowance = { _tag: "AllowanceCallBack"; _recipient: _sender; _amount: zero;
    originator: originator;
    spender: spender;
    newAllowance: new_allowance
  };
  msg_to_spender = { _tag: "TransferFromSuccessCallBack"; _recipient: spender; _amount: zero;
    initiator: spender;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptTransferFrom"; _recipient: beneficiary; _amount: zero;
    initiator: spender;
    sender: originator;
    recipient: beneficiary;
    amount: amount
  }; msgs = four_msgs msg_to_proxy_balances msg_to_proxy_allowance msg_to_spender msg_to_beneficiary; send msgs end

transition Recalibrate(
  val: Uint128,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron; current_insurance <- insurance;
  get_insurance_bal <-& proxy.balances[current_insurance]; insurance_bal = option_uint128_value get_insurance_bal;
  new_insurance_bal = builtin sub insurance_bal val;
  msg = let m = { _tag: "TransferCallBack"; _recipient: proxy; _amount: zero;
    originator: current_insurance;
    beneficiary: current_insurance;
    originatorBal: new_insurance_bal;
    beneficiaryBal: new_insurance_bal } in one_msg m; send msg end

transition UpdateTreasury(
  old: ByStr20,
  new: ByStr20,
  tyron: Option Uint128
  )
  IsNotPaused; VerifyController tyron;
  get_old_bal <-& proxy.balances[old]; old_bal = option_uint128_value get_old_bal;
  get_new_bal <-& proxy.balances[new]; new_bal = option_uint128_value get_new_bal;
  new_bal = builtin add old_bal new_bal;
  msg = let m = { _tag: "TransferCallBack"; _recipient: proxy; _amount: zero;
    originator: old;
    beneficiary: new;
    originatorBal: zero;
    beneficiaryBal: new_bal } in one_msg m; send msg end