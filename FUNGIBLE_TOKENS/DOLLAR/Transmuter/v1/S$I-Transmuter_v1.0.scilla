(* transmuter.ssi DApp v1
Self-Sovereign Identity Dollar (S$I) Transmuter
Tyron SSI: Self-Sovereign Identity (SSI) Protocol
Copyright (c) 2023 Tyron SSI DAO: Tyron Mapu Community Interest Company (CIC) and its affiliates.
All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron Mapu CIC) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron Mapu CIC; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron Mapu CIC in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron Mapu CIC or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils IntUtils PairUtils

library Transmuter
  type Error =
    | CodeWrongSender
    | CodeDidIsNull
    | CodeWrongStatus
    | CodeIsNull
    | CodeSameValue
    | CodeNotValid

  let true = True
  let false = False
  let zero = Uint128 0
  let zero_256 = Uint256 0
  let zero_addr = 0x0000000000000000000000000000000000000000
  let zero_hash = 0x0000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr33 = 0x000000000000000000000000000000000000000000000000000000000000000000
  let zeroByStr64 = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  let one = Uint128 1
  let one_256 = Uint256 1
  let fee_denom = Uint256 10000 (* Fee denominated in basis points: 1 b.p. = 0.01% *)
  let empty_string = ""
  let did = "did"
  let ssi_id = "s$i"

  let option_value = tfun 'A => fun(default: 'A) => fun(input: Option 'A) =>
    match input with
    | Some v => v
    | None => default
    end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zero_addr
  let option_bystr32_value = let f = @option_value ByStr32 in f zero_hash
  let option_bystr33_value = let f = @option_value ByStr33 in f zeroByStr33
  let option_bystr64_value = let f = @option_value ByStr64 in f zeroByStr64
  let option_string_value = let f = @option_value String in f empty_string

  let grow: Uint128 -> Uint256 =
    fun(var : Uint128) =>
      let get_big = builtin to_uint256 var in match get_big with
        | Some big => big
        | None => builtin sub zero_256 one_256 (* @error throws an integer underflow - should never happen *)
        end

  let get_output: Uint128 -> Uint128 -> Uint128 -> Uint256 -> Uint128 =
    fun(input_amount: Uint128) => fun(input_reserve: Uint128) => fun(output_reserve: Uint128) => fun (after_fee: Uint256) =>
      let input_amount_u256 = grow input_amount in
      let input_reserve_u256 = grow input_reserve in
      let output_reserve_u256 = grow output_reserve in
      let input_amount_after_fee = builtin mul input_amount_u256 after_fee in
      let numerator = builtin mul input_amount_after_fee output_reserve_u256 in
      let input_reserve_denom = builtin mul input_reserve_u256 fee_denom in
      let denominator = builtin add input_reserve_denom input_amount_after_fee in
      let result = builtin div numerator denominator in
      let result_uint128 = builtin to_uint128 result in match result_uint128 with
        | None => builtin sub zero one (* @error throws an integer overflow by computing -1 in uint *)
        | Some r => r
        end

  let compute_token: Uint128 -> Uint256 -> Uint256 -> Uint128 =
    fun(amount: Uint128) => fun(price: Uint256) => fun(m: Uint256) =>
      let amount_u256 = grow amount in
      let numerator = builtin mul amount_u256 m in
      let result = builtin div numerator price in
      let result_uint128 = builtin to_uint128 result in match result_uint128 with
        | None => builtin sub zero one (* @error throws an integer overflow by computing -1 in uint *)
        | Some r => r
        end

  let one_msg = fun(msg: Message) => let nil_msg = Nil{Message} in Cons{Message} msg nil_msg

  let make_error =
    fun(error: Error) => fun(version: String) => fun(code: Int32) => fun(addr: ByStr20)  =>
      let exception = match error with
      | CodeWrongSender    => "WrongSender"
      | CodeDidIsNull      => "DidIsNull"
      | CodeWrongStatus    => "WrongStatus"
      | CodeIsNull         => "ZeroValueOrNull"
      | CodeSameValue      => "SameValue"
      | CodeNotValid       => "InvalidValue"
      end in { _exception: exception; contractVersion: version; errorCode: code; contractAddress: addr }

contract Trasmuter(
  token_id: String,
  init_community: String,
  init_sbt_issuer: String,
  init_issuer_subdomain: String,
  init_nft: ByStr32,
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20,
      field verification_methods: Map String ByStr33,
      field services: Map String ByStr20,
      field did_domain_dns: Map String ByStr20 end end end,
  init_fund: String
  )
  with (* Contract constraints *)
    let string_is_not_empty = fun(s : String ) =>
      let zero = Uint32 0 in
      let s_length = builtin strlen s in
      let is_empty = builtin eq s_length zero in
      negb is_empty in
    let token_ok = string_is_not_empty token_id in
    let comm_ok = string_is_not_empty init_community in
    let fund_ok = string_is_not_empty init_fund in
    let valid_token_comm = andb token_ok comm_ok in
    let valid_str = andb valid_token_comm fund_ok in
    let valid_dom =
      (* The initial domain name must not be null *)
      let null = builtin eq init_nft zero_hash in
      negb null in
    andb valid_str valid_dom
  =>
  
  (***************************************************)
  (*               Mutable parameters                *)
  (***************************************************)

  field nft_domain: ByStr32 = init_nft
  field pending_domain: ByStr32 = zero_hash
  
  field pauser: ByStr32 = init_nft
  field is_paused: Bool = False

  field community: String = init_community
  field token_amount: Uint128 = zero

  (* DID Services *)
  field services: Map String ByStr20 = Emp String ByStr20
  field profit_fund: String = init_fund

  (* The block number when the last transition occurred *)
  field ledger_time: BNum = BNum 0
  
  (* A monotonically increasing number representing the amount of transitions that have taken place *)
  field tx_number: Uint128 = zero

  field sbt_issuer: String = init_sbt_issuer
  field sbt_issuer_subdomain: String = init_issuer_subdomain
  field sbt_user_subdomain: String = "defi"

  (* The smart contract @version *)
  field version: String = "S$ITransmuterDApp_1.0.0"

(***************************************************)
(*               Contract procedures               *)
(***************************************************)

(* Emits an error & cancels the transaction.
     @param err: The Error data type.
     @param code: A signed integer type of 32 bits. *)
procedure ThrowError(err: Error, code: Int32)
  ver <- version; e = make_error err ver code _this_address; throw e
end

(* Verifies that the contract is active (unpaused). *) 
procedure RequireNotPaused()
  paused <- is_paused; match paused with
    | False => | True => err = CodeWrongStatus; code = Int32 -1; ThrowError err code
    end
end

(* Verifies the origin of the call.
   It must match the input address.
     @param addr: A 20-byte string. *)
procedure VerifyOrigin(addr: ByStr20)
  verified = builtin eq _origin addr; match verified with
    | True => | False => err = CodeWrongSender; code = Int32 -2; ThrowError err code
    end
end

(* Verifies that the transaction comes from the contract owner.
     @param ssi_init: A 20-byte string representing the address of the SSI INIT DApp. *)
procedure VerifyOwner(
  ssi_init: ByStr20 with contract
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20 end end
  )
  id <- nft_domain; domain_ = builtin to_string id;
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -3; ThrowError err code
    | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller
    end
end

procedure ThrowIfZero(val: Uint128)
  is_null = builtin eq zero val; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -4; ThrowError err code
    end
end

procedure ThrowIfNullAddr(addr: ByStr20)
  is_null = builtin eq addr zero_addr; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -5; ThrowError err code
    end
end

procedure ThrowIfNullHash(input: ByStr32)
  is_null = builtin eq input zero_hash; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -6; ThrowError err code
    end
end

procedure ThrowIfNullString(input: String)
  is_null = builtin eq input empty_string; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -7; ThrowError err code
    end
end

procedure Donate(
  ssi_init: ByStr20 with contract field dns: Map String ByStr20 end,
  donate: Uint128
  )
  is_zero = builtin eq zero donate; match is_zero with
    | True => | False =>
      donateDomain = "donate"; get_addr <-& ssi_init.dns[donateDomain];
      addr = option_bystr20_value get_addr; ThrowIfNullAddr addr;
      accept; msg = let m = { _tag: "AddFunds"; _recipient: addr; _amount: donate } in one_msg m; send msg
    end
end

procedure TyronCommunityFund(
  ssi_init: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20 end end,
  id: String
  )
  fund <- profit_fund;
  init_did <-& ssi_init.implementation; ver <- version;
  get_fee <-& init_did.utility[ver][id]; fee = option_uint128_value get_fee;
  is_zero = builtin eq fee zero; match is_zero with
    | True => | False =>
      get_did <-& ssi_init.did_dns[fund]; match get_did with
        | Some did_ =>
          accept;
          msg = let m = { _tag: "AddFunds"; _recipient: did_; _amount: fee } in one_msg m; send msg
        | None => err = CodeDidIsNull; code = Int32 -8; ThrowError err code
        end
    end
end

procedure RequireContractOwner(
  donate: Uint128,
  tx: String
  )
  ssi_init <-& init.dApp; VerifyOwner ssi_init;
  Donate ssi_init donate; TyronCommunityFund ssi_init tx
end

procedure Timestamp()
  current_block <- &BLOCKNUMBER; ledger_time := current_block;
  latest_tx_number <- tx_number; new_tx_number = builtin add latest_tx_number one;
  tx_number := new_tx_number
end

procedure ThrowIfSameDomain(
  a: ByStr32,
  b: ByStr32
  )
  is_same = builtin eq a b; match is_same with
    | False => | True => err = CodeSameValue; code = Int32 -9; ThrowError err code
    end
end

(* Verifies that the given addresses are not equal.
     @params a & b: 20-byte strings. *) 
procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
    | False => | True => err = CodeSameValue; code = Int32 -10; ThrowError err code
    end
end

procedure ThrowIfDifferentAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
    | True => | False => err = CodeNotValid; code = Int32 -11; ThrowError err code
    end
end

procedure FetchServiceAddr(id: String)
  ssi_init <-& init.dApp;
  initId = "init"; get_did <-& ssi_init.did_dns[initId]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -12; ThrowError err code
    | Some did_ =>
      get_service <-& did_.services[id]; addr = option_bystr20_value get_service;
      ThrowIfNullAddr addr; services[id] := addr;
      ssi_service <-& did_.services[ssi_id]; ssi_addr = option_bystr20_value ssi_service;
      ThrowIfNullAddr ssi_addr; services[ssi_id] := ssi_addr;
      token_service <-& did_.services[token_id]; token_addr = option_bystr20_value token_service;
      ThrowIfNullAddr token_addr; services[token_id] := token_addr
    end
end

procedure IsSender(id: String)
  ThrowIfNullString id; ssi_init <-& init.dApp;
  get_addr <-& ssi_init.dns[id]; match get_addr with
    | None => err = CodeIsNull; code = Int32 -13; ThrowError err code
    | Some addr =>
      is_sender = builtin eq addr _sender; match is_sender with
        | True => | False =>
          err = CodeWrongSender; code = Int32 -14; ThrowError err code
        end
    end
end

procedure VerifySBT(
  domain: ByStr32,
  ssi_init: ByStr20 with contract
    field did_dns: Map String ByStr20 with contract
      field verification_methods: Map String ByStr33 end end,
  get_xwallet: Option ByStr20 with contract
    field ivms101: Map String String,
    field sbt: Map String ByStr64 end
  )
  match get_xwallet with
  | None => err = CodeNotValid; code = Int32 -15; ThrowError err code
  | Some xwallet_ => (* Access the caller's SBT *)
    issuer <- sbt_issuer;
    get_ivms101 <-& xwallet_.ivms101[issuer]; msg = option_string_value get_ivms101; ThrowIfNullString msg;
    
    get_did <-& ssi_init.did_dns[issuer]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -16; ThrowError err code
    | Some did_ =>
      issuer_subdomain <- sbt_issuer_subdomain;
      get_didkey <-& did_.verification_methods[issuer_subdomain]; did_key = option_bystr33_value get_didkey;
      signed_data = let hash = builtin sha256hash msg in builtin to_bystr hash;
      (* The issuer's signature *)
      get_sig <-& xwallet_.sbt[issuer]; sig = option_bystr64_value get_sig;
      is_right_signature = builtin schnorr_verify did_key signed_data sig; match is_right_signature with
        | True => | False => err = CodeNotValid; code = Int32 -17; ThrowError err code
        end
    end
  end
end

procedure Auth(
  domain: ByStr32,
  subdomain: Option String
  )
  ssi_init <-& init.dApp;
  user_subdomain <- sbt_user_subdomain;
  subdomain_ = match subdomain with
  | Some subd => subd
  | None => user_subdomain
  end;

  ThrowIfNullHash domain; domain_ = builtin to_string domain;
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -18; ThrowError err code
    | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller;

      get_addr <-& did_.did_domain_dns[subdomain_];
      addr = option_bystr20_value get_addr; ThrowIfNullAddr addr;
      get_xwallet <-& addr as ByStr20 with contract
      field ivms101: Map String String,
      field sbt: Map String ByStr64 end;
      VerifySBT domain ssi_init get_xwallet
    end
end

procedure FetchCommunity(amount: Uint128)
  ssi_community <- community;
  FetchServiceAddr ssi_community;
  get_comm_addr <- services[ssi_community]; comm_address = option_bystr20_value get_comm_addr; ThrowIfNullAddr comm_address;
  
  get_community <-& comm_address as ByStr20 with contract
    field reserves: Pair Uint128 Uint128,
    field price: Uint256,
    field ml: Uint256 end;
  
  match get_community with
  | None => err = CodeNotValid; code = Int32 -20; ThrowError err code
  | Some comm => 
    reserves <-& comm.reserves;
    ssi_reserve = let fst_element = @fst Uint128 Uint128 in fst_element reserves;
    is_zero = builtin eq zero ssi_reserve; match is_zero with
      | True =>
        current_price <-& comm.price; current_mul <-& comm.ml;
        token_amt = compute_token amount current_price current_mul;
        token_amount := token_amt
      | False =>
        token_reserve = let snd_element = @snd Uint128 Uint128 in snd_element reserves; ThrowIfZero token_reserve;
        token_amt = get_output amount ssi_reserve token_reserve fee_denom; (* after_fee = fee_denom means 0% fee *)
        token_amount := token_amt
      end
  end
end

procedure BurnOrder(
  is_token: Bool,
  amount: Uint128,
  ssi_addr: ByStr20,
  token_addr: ByStr20
  )
  recipient = match is_token with
  | True => (* Burn tokens *)
    token_addr
  | False => (* Burn dollars *)
    ssi_addr
  end;
  
  msg = let m = { _tag: "Burn"; _recipient: recipient; _amount: zero;
    burn_account: _sender;
    amount: amount } in one_msg m; send msg
end

procedure MintOrder(
  is_token: Bool,
  amount: Uint128,
  ssi_addr: ByStr20,
  token_addr: ByStr20,
  beneficiary: ByStr20
  )
  recipient = match is_token with
  | True => (* Mint tokens *)
    token_addr
  | False => (* Mint dollars *)
    ssi_addr
  end;
  
  msg = let m = { _tag: "Mint"; _recipient: recipient; _amount: zero;
    recipient: beneficiary;
    amount: amount } in one_msg m; send msg
end

procedure Mint_(
  beneficiary: ByStr20,
  amount: Uint128
  )
  ThrowIfNullAddr beneficiary; ThrowIfSameAddr beneficiary _this_address;
  ThrowIfZero amount;

  FetchCommunity amount; token_amt <- token_amount; ThrowIfZero token_amt;
  
  get_ssi_addr <- services[ssi_id]; ssi_addr = option_bystr20_value get_ssi_addr;
  get_token_addr <- services[token_id]; token_addr = option_bystr20_value get_token_addr;
  (* Burn tokens *)
  BurnOrder true token_amt ssi_addr token_addr;
  (* Mint S$I dollars *)
  MintOrder false amount ssi_addr token_addr beneficiary
end

procedure Burn_(
  originator: ByStr20,
  amount: Uint128
  )
  ThrowIfDifferentAddr _sender originator;
  ThrowIfZero amount;

  FetchCommunity amount; token_amt <- token_amount; ThrowIfZero token_amt;

  get_ssi_addr <- services[ssi_id]; ssi_addr = option_bystr20_value get_ssi_addr; ThrowIfNullAddr ssi_addr;
  get_token_addr <- services[token_id]; token_addr = option_bystr20_value get_token_addr; ThrowIfNullAddr token_addr;
  BurnOrder false amount ssi_addr token_addr;
  MintOrder true token_amt ssi_addr token_addr originator
end

(***************************************************)
(*              Contract transitions               *)
(***************************************************)

transition UpdateDomain(
  domain: ByStr32,
  donate: Uint128
  )
  RequireNotPaused; ThrowIfNullHash domain;
  tag = "UpdateDomain"; RequireContractOwner donate tag;
  id <- nft_domain; ThrowIfSameDomain id domain;
  ssi_init <-& init.dApp; domain_ = builtin to_string domain;

  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 1; ThrowError err code
    | Some did_ => pending_domain := domain
    end;
  Timestamp
end

transition AcceptPendingDomain()
  RequireNotPaused; ssi_init <-& init.dApp;
  domain <- pending_domain; domain_ = builtin to_string domain;
  
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 2; ThrowError err code
    | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller;
      nft_domain := domain; pending_domain := zero_hash
    end;
  Timestamp
end

transition UpdatePauser(
  domain: ByStr32,
  donate: Uint128
  )
  RequireNotPaused;
  tag = "UpdatePauser"; RequireContractOwner donate tag;
  current_pauser <- pauser; ThrowIfSameDomain current_pauser domain;
  
  pauser := domain;
  ver <- version; e = { _eventname: "SSIDApp_PauserUpdated"; version: ver;
    newPauser: domain }; event e;
  Timestamp
end

(* Pauses the whole dApp *)
transition Pause()
  RequireNotPaused;
  
  domain <- pauser; id = builtin to_string domain; IsSender id;
  
  is_paused := true;
  ver <- version; e = { _eventname: "SSIDApp_Paused"; version: ver;
    pauser: _sender }; event e;
  Timestamp
end

(* Unpauses the whole dApp *)
transition Unpause()
  paused <- is_paused; match paused with
    | True => | False => (* Not Paused Error *)
      err = CodeWrongStatus; code = Int32 3; ThrowError err code
    end;
      
  domain <- pauser; id = builtin to_string domain; IsSender id;
  
  is_paused := false;
  ver <- version; e = { _eventname: "SSIDApp_Unpaused";
    version: ver;
    pauser: _sender }; event e;
  Timestamp
end

transition UpdateProfitFund(
  val: String,
  donate: Uint128
  )
  RequireNotPaused; ThrowIfNullString val;
  tag = "UpdateProfitFund"; RequireContractOwner donate tag;
  
  profit_fund := val;
  ver <- version; e = { _eventname: "SSIDApp_ProfitFund_Updated"; version: ver;
    newValue: val }; event e;
  Timestamp
end

transition UpdateCommunity(
  val: String,
  donate: Uint128
  )
  RequireNotPaused; ThrowIfNullString val;
  tag = "UpdateCommunity"; RequireContractOwner donate tag;
  
  community := val;
  ver <- version; e = { _eventname: "SSIDApp_Community_Updated"; version: ver;
    community: val }; event e;
  Timestamp
end

transition UpdateSBTIssuer(
  issuer: String,
  subdomain: String,
  donate: Uint128
  )
  RequireNotPaused; ThrowIfNullString issuer; ThrowIfNullString subdomain;
  tag = "UpdateSBTIssuer"; RequireContractOwner donate tag;
  
  sbt_issuer := issuer; sbt_issuer_subdomain := subdomain;
  ver <- version; e = { _eventname: "SSIDApp_SBTIssuer_Updated"; version: ver;
    sbtIssuer: issuer;
    issuerSubdomain: subdomain }; event e;
  Timestamp
end

transition UpdateSBTUser(
  val: String,
  donate: Uint128
  )
  RequireNotPaused; ThrowIfNullString val;
  tag = "UpdateSBTUser"; RequireContractOwner donate tag;
  
  sbt_user_subdomain := val;
  ver <- version; e = { _eventname: "SSIDApp_SBTUser_Updated"; version: ver;
    userSubdomain: val }; event e;
  Timestamp
end

(* Mints new dollars.
  The caller (_sender) must have enough token balance.
   @param recipient: Address of the beneficiary whose dollar balance increases.
   @param amount: Number of dollars minted. *)
transition MintSSI(
  domain: ByStr32,
  subdomain: Option String,
  recipient: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; Auth domain subdomain;

  Mint_ recipient amount;
  ver <- version; e = { _eventname: "SSIDApp_DollarsMinted"; version: ver;
    minter: _sender;
    beneficiary: recipient;
    amount: amount }; event e;
  Timestamp
end

(* Burns existing dollars.
  The caller (_sender) must have enough dollar balance.
   @param burn_account: Address of the originator whose balance decreases.
   @param amount: Number of dollars burned. *)
transition BurnSSI(
  domain: ByStr32,
  subdomain: Option String,
  burn_account: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; Auth domain subdomain;

  Burn_ burn_account amount;
  ver <- version; e = { _eventname: "SSIDApp_DollarsBurned"; version: ver;
    burner: _sender;
    amount: amount }; event e;
  Timestamp
end

transition BurnSuccessCallBack(
  burner: ByStr20,
  burn_account: ByStr20,
  amount: Uint128
  )
  RequireNotPaused;
  ThrowIfDifferentAddr burner _this_address; ThrowIfZero amount;
  Timestamp
end

transition MintSuccessCallBack(
  minter: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  RequireNotPaused;
  ThrowIfDifferentAddr minter _this_address; ThrowIfZero amount;
  Timestamp
end