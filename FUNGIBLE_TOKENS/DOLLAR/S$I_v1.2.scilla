(* dollar.ssi DApp v1
Self-Sovereign Identity Dollar (Fungible Decentralised Token)
Tyron Self-Sovereign Identity (SSI) Protocol
Copyright Tyron Mapu Community Interest Company, Tyron SSI DAO 2023. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron SSI) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron SSI; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron SSI in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron SSI or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils IntUtils

library Dollar
  type Error =
    | CodeWrongSender
    | CodeDidIsNull
    | CodeWrongStatus
    | CodeIsNull
    | CodeSameValue
    | CodeIsInsufficient

  let true = True
  let false = False
  let zero = Uint128 0
  let one = Uint128 1
  let zero_addr = 0x0000000000000000000000000000000000000000
  let zero_hash = 0x0000000000000000000000000000000000000000000000000000000000000000

  let option_value = tfun 'A => fun(default: 'A) => fun(input: Option 'A) =>
    match input with
    | Some v => v
    | None => default
    end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zero_addr

  let string_is_not_empty: String -> Bool =
    fun(s: String ) =>
      let zero = Uint32 0 in
      let s_length = builtin strlen s in
      let is_empty = builtin eq s_length zero in
      negb is_empty

  let one_msg = fun(msg: Message) => let nil_msg = Nil{Message} in Cons{Message} msg nil_msg

  let two_msgs = fun(msg1: Message) => fun(msg2: Message) =>
    let msgs_tmp = one_msg msg2 in Cons{Message} msg1 msgs_tmp

  let make_error = fun (error: Error) => fun (version: String) => fun (code: Int32) =>
    let exception = match error with
    | CodeWrongSender    => "WrongSender"
    | CodeDidIsNull      => "DidIsNull"
    | CodeWrongStatus    => "WrongStatus"
    | CodeIsNull         => "ZeroValueOrNull"
    | CodeSameValue      => "SameValue"
    | CodeIsInsufficient => "InsufficientAmount"
    end in { _exception: exception; contractVersion: version; errorCode: code }

contract Dollar(
  contract_owner: ByStr20,
  init_nft: ByStr32,
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field dns: Map String ByStr20,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20,
      field services: Map String ByStr20 end end end,
  name: String,
  symbol: String,
  decimals: Uint32,
  init_fund: String, (* @review move to library *)
  init_supply: Uint128,
  init_balances: Map ByStr20 Uint128
  )
  with (* Contract constraints *)
    let name_ok = string_is_not_empty name in
    let symbol_ok = string_is_not_empty symbol in
    let name_symbol_ok = andb name_ok symbol_ok in
    let decimals_ok =
      let six = Uint32 6 in
      let eighteen = Uint32 18 in
      let decimals_at_least_6 = uint32_le six decimals in
      let decimals_no_more_than_18 = uint32_le decimals eighteen in
      andb decimals_at_least_6 decimals_no_more_than_18 in
    andb name_symbol_ok decimals_ok
  =>

(***************************************************)
(*               Mutable parameters                *)
(***************************************************)

  field nft_domain: ByStr32 = init_nft
  field pending_domain: ByStr32 = zero_hash
  
  field pauser: ByStr32 = init_nft
  field is_paused: Bool = False

  field total_supply: Uint128 = init_supply
  field balances: Map ByStr20 Uint128 = init_balances
  field allowances: Map ByStr20 Map ByStr20 Uint128 = Emp ByStr20 Map ByStr20 Uint128
  field minters: Map ByStr20 Bool = let emp_map = Emp ByStr20 Bool in
    builtin put emp_map contract_owner true

  (* DID Services *)
  field services: Map String ByStr20 = Emp String ByStr20
  field profit_fund: String = init_fund

  (* The block number when the last transition occurred *)
  field ledger_time: BNum = BNum 0
  
  (* A monotonically increasing number representing the amount of transitions that have taken place *)
  field tx_number: Uint128 = zero

  (* The smart contract @version *)
  field version: String = "DollarDApp_1.2.0"

(***************************************************)
(*               Contract procedures               *)
(***************************************************)

(* Emits an error & cancels the transaction.
     @param err: The Error data type.
     @param code: A signed integer type of 32 bits. *)
procedure ThrowError(err: Error, code: Int32)
  ver <- version; e = make_error err ver code; throw e
end

(* Verifies that the contract is active (unpaused). *) 
procedure RequireNotPaused()
  paused <- is_paused; match paused with
    | False => | True => err = CodeWrongStatus; code = Int32 -1; ThrowError err code
    end
end

(* Verifies the origin of the call.
   It must match the input address.
     @param addr: A 20-byte string. *)
procedure VerifyOrigin(addr: ByStr20)
  verified = builtin eq _origin addr; match verified with
    | True => | False => err = CodeWrongSender; code = Int32 -2; ThrowError err code
    end
end

(* Verifies that the transaction comes from the contract owner.
     @param ssi_init: A 20-byte string representing the address of the SSI INIT DApp. *)
procedure VerifyOwner(
  ssi_init: ByStr20 with contract
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20 end end
  )
  id <- nft_domain; domain_ = builtin to_string id;
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 -3; ThrowError err code
    | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller
    end
end

procedure ThrowIfZero(val: Uint128)
  is_null = builtin eq zero val; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -4; ThrowError err code
    end
end

procedure ThrowIfNullAddr(addr: ByStr20)
  is_null = builtin eq addr zero_addr; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -5; ThrowError err code
    end
end

procedure ThrowIfNullHash(input: ByStr32)
  is_null = builtin eq input zero_hash; match is_null with
    | False => | True => err = CodeIsNull; code = Int32 -6; ThrowError err code
    end
end

procedure ThrowIfNullString(input: String)
  not_null = string_is_not_empty input; match not_null with
    | True => | False => err = CodeIsNull; code = Int32 -7; ThrowError err code
    end
end

procedure Donate(
  ssi_init: ByStr20 with contract field dns: Map String ByStr20 end,
  donate: Uint128
  )
  is_zero = builtin eq zero donate; match is_zero with
    | True => | False =>
      donateDomain = "donate"; get_addr <-& ssi_init.dns[donateDomain];
      addr = option_bystr20_value get_addr; ThrowIfNullAddr addr;
      accept; msg = let m = { _tag: "AddFunds"; _recipient: addr; _amount: donate } in one_msg m; send msg
    end
end

procedure TyronCommunityFund(
  ssi_init: ByStr20 with contract
    field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
    field did_dns: Map String ByStr20 with contract
      field controller: ByStr20 end end,
  id: String
  )
  fund <- profit_fund;
  txID = builtin concat fund id;
  init_did <-& ssi_init.implementation; ver <- version;
  get_fee <-& init_did.utility[ver][txID]; fee = option_uint128_value get_fee;
  is_zero = builtin eq fee zero; match is_zero with
    | True => | False =>
      get_did <-& ssi_init.did_dns[fund]; match get_did with
        | Some did_ => msg = let m = { _tag: "AddFunds"; _recipient: did_; _amount: fee } in one_msg m; send msg
        | None => err = CodeDidIsNull; code = Int32 -8; ThrowError err code
        end
    end
end

procedure RequireContractOwner(
  donate: Uint128,
  tx: String
  )
  ssi_init <-& init.dApp; VerifyOwner ssi_init;
  Donate ssi_init donate; TyronCommunityFund ssi_init tx
end

procedure Timestamp()
  current_block <- &BLOCKNUMBER; ledger_time := current_block;
  latest_tx_number <- tx_number; new_tx_number = builtin add latest_tx_number one;
  tx_number := new_tx_number
end

procedure ThrowIfSameDomain(
  a: ByStr32,
  b: ByStr32
  )
  is_same = builtin eq a b; match is_same with
    | False => | True => err = CodeSameValue; code = Int32 -8; ThrowError err code
    end
end

(* Verifies that the given addresses are not equal.
     @params a & b: 20-byte strings. *) 
procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_same = builtin eq a b; match is_same with
    | False => | True => err = CodeSameValue; code = Int32 -10; ThrowError err code
    end
end

procedure IsSender(id: String)
  ThrowIfNullString id; ssi_init <-& init.dApp;

  get_addr <-& ssi_init.dns[id]; match get_addr with
    | None => err = CodeIsNull; code = Int32 -11; ThrowError err code
    | Some addr =>
      is_sender = builtin eq addr _sender; match is_sender with
        | True =>
        | False =>
          err = CodeWrongSender; code = Int32 -12; ThrowError err code
        end
    end
end

procedure IsSufficient(
  value: Uint128,
  amount: Uint128
  )
  is_sufficient = uint128_ge value amount; match is_sufficient with
    | True => | False => err = CodeIsInsufficient; code = Int32 -13; ThrowError err code
    end
end

procedure UpdateMinter_(addr: ByStr20)
  ThrowIfNullAddr addr;

  is_minter <- exists minters[addr]; match is_minter with
    | True => delete minters[addr]
    | False => minters[addr] := true
    end
end

procedure IsMinter()
  is_minter <- exists minters[_sender]; match is_minter with
    | True => | False =>
      err = CodeWrongSender; code = Int32 -14; ThrowError err code
    end
end

procedure Mint_(
  beneficiary: ByStr20,
  amount: Uint128
  )
  ThrowIfNullAddr beneficiary; ThrowIfSameAddr beneficiary _this_address;
  ThrowIfZero amount;

  get_balance <- balances[beneficiary]; balance = option_uint128_value get_balance;
  new_balance = builtin add balance amount;
  balances[beneficiary] := new_balance;

  supply <- total_supply;
  new_supply = builtin add supply amount;
  total_supply := new_supply
end

procedure Burn_(
  originator: ByStr20,
  amount: Uint128
  )
  ThrowIfNullAddr originator; ThrowIfSameAddr originator _this_address;
  ThrowIfZero amount;

  get_balance <- balances[originator]; balance = option_uint128_value get_balance;
  IsSufficient balance amount;
  new_balance = builtin sub balance amount;
  balances[originator] := new_balance;

  supply <- total_supply;
  new_supply = builtin sub supply amount;
  total_supply := new_supply
end

procedure TransferIfSufficientBalance(
  originator: ByStr20,
  beneficiary: ByStr20,
  amount: Uint128
  )
  ThrowIfNullAddr originator; ThrowIfNullAddr beneficiary;
  ThrowIfSameAddr originator beneficiary; ThrowIfSameAddr beneficiary _this_address;
  ThrowIfZero amount;
  
  get_balance <- balances[originator]; balance = option_uint128_value get_balance;
  IsSufficient balance amount;
  new_balance = builtin sub balance amount;
  balances[originator] := new_balance;

  get_bal <- balances[beneficiary]; bal = option_uint128_value get_bal;
  new_bal = builtin add bal amount;
  balances[beneficiary] := new_bal
end

(***************************************************)
(*              Contract transitions               *)
(***************************************************)

transition UpdateDomain(
  domain: ByStr32,
  donate: Uint128
  )
  RequireNotPaused; ThrowIfNullHash domain;
  tag = "UpdateDomain"; RequireContractOwner donate tag;
  id <- nft_domain; ThrowIfSameDomain id domain;
  ssi_init <-& init.dApp; domain_ = builtin to_string domain;

  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 1; ThrowError err code
    | Some did_ => pending_domain := domain
    end;
  Timestamp
end

transition AcceptPendingDomain()
  RequireNotPaused; ssi_init <-& init.dApp;
  domain <- pending_domain; domain_ = builtin to_string domain;
  
  get_did <-& ssi_init.did_dns[domain_]; match get_did with
    | None => err = CodeDidIsNull; code = Int32 2; ThrowError err code
    | Some did_ =>
      controller <-& did_.controller; VerifyOrigin controller;
      nft_domain := domain; pending_domain := zero_hash
    end;
  Timestamp
end

transition UpdatePauser(
  domain: ByStr32,
  donate: Uint128
  )
  RequireNotPaused;
  tag = "UpdatePauser"; RequireContractOwner donate tag;
  current_pauser <- pauser; ThrowIfSameDomain current_pauser domain;
  
  pauser := domain;
  ver <- version; e = { _eventname: "SSIDApp_PauserUpdated"; version: ver;
    newPauser: domain }; event e;
  Timestamp
end

(* Pauses the whole dApp *)
transition Pause()
  RequireNotPaused;
  
  domain <- pauser; id = builtin to_string domain; IsSender id;
  
  is_paused := true;
  ver <- version; e = { _eventname: "SSIDApp_Paused"; version: ver;
    pauser: _sender }; event e;
  Timestamp
end

(* Unpauses the whole dApp *)
transition Unpause()
  paused <- is_paused; match paused with
    | True => | False => (* Not Paused Error *)
      err = CodeWrongStatus; code = Int32 3; ThrowError err code
    end;
      
  domain <- pauser; id = builtin to_string domain; IsSender id;
  
  is_paused := false;
  ver <- version; e = { _eventname: "SSIDApp_Unpaused";
    version: ver;
    pauser: _sender }; event e;
  Timestamp
end

transition UpdateProfitFund(
  val: String,
  donate: Uint128
  )
  RequireNotPaused; ThrowIfNullString val;
  tag = "UpdateProfitFund"; RequireContractOwner donate tag;
  
  profit_fund := val;
  ver <- version; e = { _eventname: "ProfitFundUpdated"; version: ver;
    newValue: val }; event e;
  Timestamp
end

(* Updates the current minters. *)
transition UpdateMinters(
  addresses: List ByStr20,
  donate: Uint128
  )
  RequireNotPaused;
  tag = "UpdateMinters"; RequireContractOwner donate tag;

  forall addresses UpdateMinter_;
  ver <- version; e = { _eventname: "SSIDApp_MintersUpdated";
    version: ver;
    minters: addresses }; event e;
  (* Prevent accepting a contract that does not support this callback *)
  msg = let m = { _tag: "UpdateMintersCallBack"; _recipient: _sender; _amount: zero;
    minters: addresses } in one_msg m; send msg;
  Timestamp
end

(* Mints new dollars. The caller (_sender) must be a minter.
     @param recipient: Address of the beneficiary whose balance increases.
     @param amount: Number of dollars minted. *)
transition Mint(
  recipient: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; IsMinter;
  
  Mint_ recipient amount;
  ver <- version; e = { _eventname: "SSIDApp_Minted"; version: ver;
    minter: _sender;
    recipient: recipient;
    amount: amount }; event e;
  
  (* Prevent using contracts that do not support this transition *)
  msg_to_beneficiary = { _tag: "RecipientAcceptMint"; _recipient: recipient; _amount: zero; 
    minter: _sender;
    recipient: recipient;
    amount: amount };
  msg_to_sender = { _tag: "MintSuccessCallBack"; _recipient: _sender; _amount: zero; 
    minter: _sender;
    recipient: recipient;
    amount: amount };
  msgs = two_msgs msg_to_beneficiary msg_to_sender; send msgs;
  Timestamp
end

(* Burns existing dollars. The caller (_sender) must be a minter.
     @param burn_account: Address of the originator whose balance decreases.
     @param amount: Number of dollars burned. *)
transition Burn(
  burn_account: ByStr20,
  amount: Uint128
  )
  RequireNotPaused; IsMinter;
  
  Burn_ burn_account amount;
  ver <- version; e = { _eventname: "SSIDApp_Burned"; version: ver;
    burner: _sender;
    burnAccount: burn_account;
    amount: amount }; event e;

  (* Prevent accepting a contract that does not support this callback *)
  msg = let m = { _tag: "BurnSuccessCallBack"; _recipient: _sender; _amount: zero;
    burner: _sender;
    burn_account: burn_account;
    amount: amount } in one_msg m; send msg;
  Timestamp
end

(* Moves an amount of dollars from the caller to the beneficiary.
   The caller (_sender) must be the token owner.
   Balance of _sender (originator) decreases & balance of the beneficiary increases.
     @param to: Address of the beneficiary.
     @param amount: Number of dollars sent. *)
transition Transfer(
  to: ByStr20,
  amount: Uint128
  )
  RequireNotPaused;

  TransferIfSufficientBalance _sender to amount;
  ver <- version; e = { _eventname: "TransferSuccess"; version: ver;
    sender: _sender;
    recipient: to;
    amount: amount }; event e;
  
  (* Prevent using contracts that do not support Transfer of tokens *)
  msg_to_beneficiary = { _tag: "RecipientAcceptTransfer"; _recipient: to; _amount: zero;
    sender: _sender;
    recipient: to;
    amount: amount
  };
  msg_to_originator = { _tag: "TransferSuccessCallBack"; _recipient: _sender; _amount: zero;
    sender: _sender;
    recipient: to;
    amount: amount
  };
  msgs = two_msgs msg_to_beneficiary msg_to_originator; send msgs;
  Timestamp
end

(* Increases the allowance of the spender over the dollars of the caller.
   The caller (_sender) must be the token owner.
     @param spender: Address of the approved spender.
     @param amount: Number of dollars increased as allowance for the spender. *)
transition IncreaseAllowance(
  spender: ByStr20,
  amount: Uint128
  )
  RequireNotPaused;
  ThrowIfNullAddr spender;
  ThrowIfSameAddr spender _sender; ThrowIfSameAddr spender _this_address;

  get_allowance <- allowances[_sender][spender]; allowance = option_uint128_value get_allowance;
  new_allowance = builtin add allowance amount; allowances[_sender][spender] := new_allowance;
  
  ver <- version; e = { _eventname: "SSIDApp_IncreasedAllowance"; version: ver;
    token_owner: _sender;
    spender: spender;
    new_allowance: new_allowance }; event e;
  Timestamp
end

(* Decreases the allowance of the spender over the dollars of the caller.
   The caller (_sender) must be the token owner.
     @param spender: Address of the approved spender.
     @param amount: Number of LP tokens decreased for the spender allowance. *)
transition DecreaseAllowance(
  spender: ByStr20,
  amount: Uint128
  )
  RequireNotPaused;
  ThrowIfNullAddr spender;
  ThrowIfSameAddr spender _sender; ThrowIfSameAddr spender _this_address;

  get_allowance <- allowances[_sender][spender]; allowance = option_uint128_value get_allowance;
  is_valid = uint128_le amount allowance; match is_valid with
    | True =>
      new_allowance = builtin sub allowance amount;
      
      allowances[_sender][spender] := new_allowance;
      ver <- version; e = { _eventname: "SSIDApp_DecreasedAllowance"; version: ver;
        token_owner: _sender;
        spender: spender;
        new_allowance: new_allowance }; event e
    | False =>
      (* Interpret it as a request to delete the spender data *)
      delete allowances[_sender][spender]
    end;
  Timestamp
end

(* Moves a given amount of dollars from one address to another using the allowance mechanism.
   Caller must be an approved spender & their allowance decreases.
   Balance of the token owner (originator) decreases & balance of the recipient (beneficiary) increases.
     @param from: Address of the originator.
     @param to: Address of the beneficiary.
     @param amount: Number of dollars transferred. *)
transition TransferFrom(
  from: ByStr20,
  to: ByStr20,
  amount: Uint128
  )
  RequireNotPaused;

  get_allowance <- allowances[from][_sender]; allowance = option_uint128_value get_allowance;
  IsSufficient allowance amount;
  
  TransferIfSufficientBalance from to amount;
  ver <- version; e = { _eventname: "SSIDApp_TransferFromSuccess"; version: ver;
    initiator: _sender;
    sender: from;
    recipient: to;
    amount: amount }; event e;
  new_allowance = builtin sub allowance amount; allowances[from][_sender] := new_allowance;
  
  (* Prevent using contracts that do not support TransferFrom of dollars *)
  msg_to_spender = { _tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero;
    initiator: _sender;
    sender: from;
    recipient: to;
    amount: amount
  };
  msg_to_beneficiary = { _tag: "RecipientAcceptTransferFrom"; _recipient: to; _amount: zero;
    initiator: _sender;
    sender: from;
    recipient: to;
    amount: amount
  }; msgs = two_msgs msg_to_spender msg_to_beneficiary; send msgs;
  Timestamp
end