(* v3.1.1
Self-Sovereign Identity Dollar DApp, Fungible Decentralized Stablecoin <> Proxy smart contract
Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2022. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (“Tyron”) (or Tyron’s licensors) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the “Program”), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the “Resulting Program”) solely for Non-Commercial Use as long as you:
1. give prominent notice (“Notice”) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
“Non-Commercial Use” means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

import BoolUtils IntUtils

library SsiDollar
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  let zero = Uint128 0
  
  type Caller =
    | Controller
    | Implementation
  
  let controller_ = Controller
  let implementation_ = Implementation
  
contract SsiDollar(
  contract_owner: ByStr20 with contract 
    field nft_username: String,
    field paused: Bool,
    field xinit: ByStr20 with contract field dApp: ByStr20 with contract
      field did_dns: Map String ByStr20 with contract
        field controller: ByStr20 end end end end,
  name: String,
  symbol: String,
  decimals: Uint32,
  init_supply: Uint128,
  init_balances: Map ByStr20 Uint128
  )
  with
    let string_is_not_empty = fun( s : String ) =>
      let zero = Uint32 0 in
      let s_length = builtin strlen s in
      let s_empty = builtin eq s_length zero in
      negb s_empty in
    let name_ok = string_is_not_empty name in
    let symbol_ok = string_is_not_empty symbol in
      let name_symbol_ok = andb name_ok symbol_ok in
    let decimals_ok =
      let six = Uint32 6 in
      let eighteen = Uint32 18 in
      let decimals_at_least_6 = uint32_le six decimals in
      let decimals_no_more_than_18 = uint32_le decimals eighteen in
      andb decimals_at_least_6 decimals_no_more_than_18 in
      andb name_symbol_ok decimals_ok
  =>
  field implementation: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field xinit: ByStr20 with contract field dApp: ByStr20 with contract
      field did_dns: Map String ByStr20 with contract
        field controller: ByStr20 end end end end = contract_owner
  field balances: Map ByStr20 Uint128 = init_balances
  field total_supply: Uint128 = init_supply
  field allowances: Map ByStr20 ( Map ByStr20 Uint128 ) = Emp ByStr20 ( Map ByStr20 Uint128 )
  field version: String = "$SIprox-3.1.0" (* @todo *)

procedure VerifyCaller( caller: Caller )
  current_impl <- implementation;
  is_paused <-& current_impl.paused; match is_paused with
    | False => | True => e = { _exception: "$SIproxy-WrongStatus" }; throw e end;
  match caller with
  | Controller =>
    current_username <-& current_impl.nft_username;
    init <-& current_impl.xinit; current_init <-& init.dApp;
    get_did <-& current_init.did_dns[current_username]; match get_did with
      | None => e = { _exception: "$SIproxy-DidIsNull" }; throw e
      | Some did_ =>
        current_controller <-& did_.controller;
        verified = builtin eq _origin current_controller; match verified with
        | True => | False => e = { _exception: "$SIproxy-WrongCaller" }; throw e end end
  | Implementation =>
    verified = builtin eq _sender current_impl; match verified with
    | True => | False => e = { _exception: "$SIproxy-WrongCaller" }; throw e end end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
    | False => | True => e = { _exception: "$SIproxy-SameAddress" }; throw e end end

transition UpdateImplementation(
  addr: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field xinit: ByStr20 with contract field dApp: ByStr20 with contract
      field did_dns: Map String ByStr20 with contract
        field controller: ByStr20 end end end end
  )
  VerifyCaller controller_; current_impl <- implementation; ThrowIfSameAddr current_impl addr;
  implementation := addr;
  e = { _eventname: "ImplementationUpdated";
    newImplementation: addr }; event e end

transition Mint(
  addrName: String,
  beneficiary: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = { _tag: "Mint"; _recipient: current_impl; _amount: zero;
    addrName: addrName;
    originator: _sender;
    beneficiary: beneficiary;
    amount: amount
  } in one_msg m; send msg end

transition Burn(
  addrName: String,
  beneficiary: Uint128, 
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = {
    _tag: "Burn"; _recipient: current_impl; _amount: zero;
    addrName: addrName;
    originator: _sender;
    beneficiary: beneficiary;
    amount: amount
  } in one_msg m; send msg end

transition TransmuteCallBack(
  beneficiary: ByStr20,
  newBalance: Uint128,
  newSupply: Uint128
  )
  VerifyCaller implementation_;
  balances[beneficiary] := newBalance;
  total_supply := newSupply end

transition Transfer(
  to: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = { _tag: "Transfer"; _recipient: current_impl; _amount: zero;
    originator: _sender;
    beneficiary: to;
    amount: amount } in one_msg m; send msg end

transition TransferCallBack(
  originator: ByStr20,
  beneficiary: ByStr20,
  originatorBal: Uint128,
  beneficiaryBal: Uint128
  )
  VerifyCaller implementation_;
  balances[originator] := originatorBal;
  balances[beneficiary] := beneficiaryBal;
  e = {
    _eventname: "TransferSuccess";
    sender: originator;
    recipient: beneficiary
  }; event e end

transition IncreaseAllowance(
  spender: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = { _tag: "IncreaseAllowance"; _recipient: current_impl; _amount: zero;
    originator: _sender;
    spender: spender;
    amount: amount } in one_msg m; send msg end

transition DecreaseAllowance(
  spender: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = {
    _tag: "DecreaseAllowance"; _recipient: current_impl; _amount: zero;
    originator: _sender;
    spender: spender;
    amount: amount } in one_msg m; send msg end

transition AllowanceCallBack(
  originator: ByStr20,
  spender: ByStr20,
  newAllowance: Uint128
  )
  VerifyCaller implementation_;
  allowances[originator][spender] := newAllowance end

transition TransferFrom(
  from: ByStr20, 
  to: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = { _tag: "TransferFrom"; _recipient: current_impl; _amount: zero;
    originator: from;
    spender: _sender;
    beneficiary: to;
    amount: amount } in one_msg m; send msg end