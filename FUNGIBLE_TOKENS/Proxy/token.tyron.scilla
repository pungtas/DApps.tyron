(* v3.0.0
token.tyron: Fungible Token DApp <> Proxy smart contract
Self-Sovereign Identity Protocol
Copyright (C) Tyron Mapu Community Interest Company and its affiliates.
www.ssiprotocol.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.*)

scilla_version 0

import BoolUtils IntUtils

library FungibleToken
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  type Error =
    | CodeWrongStatus
    | CodeWrongCaller
    | CodeIsNull
    | CodeSameAddress

  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeWrongStatus            => Int32 0
    | CodeWrongCaller            => Int32 -1
    | CodeIsNull                 => Int32 -2
    | CodeSameAddress            => Int32 -3
    end in { _exception: "Error"; code: result }
  
  let zero = Uint128 0
  
  type Caller =
    | Controller
    | Implementation
  
  let controller_ = Controller
  let implementation_ = Implementation
  
contract FungibleToken(
  contract_owner: ByStr20 with contract 
    field nft_username: String,
    field paused: Bool,
    field xinit: ByStr20 with contract field dApp: ByStr20 with contract
      field implementation: ByStr20 with contract
        field utility: Map String Map String Uint128 end,
      field dns: Map String ByStr20,
      field did_dns: Map String ByStr20 with contract
        field did: String,   (* the W3C decentralized identifier *)
        field nft_username: String,
        field controller: ByStr20,
        field version: String,
        field verification_methods: Map String ByStr33,
        field services: Map String ByStr20,
        field did_domain_dns: Map String ByStr20 end end end end,
  name: String,
  symbol: String,
  decimals: Uint32,
  init_supply: Uint128,
  init_balances: Map ByStr20 Uint128
  )
  with
    let string_is_not_empty = fun( s : String ) =>
      let zero = Uint32 0 in
      let s_length = builtin strlen s in
      let s_empty = builtin eq s_length zero in
      negb s_empty in
    let name_ok = string_is_not_empty name in
    let symbol_ok = string_is_not_empty symbol in
      let name_symbol_ok = andb name_ok symbol_ok in
    let decimals_ok =
      let six = Uint32 6 in
      let eighteen = Uint32 18 in
      let decimals_at_least_6 = uint32_le six decimals in
      let decimals_no_more_than_18 = uint32_le decimals eighteen in
      andb decimals_at_least_6 decimals_no_more_than_18 in
      andb name_symbol_ok decimals_ok
  =>
  field implementation: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field xinit: ByStr20 with contract field dApp: ByStr20 with contract
      field implementation: ByStr20 with contract
      field utility: Map String Map String Uint128 end,
        field dns: Map String ByStr20,
      field did_dns: Map String ByStr20 with contract
        field did: String,   (* the W3C decentralized identifier *)
        field nft_username: String,
        field controller: ByStr20,
        field version: String,
        field verification_methods: Map String ByStr33,
        field services: Map String ByStr20,
        field did_domain_dns: Map String ByStr20 end end end end = contract_owner
  field balances: Map ByStr20 Uint128 = init_balances
  field total_supply: Uint128 = init_supply
  field allowances: Map ByStr20 ( Map ByStr20 Uint128 ) = Emp ByStr20 ( Map ByStr20 Uint128 )
  field version: String = "token---3.0.0" (* @todo update *)
  
procedure ThrowError( err: Error )
  e = make_error err; throw e end
  
procedure VerifyCaller( caller: Caller )
  current_impl <- implementation;
  is_paused <-& current_impl.paused; match is_paused with
  | False => | True => err = CodeWrongStatus; ThrowError err end;
  match caller with
  | Controller =>
      current_username <-& current_impl.nft_username;
      init <-& current_impl.xinit; current_init <-& init.dApp;
      get_did <-& current_init.did_dns[current_username]; match get_did with
      | None => err = CodeIsNull; ThrowError err
      | Some did_ =>
          current_controller <-& did_.controller;
          verified = builtin eq _origin current_controller; match verified with
          | True => | False => err = CodeWrongCaller; ThrowError err end end
  | Implementation =>
      verified = builtin eq _sender current_impl; match verified with
      | True => | False => err = CodeWrongCaller; ThrowError err end end end

procedure ThrowIfSameAddr(
  a: ByStr20,
  b: ByStr20
  )
  is_self = builtin eq a b; match is_self with
  | False => | True => err = CodeSameAddress; ThrowError err end end

transition UpdateImplementation(
  addr: ByStr20 with contract
    field nft_username: String,
    field paused: Bool,
    field xinit: ByStr20 with contract field dApp: ByStr20 with contract
      field implementation: ByStr20 with contract
        field utility: Map String Map String Uint128 end,
      field dns: Map String ByStr20,
      field did_dns: Map String ByStr20 with contract
        field did: String,   (* the W3C decentralized identifier *)
        field nft_username: String,
        field controller: ByStr20,
        field version: String,
        field verification_methods: Map String ByStr33,
        field services: Map String ByStr20,
        field did_domain_dns: Map String ByStr20 end end end end
  )
  VerifyCaller controller_; current_impl <- implementation; ThrowIfSameAddr current_impl addr;
  implementation := addr;
  e = { _eventname: "ImplementationUpdated";
    newImplementation: addr }; event e end

transition Mint(
  beneficiary: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = { _tag: "Mint"; _recipient: current_impl; _amount: zero;
    originator: _sender;
    beneficiary: beneficiary;
    amount: amount
  } in one_msg m; send msg end

transition Burn(
  beneficiary: Uint128, 
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = {
    _tag: "Burn"; _recipient: current_impl; _amount: zero;
    originator: _sender;
    beneficiary: beneficiary;
    amount: amount
  } in one_msg m; send msg end

transition TransmuteCallBack(
  beneficiary: ByStr20,
  newBalance: Uint128,
  newSupply: Uint128
  )
  VerifyCaller implementation_;
  balances[beneficiary] := newBalance;
  total_supply := newSupply end
  
transition Transfer(
  to: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = { _tag: "Transfer"; _recipient: current_impl; _amount: zero;
    originator: _sender;
    beneficiary: to;
    amount: amount } in one_msg m; send msg end

transition TransferCallBack(
  originator: ByStr20,
  beneficiary: ByStr20,
  originatorBal: Uint128,
  beneficiaryBal: Uint128
  )
  VerifyCaller implementation_;
  balances[originator] := originatorBal;
  balances[beneficiary] := beneficiaryBal;
  e = {
    _eventname: "TransferSuccess";
    sender: originator;
    recipient: beneficiary
  }; event e end

transition IncreaseAllowance(
  spender: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = { _tag: "IncreaseAllowance"; _recipient: current_impl; _amount: zero;
    originator: _sender;
    spender: spender;
    amount: amount } in one_msg m; send msg end

transition DecreaseAllowance(
  spender: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = {
    _tag: "DecreaseAllowance"; _recipient: current_impl; _amount: zero;
    originator: _sender;
    spender: spender;
    amount: amount } in one_msg m; send msg end

transition AllowanceCallBack(
  originator: ByStr20,
  spender: ByStr20,
  newAllowance: Uint128
  )
  VerifyCaller implementation_;
  allowances[originator][spender] := newAllowance end

transition TransferFrom(
  from: ByStr20, 
  to: ByStr20,
  amount: Uint128
  )
  current_impl <- implementation;
  msg = let m = { _tag: "TransferFrom"; _recipient: current_impl; _amount: zero;
    originator: from;
    spender: _sender;
    beneficiary: to;
    amount: amount } in one_msg m; send msg end