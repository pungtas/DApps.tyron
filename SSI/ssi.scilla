(*
  SSI.tyron: self-sovereign identity DID smart contract.
  Self-Sovereign Identity Protocol.
  Copyright (C) Tyron Pungtas and its affiliates.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
*)

scilla_version 0

import BoolUtils

library SSI

  type DIDstatus =
  | Deployed
  | Created
  | Updated
  | Recovered
  | Deactivated

  type Operation =
    | Recovery
    | Update

  let one_msg = fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg

  let two_msgs = fun( msg1: Message ) => fun( msg2: Message ) =>
    let msgs_tmp = one_msg msg2 in Cons{ Message } msg1 msgs_tmp

  type Error =
    | CodeWrongCaller
    | CodeNotValid
    | CodeNotToken
    | CodeNotProxy
    | CodeWrongAmount
    | CodeWrongDomain
    | CodeWrongSignature
    | CodeUndefinedKey

  let make_error = fun( error: Error ) =>
    let result = match error with
    | CodeWrongCaller            => Int32 -1
    | CodeNotValid               => Int32 -2
    | CodeNotToken               => Int32 -3
    | CodeNotProxy               => Int32 -4
    | CodeWrongAmount            => Int32 -5
    | CodeWrongDomain            => Int32 -6
    | CodeWrongSignature         => Int32 -7
    | CodeUndefinedKey           => Int32 -8
    end in { _exception: "Error"; code: result }
        
  let zero = Uint128 0
  let zero_bystr33 = 0x000000000000000000000000000000000000000000000000000000000000000000

  let option_value = tfun 'A => fun( default: 'A ) => fun ( input: Option 'A ) =>
    match input with
    | Some v => v
    | None => default
    end

  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr33_value = let f = @option_value ByStr33 in f 

  type TransferProtocol =
    | Https
    | Git
    | Zilliqa
    | Arweave

  type ServiceEndpoint =
    | ServiceEndpoint of TransferProtocol String
    
  type DidService =
    | DidService of String ServiceEndpoint  (* the type & endpoint *)
    
  type Document =
    | VerificationMethod of Action String ByStr33  (* string: key purpose OR service ID *)
    | Service of Action String DidService
    
  let update_methods: forall 'A. List Document -> Map String ByStr33 -> Map String ByStr33 = tfun 'A => fun(l: List Document) => fun(prevMethods: Map String ByStr33) =>
    let foldl = @list_foldl Document Map String ByStr33
    in let iter = fun(map: Map String ByStr33) => fun(h: Document) =>
      match h with
      | VerificationMethod action purpose key =>
          match action with
            | Add =>
                builtin put map purpose key
            | Remove =>
                builtin remove map purpose
          end
      | _ => map
      end in foldl iter prevMethods l

  let make_endpoint = fun( input: DidService ) =>
    match input with
    | DidService type endpoint =>
        match endpoint with
        | ServiceEndpoint transfer addr =>
            match transfer with
            | Https =>
                let prefix = "https://" in let uri = builtin concat prefix addr in
                Pair{ String String } type uri
            | Git =>
                let prefix = "git://" in let uri = builtin concat prefix addr in
                Pair{String String} type uri
            | Zilliqa =>
                let prefix = "zil://" in let uri = builtin concat prefix addr in
                Pair{ String String } type uri
            | Arweave =>
                let prefix = "ar://" in let uri = builtin concat prefix e in
                Pair{ String String } type uri
            end
        end
    end

  let update_services: forall 'A. List Document -> Map String Pair String String -> Map String Pair String String = tfun 'A => fun( l: List Document ) => fun( prevServices: Map String Pair String String ) =>
    let foldl = @list_foldl Document Map String Pair String String
    in let iter = fun( map: Map String Pair String String ) => fun( h: Document ) =>
      match h with
      | Service action id didService =>
          match action with
          | Add =>
              let endpoint = make_endpoint didService
              in builtin put map id endpoint
          | Remove =>
              builtin remove map id
          end
      | _ => map
      end in foldl iter prevServices l

  let ssi = "ssi"
  
contract SSI(
	(* Initial owner of the self-sovereign identity *)
	initOwner: ByStr20,

  (* For meta-transactions *)
  initAgent: ByStr20,
  
  (* INIT.tyron smart contract *)
  initTyron: ByStr20
  )
  with
    let init = 0xe9fa53331b59e517f6a7bfe1d35522a1e49a2dc0 in builtin eq init initTyron
  =>
  (* Owner of the SSI *)
  field owner: ByStr20 = initOwner

  field ssi: Option ByStr33 = None{ ByStr33 }
  
  field social_recovery: ByStr33 = zero_bystr33

  field network_addr: String = ""

  (* The agent can make meta-transactions and pay the gas *)
  field agent: ByStr20 = initAgent

  (* INIT.tyron current implementation *)
  field init: ByStr20 = initTyron

  (* DID records
  @key: domain name
	@value: DID address *)
  field did_records: Map String ByStr20 = Emp String ByStr20

  (* Proxy and implementation addresses
  @key: dapp (implementation) address
	@value: dapp (proxy) address *)
  field records: Map ByStr20 ByStr20 = Emp ByStr20 ByStr20

  (* Token balances
  @key: token (proxy) address
  @value: balance *)
  field xBalances: Map ByStr20 Uint128 = Emp ByStr20 Uint128

procedure ThrowError(
  err: Error
  )
  e = make_error err; throw e
end

procedure VerifyCaller()
  owner_addr <- owner;
  agent_addr <- agent;
  is_caller =
    let is_owner = builtin eq owner_addr _sender in
    let is_agent = builtin eq agent_addr _sender in orb is_owner is_agent;
  match is_caller with
  | True =>
  | False => err= CodeWrongCaller; ThrowError err
  end
end

procedure VerifyInit()
  init_addr <- init;
  is_init = builtin eq init_addr _sender;
  match is_init with
  | True =>
  | False => err= CodeWrongCaller; ThrowError err
  end
end

transition UpdateOwner(
  newOwner: ByStr20
  )
  VerifyCaller;
  owner := newOwner
end

transition UpdateAgent(
  newAgent: ByStr20
  )
  VerifyCaller;
  agent := newAgent
end

transition UpdateINIT(
  newInit: ByStr20
  )
  VerifyCaller;
  init := newInit
end

(* Set a domain name for the self-sovereign identity *)
transition SetDomain(
  username: String
  )
	VerifyCaller;
  init_addr <- init;
	accept;
	msg = let m = {
		_tag: "SetDomain";
		_recipient: init_addr;
		_amount: _amount;
		domain: ssi;
    username: username;
    agent: _sender
	} in one_msg m; send msg
end

(* Set a DID domain name in the did_records *)
transition SetDidDomain(
  domain: String
  )
  (* WIP: do remote read to verify DID has the SSI as owner *)
  taken <- exists did_records[domain];
  match taken with
  | True => err= CodeNotValid; ThrowError err
  | False =>
      did_records[domain] := _sender
  end
end

(* Decentralized Identifier CRUD operations *)
transition CRUD(
  domain: String,
  tag: String,
  recoveryKey: Option ByStr33,
  updateKey: Option ByStr33,
  document: Option (List Document),
  signedData: Option ByStr,
  signature: Option ByStr64
  )
  VerifyCaller;
  did_addr <- did_records[domain];
  match did_addr with
  | Some addr =>
      msg = let m = {
        _tag: tag;
        _recipient: addr;
        _amount: zero;
        document: document;
        signature: signature;
        recoveryKey: recoveryKey;
        updateKey: updateKey
      } in one_msg m; send msg
  | None => err= CodeWrongDomain; ThrowError err
  end
end

transition DIDdapp(
  domain: ByStr20,
  tag: String,
  addr: ByStr20,
  amount: Uint128
  )
  VerifyCaller;
  accept;
  msg = let m = {
    _tag: tag;
    _recipient: domain;
    _amount: _amount;
    addr: addr;
    amount: amount
  } in one_msg m;
  send msg
  (*
  get_dapp <- did_records[domain];
  match get_dapp with
  | Some dapp_addr =>
      accept;
      msg = let m = {
        _tag: tag;
        _recipient: dapp_addr;
        _amount: _amount;
        addr: addr;
        amount: amount
      } in one_msg m;
      send msg
  | None => err= CodeWrongDomain; ThrowError err
  end*)
end

(*---------*)
(* xWallet *)
(*---------*)

transition SocialRecovery(
  newOwner: ByStr20,
  signature: ByStr64
  )
  VerifyCaller;
  social_recovery_key <- social_recovery;
  signed_data = builtin to_bystr newOwner;
  signature_is_right = builtin schnorr_verify social_recovery_key signed_data signature;
  match signature_is_right with
  | False => err = CodeWrongSignature; ThrowError err
  | True => owner := newOwner
  end
end

(* Verifify the validity, check & update the balance of tokens *)
procedure XWallet(
  direction: XDirection,
  amount: Uint128
  )
  dapp_proxy <- records[_sender];
  match dapp_proxy with
  | Some proxy =>
      get_balance <- xBalances[proxy]; balance = option_uint128_value get_balance;
      match direction with
      | In =>
          new_balance = builtin add balance amount;
          xBalances[proxy] := new_balance
      | Out =>
          new_balance = builtin sub balance amount;
          xBalances[proxy] := new_balance
      end
  | None => err= CodeNotToken; ThrowError err
  end
end
  
(* Add native funds ($ZIL) to the xWallet *)
transition AddFunds()
  accept
end
  
(* Send $ZIL to any recipient that implements the tag (e.g. "AddFunds", "") *)
transition SendFunds(
  tag: String,
  recipient: ByStr20,
  amount: Uint128
  )
  VerifyCaller;
  accept;
  msg = let m = {
    _tag: tag;
    _recipient: recipient;
    _amount: amount
  } in one_msg m; send msg
end

transition RecipientAcceptTransfer(
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  XWallet incoming amount
end

transition RecipientAcceptTransferFrom(
  initiator: ByStr20,
  sender: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  )
  XWallet incoming amount
end

transition XTransfer(
  proxyAddr: ByStr20,
  recipient: ByStr20,
  amount: Uint128
  ) 
  VerifyCaller;
  get_balance <- xBalances[proxyAddr]; balance = option_uint128_value get_balance;
  is_enough = builtin lt amount balance;
  match is_enough with
  | True =>
      msg = let m = {
        _tag: "Transfer";
        _recipient: proxyAddr;
        _amount: zero;
        to: recipient;
        amount: amount
      } in one_msg m ; send msg
  | False => err= CodeWrongAmount; ThrowError err
  end
end

(* Callback transition - must be defined or transfers from this xWallet will fail *)
transition TransferSuccessCallBack(
  sender: ByStr20, 
  recipient: ByStr20,
  amount: Uint128
  )
  XWallet outcoming amount   
end

procedure VerifySignature(
  signedData: ByStr,
  signature: ByStr64
  )
  ssi_key <- ssi;
  match ssi_key with
  | Some key =>
      signature_is_right = builtin schnorr_verify key signedData signature;
      match signature_is_right with
      | True =>
      | False => err = CodeWrongSignature; ThrowError err
      end
  | None => err = CodeUndefinedKey; ThrowError err
  end
end

(* to-do WIP
transition GasStation(
  network: String,
  amount: Uint128,
  signedData: ByStr,
  sig: ByStr64,
  beneficiary: String
  )
  VerifyCaller;
  VerifySignature signedData sig;
  VerifyProxy network;
  proxy_addr <- records[network];
  originator <- network_addr;
  match proxy_addr with
  | Some addr =>
      accept;
      msg = let m = {
        _tag: "xZIL";
        _recipient: addr;
        _amount: amount;
        originator: originator;
        beneficiary: beneficiary
      } in one_msg m ; send msg
  | None => err= CodeNotProxy; ThrowError err
  end
end
*)

procedure InitVerifyRecord(
  sender: ByStr20
  )
  current_init <- init;
  accept;
  msg = let m = {
    _tag: "VerifyRecord";
    _recipient: current_init;
    _amount: _amount;
    sender: sender;
    did: _sender
  } in one_msg m; send msg
end

transition VerifyRecordCallBack(
  did: ByStr20,
  implAddr: ByStr20,
  proxyAddr: ByStr20
  )
  VerifyInit;
  records[implAddr] := proxyAddr;
  msg = let m = {
    _tag: "VerifyRecordCallBack";
    _recipient: did;
    _amount: zero;
    implAddr: implAddr;
    proxyAddr: proxyAddr
  } in one_msg m; send msg
end

transition VerifyRecord(
  sender: ByStr20
  )
  InitVerifyRecord sender
end