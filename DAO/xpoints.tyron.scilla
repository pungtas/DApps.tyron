(* v1.5.0
xpoints.ssis dApp: Governance Portal <> Raise Your Voice
Self-Sovereign Identity Protocol
Copyright Tyron Mapu Community Interest Company 2022. All rights reserved.
You acknowledge and agree that Tyron Mapu Community Interest Company (Tyron) own all legal right, title and interest in and to the work, software, application, source code, documentation and any other documents in this repository (collectively, the Program), including any intellectual property rights which subsist in the Program (whether those rights happen to be registered or not, and wherever in the world those rights may exist), whether in source code or any other form.
Subject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy, modify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise attempt to extract the source code of, the Program or any part thereof, except that you may contribute to this repository.
You are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify, merge, combine with another program or create derivative works of the Program (such resulting program, collectively, the Resulting Program) solely for Non-Commercial Use as long as you:
1. give prominent notice (Notice) with each copy of the Resulting Program that the Program is used in the Resulting Program and that the Program is the copyright of Tyron; and
2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith, combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial Use restriction set forth herein.
Non-Commercial Use means each use as described in clauses (1)-(3) below, as reasonably determined by Tyron in its sole discretion:
1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each case without any anticipated commercial application;
2. use by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization or government institution; or
3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally do not exceed 10,000 at any time.
You will not use any trade mark, service mark, trade name, logo of Tyron or any other company or organization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks, names or logos.
If you have any questions, comments or interest in pursuing any other use cases, please reach out to us at mapu@ssiprotocol.com.*)

scilla_version 0

import BoolUtils IntUtils

library XPoints
  let one_msg =
    fun( msg: Message ) =>
    let nil_msg = Nil{ Message } in Cons{ Message } msg nil_msg
  
  let zero = Uint128 0
  let zeroByStr20 = 0x0000000000000000000000000000000000000000

  let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
    match input with
    | Some v => v
    | None => default end
  let option_uint128_value = let f = @option_value Uint128 in f zero
  let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
  
contract XPoints(
  init: ByStr20 with contract field dApp: ByStr20 with contract
    field dns: Map String ByStr20 end end
  )
  field version: String = "xpoints-1.5.0"
  field ranking: Map ByStr32 Uint128 = Emp ByStr32 Uint128
  field motions: Map ByStr32 String = Emp ByStr32 String
  field nonce: Uint128 = zero
  field tx_number: Uint128 = zero

procedure Timestamp()
  current_block <- &BLOCKNUMBER; latest_tx_number <- tx_number;
  new_tx_number = let incrementor = Uint128 1 in builtin add latest_tx_number incrementor; tx_number := new_tx_number end

transition RaiseYourVoice(
  action: String,
  id: Option ByStr32,   (* to add xPoints to an existing motion *)
  motion: Option String,   (* to create a new motion *)
  amount: Uint128
  )
  current_init <-& init.dApp; donateDApp = "donate";
  get_addr <-& current_init.dns[donateDApp]; addr = option_bystr20_value get_addr;
  msg = let m = { _tag: "XPoints"; _recipient: addr; _amount: zero;
    amount: amount } in one_msg m ; send msg;
  is_new = let new = "new" in builtin eq action new; match is_new with
    | True =>
      match motion with
      | None => e = { _exception : "xPoints-NewMotionIsNull" }; throw e
      | Some motion_ =>
        current_nonce <- nonce;
        new_nonce = let incrementor = Uint128 1 in builtin add current_nonce incrementor; nonce := new_nonce;
        new_id = let input = let nonce_str = builtin to_string new_nonce in builtin concat nonce_str motion_ in builtin sha256hash input;
        motions[new_id] := motion_;
        ranking[new_id] := amount end
    | False =>
      is_add = let add = "add" in builtin eq action add; match is_add with
        | True =>
          match id with
          | None => e = { _exception : "xPoints-AddMotionIsNull" }; throw e
          | Some id_ =>
            get_points <- ranking[id_]; points = option_uint128_value get_points;
            new_balance = builtin add points amount; ranking[id_] := new_balance end
        | False => e = { _exception : "xPoints-InvalidAction" }; throw e end end;
  Timestamp end